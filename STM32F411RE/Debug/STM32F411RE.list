
STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002218  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080023b8  080023b8  000033b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024cc  080024cc  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  080024cc  080024cc  000034cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024d4  080024d4  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024d4  080024d4  000034d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024d8  080024d8  000034d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080024dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000060  0800253c  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  0800253c  00004200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000032f8  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dec  00000000  00000000  00007388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000350  00000000  00000000  00008178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000250  00000000  00000000  000084c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c4e  00000000  00000000  00008718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000059ff  00000000  00000000  0001e366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000852eb  00000000  00000000  00023d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9050  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010ec  00000000  00000000  000a9094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000aa180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080023a0 	.word	0x080023a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080023a0 	.word	0x080023a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <TIM4_Init>:

#include "stm32f4xx.h"
#include <stdint.h>
#include <stdio.h>
#include "gpio.h"
void TIM4_Init(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80002c0:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <TIM4_Init+0x40>)
 80002c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c4:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <TIM4_Init+0x40>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM4->PSC = 84 - 1;         // 84MHz / 84 = 1MHz
 80002cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <TIM4_Init+0x44>)
 80002ce:	2253      	movs	r2, #83	@ 0x53
 80002d0:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = 1000 - 1;       // 1ms (1kHz)
 80002d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000300 <TIM4_Init+0x44>)
 80002d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM4->DIER |= TIM_DIER_UIE;
 80002da:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <TIM4_Init+0x44>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	4a08      	ldr	r2, [pc, #32]	@ (8000300 <TIM4_Init+0x44>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	60d3      	str	r3, [r2, #12]
    TIM4->CR1 |= TIM_CR1_CEN;
 80002e6:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <TIM4_Init+0x44>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a05      	ldr	r2, [pc, #20]	@ (8000300 <TIM4_Init+0x44>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM4_IRQn);
 80002f2:	201e      	movs	r0, #30
 80002f4:	f7ff ffc4 	bl	8000280 <__NVIC_EnableIRQ>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40023800 	.word	0x40023800
 8000300:	40000800 	.word	0x40000800

08000304 <Buttons_Init>:

void Buttons_Init(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000308:	4b18      	ldr	r3, [pc, #96]	@ (800036c <Buttons_Init+0x68>)
 800030a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800030c:	4a17      	ldr	r2, [pc, #92]	@ (800036c <Buttons_Init+0x68>)
 800030e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000312:	6453      	str	r3, [r2, #68]	@ 0x44

    // PA0 và PA1 là input + pull-up
    GPIOA->MODER &= ~((3 << 0) | (3 << 2));  // Input mode
 8000314:	4b16      	ldr	r3, [pc, #88]	@ (8000370 <Buttons_Init+0x6c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a15      	ldr	r2, [pc, #84]	@ (8000370 <Buttons_Init+0x6c>)
 800031a:	f023 030f 	bic.w	r3, r3, #15
 800031e:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~((3 << 0) | (3 << 2));
 8000320:	4b13      	ldr	r3, [pc, #76]	@ (8000370 <Buttons_Init+0x6c>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4a12      	ldr	r2, [pc, #72]	@ (8000370 <Buttons_Init+0x6c>)
 8000326:	f023 030f 	bic.w	r3, r3, #15
 800032a:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (1 << 0) | (1 << 2);    // Pull-up
 800032c:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <Buttons_Init+0x6c>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	4a0f      	ldr	r2, [pc, #60]	@ (8000370 <Buttons_Init+0x6c>)
 8000332:	f043 0305 	orr.w	r3, r3, #5
 8000336:	60d3      	str	r3, [r2, #12]

    // Kết nối EXTI0 và EXTI1 tới PA0 và PA1
    SYSCFG->EXTICR[0] &= ~((0xF << 0) | (0xF << 4));
 8000338:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <Buttons_Init+0x70>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <Buttons_Init+0x70>)
 800033e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000342:	6093      	str	r3, [r2, #8]

    // Cho phép EXTI0 và EXTI1
    EXTI->IMR |= (1 << 0) | (1 << 1);
 8000344:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <Buttons_Init+0x74>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a0b      	ldr	r2, [pc, #44]	@ (8000378 <Buttons_Init+0x74>)
 800034a:	f043 0303 	orr.w	r3, r3, #3
 800034e:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 0) | (1 << 1); // Ngắt sườn xuống
 8000350:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <Buttons_Init+0x74>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a08      	ldr	r2, [pc, #32]	@ (8000378 <Buttons_Init+0x74>)
 8000356:	f043 0303 	orr.w	r3, r3, #3
 800035a:	60d3      	str	r3, [r2, #12]

    // Bật NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 800035c:	2006      	movs	r0, #6
 800035e:	f7ff ff8f 	bl	8000280 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI1_IRQn);
 8000362:	2007      	movs	r0, #7
 8000364:	f7ff ff8c 	bl	8000280 <__NVIC_EnableIRQ>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40023800 	.word	0x40023800
 8000370:	40020000 	.word	0x40020000
 8000374:	40013800 	.word	0x40013800
 8000378:	40013c00 	.word	0x40013c00

0800037c <GPIO_Init>:
void GPIO_Init(void) {
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8000380:	4b29      	ldr	r3, [pc, #164]	@ (8000428 <GPIO_Init+0xac>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000384:	4a28      	ldr	r2, [pc, #160]	@ (8000428 <GPIO_Init+0xac>)
 8000386:	f043 0307 	orr.w	r3, r3, #7
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA5 - PWM LED
    GPIOA->MODER &= ~(3 << (5 * 2));
 800038c:	4b27      	ldr	r3, [pc, #156]	@ (800042c <GPIO_Init+0xb0>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a26      	ldr	r2, [pc, #152]	@ (800042c <GPIO_Init+0xb0>)
 8000392:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000396:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2 << (5 * 2));
 8000398:	4b24      	ldr	r3, [pc, #144]	@ (800042c <GPIO_Init+0xb0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a23      	ldr	r2, [pc, #140]	@ (800042c <GPIO_Init+0xb0>)
 800039e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003a2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (1 << (5 * 4));  // TIM2_CH1 hoặc tương ứng
 80003a4:	4b21      	ldr	r3, [pc, #132]	@ (800042c <GPIO_Init+0xb0>)
 80003a6:	6a1b      	ldr	r3, [r3, #32]
 80003a8:	4a20      	ldr	r2, [pc, #128]	@ (800042c <GPIO_Init+0xb0>)
 80003aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003ae:	6213      	str	r3, [r2, #32]

    // PC1 - ADC input
    GPIOC->MODER |= (3 << (1 * 2));  // Analog
 80003b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000430 <GPIO_Init+0xb4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000430 <GPIO_Init+0xb4>)
 80003b6:	f043 030c 	orr.w	r3, r3, #12
 80003ba:	6013      	str	r3, [r2, #0]

    // PA8 - van (output)
    GPIOA->MODER &= ~(3 << (8 * 2));
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <GPIO_Init+0xb0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a1a      	ldr	r2, [pc, #104]	@ (800042c <GPIO_Init+0xb0>)
 80003c2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80003c6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (1 << (8 * 2));       // Output
 80003c8:	4b18      	ldr	r3, [pc, #96]	@ (800042c <GPIO_Init+0xb0>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a17      	ldr	r2, [pc, #92]	@ (800042c <GPIO_Init+0xb0>)
 80003ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80003d2:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1 << 8);            // Push-pull
 80003d4:	4b15      	ldr	r3, [pc, #84]	@ (800042c <GPIO_Init+0xb0>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	4a14      	ldr	r2, [pc, #80]	@ (800042c <GPIO_Init+0xb0>)
 80003da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80003de:	6053      	str	r3, [r2, #4]
    GPIOA->ODR &= ~(1 << 8);               // Tắt ban đầu
 80003e0:	4b12      	ldr	r3, [pc, #72]	@ (800042c <GPIO_Init+0xb0>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a11      	ldr	r2, [pc, #68]	@ (800042c <GPIO_Init+0xb0>)
 80003e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80003ea:	6153      	str	r3, [r2, #20]

    // PB13 - quạt, PB10 - còi (output)
    GPIOB->MODER &= ~((3 << (13 * 2)) | (3 << (10 * 2)));
 80003ec:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <GPIO_Init+0xb8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a10      	ldr	r2, [pc, #64]	@ (8000434 <GPIO_Init+0xb8>)
 80003f2:	f023 6343 	bic.w	r3, r3, #204472320	@ 0xc300000
 80003f6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((1 << (13 * 2)) | (1 << (10 * 2))); // Output mode
 80003f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <GPIO_Init+0xb8>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000434 <GPIO_Init+0xb8>)
 80003fe:	f043 6382 	orr.w	r3, r3, #68157440	@ 0x4100000
 8000402:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER &= ~((1 << 13) | (1 << 10)); // Push-pull
 8000404:	4b0b      	ldr	r3, [pc, #44]	@ (8000434 <GPIO_Init+0xb8>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a0a      	ldr	r2, [pc, #40]	@ (8000434 <GPIO_Init+0xb8>)
 800040a:	f423 5310 	bic.w	r3, r3, #9216	@ 0x2400
 800040e:	6053      	str	r3, [r2, #4]
    GPIOB->ODR &= ~((1 << 13) | (1 << 10));    // Tắt ban đầu
 8000410:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <GPIO_Init+0xb8>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a07      	ldr	r2, [pc, #28]	@ (8000434 <GPIO_Init+0xb8>)
 8000416:	f423 5310 	bic.w	r3, r3, #9216	@ 0x2400
 800041a:	6153      	str	r3, [r2, #20]
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40023800 	.word	0x40023800
 800042c:	40020000 	.word	0x40020000
 8000430:	40020800 	.word	0x40020800
 8000434:	40020400 	.word	0x40020400

08000438 <ADC_Init>:

void ADC_Init(void) {
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800043c:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <ADC_Init+0x4c>)
 800043e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000440:	4a10      	ldr	r2, [pc, #64]	@ (8000484 <ADC_Init+0x4c>)
 8000442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000446:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC1->CR2 = 0; // Tắt ADC để cấu hình
 8000448:	4b0f      	ldr	r3, [pc, #60]	@ (8000488 <ADC_Init+0x50>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
    ADC1->SQR1 &= ~(0xF << 20); // 1 lần chuyển đổi
 800044e:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <ADC_Init+0x50>)
 8000450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000452:	4a0d      	ldr	r2, [pc, #52]	@ (8000488 <ADC_Init+0x50>)
 8000454:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000458:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ADC1->SQR3 = 11; // Kênh 11 (PC1)
 800045a:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <ADC_Init+0x50>)
 800045c:	220b      	movs	r2, #11
 800045e:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SMPR1 |= (7 << 3); // Sampling time 480 cycles cho kênh 11 (bit 3-5)
 8000460:	4b09      	ldr	r3, [pc, #36]	@ (8000488 <ADC_Init+0x50>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	4a08      	ldr	r2, [pc, #32]	@ (8000488 <ADC_Init+0x50>)
 8000466:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800046a:	60d3      	str	r3, [r2, #12]
    ADC1->CR2 |= ADC_CR2_ADON;
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <ADC_Init+0x50>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	4a05      	ldr	r2, [pc, #20]	@ (8000488 <ADC_Init+0x50>)
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	6093      	str	r3, [r2, #8]
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40023800 	.word	0x40023800
 8000488:	40012000 	.word	0x40012000

0800048c <I2C1_Init>:
#include "stm32f4xx.h"
#include <stdint.h>
#include <stdio.h>
#include "i2c.h"
#include "uart.h"
void I2C1_Init(void) {
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000490:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <I2C1_Init+0xa4>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000494:	4a26      	ldr	r2, [pc, #152]	@ (8000530 <I2C1_Init+0xa4>)
 8000496:	f043 0302 	orr.w	r3, r3, #2
 800049a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800049c:	4b24      	ldr	r3, [pc, #144]	@ (8000530 <I2C1_Init+0xa4>)
 800049e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004a0:	4a23      	ldr	r2, [pc, #140]	@ (8000530 <I2C1_Init+0xa4>)
 80004a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004a6:	6413      	str	r3, [r2, #64]	@ 0x40

    // Cấu hình PB6 (SCL) & PB9 (SDA) - cả hai là AF4
    GPIOB->MODER &= ~((3 << (6 * 2)) | (3 << (9 * 2)));
 80004a8:	4b22      	ldr	r3, [pc, #136]	@ (8000534 <I2C1_Init+0xa8>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a21      	ldr	r2, [pc, #132]	@ (8000534 <I2C1_Init+0xa8>)
 80004ae:	f423 2343 	bic.w	r3, r3, #798720	@ 0xc3000
 80004b2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((2 << (6 * 2)) | (2 << (9 * 2)));
 80004b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000534 <I2C1_Init+0xa8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000534 <I2C1_Init+0xa8>)
 80004ba:	f443 2302 	orr.w	r3, r3, #532480	@ 0x82000
 80004be:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= (1 << 6) | (1 << 9);  // Open-drain
 80004c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000534 <I2C1_Init+0xa8>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000534 <I2C1_Init+0xa8>)
 80004c6:	f443 7310 	orr.w	r3, r3, #576	@ 0x240
 80004ca:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR  &= ~((3 << (6 * 2)) | (3 << (9 * 2))); // No pull-up/down
 80004cc:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <I2C1_Init+0xa8>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	4a18      	ldr	r2, [pc, #96]	@ (8000534 <I2C1_Init+0xa8>)
 80004d2:	f423 2343 	bic.w	r3, r3, #798720	@ 0xc3000
 80004d6:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[0] &= ~(0xF << (6 * 4)); // Clear AF for PB6
 80004d8:	4b16      	ldr	r3, [pc, #88]	@ (8000534 <I2C1_Init+0xa8>)
 80004da:	6a1b      	ldr	r3, [r3, #32]
 80004dc:	4a15      	ldr	r2, [pc, #84]	@ (8000534 <I2C1_Init+0xa8>)
 80004de:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80004e2:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |=  (4 << (6 * 4));   // AF4 for PB6 (SCL)
 80004e4:	4b13      	ldr	r3, [pc, #76]	@ (8000534 <I2C1_Init+0xa8>)
 80004e6:	6a1b      	ldr	r3, [r3, #32]
 80004e8:	4a12      	ldr	r2, [pc, #72]	@ (8000534 <I2C1_Init+0xa8>)
 80004ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80004ee:	6213      	str	r3, [r2, #32]

    GPIOB->AFR[1] &= ~(0xF << ((9 - 8) * 4)); // Clear AF for PB9
 80004f0:	4b10      	ldr	r3, [pc, #64]	@ (8000534 <I2C1_Init+0xa8>)
 80004f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000534 <I2C1_Init+0xa8>)
 80004f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80004fa:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << ((9 - 8) * 4));   // AF4 for PB9 (SDA)
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <I2C1_Init+0xa8>)
 80004fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000500:	4a0c      	ldr	r2, [pc, #48]	@ (8000534 <I2C1_Init+0xa8>)
 8000502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000506:	6253      	str	r3, [r2, #36]	@ 0x24

    // Cấu hình tốc độ I2C 100kHz @16MHz
    I2C1->CR2 = 16;
 8000508:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <I2C1_Init+0xac>)
 800050a:	2210      	movs	r2, #16
 800050c:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;
 800050e:	4b0a      	ldr	r3, [pc, #40]	@ (8000538 <I2C1_Init+0xac>)
 8000510:	2250      	movs	r2, #80	@ 0x50
 8000512:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;
 8000514:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <I2C1_Init+0xac>)
 8000516:	2211      	movs	r2, #17
 8000518:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 800051a:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <I2C1_Init+0xac>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a06      	ldr	r2, [pc, #24]	@ (8000538 <I2C1_Init+0xac>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6013      	str	r3, [r2, #0]
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	40023800 	.word	0x40023800
 8000534:	40020400 	.word	0x40020400
 8000538:	40005400 	.word	0x40005400

0800053c <I2C_Scan>:
// ===== I2C SCAN =====
void I2C_Scan(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	@ 0x28
 8000540:	af00      	add	r7, sp, #0
    char msg[32];
    USART1_SendString("Scanning I2C bus...\r\n");
 8000542:	4832      	ldr	r0, [pc, #200]	@ (800060c <I2C_Scan+0xd0>)
 8000544:	f000 fe08 	bl	8001158 <USART1_SendString>
    for (uint8_t addr = 0x08; addr <= 0x77; addr++) {
 8000548:	2308      	movs	r3, #8
 800054a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800054e:	e051      	b.n	80005f4 <I2C_Scan+0xb8>
        I2C1->CR1 |= I2C_CR1_START;
 8000550:	4b2f      	ldr	r3, [pc, #188]	@ (8000610 <I2C_Scan+0xd4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a2e      	ldr	r2, [pc, #184]	@ (8000610 <I2C_Scan+0xd4>)
 8000556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800055a:	6013      	str	r3, [r2, #0]
        while (!(I2C1->SR1 & I2C_SR1_SB));
 800055c:	bf00      	nop
 800055e:	4b2c      	ldr	r3, [pc, #176]	@ (8000610 <I2C_Scan+0xd4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f9      	beq.n	800055e <I2C_Scan+0x22>
        (void)I2C1->SR1;
 800056a:	4b29      	ldr	r3, [pc, #164]	@ (8000610 <I2C_Scan+0xd4>)
 800056c:	695b      	ldr	r3, [r3, #20]
        I2C1->DR = addr << 1;
 800056e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000572:	4a27      	ldr	r2, [pc, #156]	@ (8000610 <I2C_Scan+0xd4>)
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	6113      	str	r3, [r2, #16]

        uint32_t timeout = 1000;
 8000578:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800057c:	623b      	str	r3, [r7, #32]
        while (!(I2C1->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF)) && --timeout);
 800057e:	bf00      	nop
 8000580:	4b23      	ldr	r3, [pc, #140]	@ (8000610 <I2C_Scan+0xd4>)
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	f240 4302 	movw	r3, #1026	@ 0x402
 8000588:	4013      	ands	r3, r2
 800058a:	2b00      	cmp	r3, #0
 800058c:	d105      	bne.n	800059a <I2C_Scan+0x5e>
 800058e:	6a3b      	ldr	r3, [r7, #32]
 8000590:	3b01      	subs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1f2      	bne.n	8000580 <I2C_Scan+0x44>

        if (I2C1->SR1 & I2C_SR1_ADDR) {
 800059a:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <I2C_Scan+0xd4>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d015      	beq.n	80005d2 <I2C_Scan+0x96>
            (void)I2C1->SR1;
 80005a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <I2C_Scan+0xd4>)
 80005a8:	695b      	ldr	r3, [r3, #20]
            (void)I2C1->SR2;
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <I2C_Scan+0xd4>)
 80005ac:	699b      	ldr	r3, [r3, #24]
            I2C1->CR1 |= I2C_CR1_STOP;
 80005ae:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <I2C_Scan+0xd4>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <I2C_Scan+0xd4>)
 80005b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005b8:	6013      	str	r3, [r2, #0]
            sprintf(msg, "Found device at 0x%02X\r\n", addr);
 80005ba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80005be:	463b      	mov	r3, r7
 80005c0:	4914      	ldr	r1, [pc, #80]	@ (8000614 <I2C_Scan+0xd8>)
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fe8a 	bl	80012dc <siprintf>
            USART1_SendString(msg);
 80005c8:	463b      	mov	r3, r7
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fdc4 	bl	8001158 <USART1_SendString>
 80005d0:	e00b      	b.n	80005ea <I2C_Scan+0xae>
        } else {
            I2C1->CR1 |= I2C_CR1_STOP;
 80005d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <I2C_Scan+0xd4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000610 <I2C_Scan+0xd4>)
 80005d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005dc:	6013      	str	r3, [r2, #0]
            I2C1->SR1 &= ~I2C_SR1_AF;
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <I2C_Scan+0xd4>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000610 <I2C_Scan+0xd4>)
 80005e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80005e8:	6153      	str	r3, [r2, #20]
    for (uint8_t addr = 0x08; addr <= 0x77; addr++) {
 80005ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80005ee:	3301      	adds	r3, #1
 80005f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80005f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80005f8:	2b77      	cmp	r3, #119	@ 0x77
 80005fa:	d9a9      	bls.n	8000550 <I2C_Scan+0x14>
        }
    }
    USART1_SendString("I2C scan completed.\r\n");
 80005fc:	4806      	ldr	r0, [pc, #24]	@ (8000618 <I2C_Scan+0xdc>)
 80005fe:	f000 fdab 	bl	8001158 <USART1_SendString>
}
 8000602:	bf00      	nop
 8000604:	3728      	adds	r7, #40	@ 0x28
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	080023b8 	.word	0x080023b8
 8000610:	40005400 	.word	0x40005400
 8000614:	080023d0 	.word	0x080023d0
 8000618:	080023ec 	.word	0x080023ec

0800061c <I2C1_WriteByte>:

void I2C1_WriteByte(uint8_t addr, uint8_t data) {
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	460a      	mov	r2, r1
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	4613      	mov	r3, r2
 800062a:	71bb      	strb	r3, [r7, #6]
    I2C1->CR1 |= I2C_CR1_START;
 800062c:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <I2C1_WriteByte+0x84>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a1b      	ldr	r2, [pc, #108]	@ (80006a0 <I2C1_WriteByte+0x84>)
 8000632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000636:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8000638:	bf00      	nop
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <I2C1_WriteByte+0x84>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f9      	beq.n	800063a <I2C1_WriteByte+0x1e>
    (void)I2C1->SR1;
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <I2C1_WriteByte+0x84>)
 8000648:	695b      	ldr	r3, [r3, #20]
    I2C1->DR = addr;
 800064a:	4a15      	ldr	r2, [pc, #84]	@ (80006a0 <I2C1_WriteByte+0x84>)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000650:	bf00      	nop
 8000652:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <I2C1_WriteByte+0x84>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <I2C1_WriteByte+0x36>
    (void)I2C1->SR1;
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <I2C1_WriteByte+0x84>)
 8000660:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000662:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <I2C1_WriteByte+0x84>)
 8000664:	699b      	ldr	r3, [r3, #24]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000666:	bf00      	nop
 8000668:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <I2C1_WriteByte+0x84>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0f9      	beq.n	8000668 <I2C1_WriteByte+0x4c>
    I2C1->DR = data;
 8000674:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <I2C1_WriteByte+0x84>)
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 800067a:	bf00      	nop
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <I2C1_WriteByte+0x84>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f9      	beq.n	800067c <I2C1_WriteByte+0x60>
    I2C1->CR1 |= I2C_CR1_STOP;
 8000688:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <I2C1_WriteByte+0x84>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <I2C1_WriteByte+0x84>)
 800068e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40005400 	.word	0x40005400

080006a4 <lcd_send_cmd>:
#include <stdio.h>
#include "lcd.h"
#include "i2c.h"
#include "main.h"

void lcd_send_cmd(uint8_t cmd) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
    uint8_t high = cmd & 0xF0;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	74fb      	strb	r3, [r7, #19]
    uint8_t low  = (cmd << 4) & 0xF0;
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = {
 80006bc:	7cfb      	ldrb	r3, [r7, #19]
 80006be:	f043 030c 	orr.w	r3, r3, #12
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	733b      	strb	r3, [r7, #12]
 80006c6:	7cfb      	ldrb	r3, [r7, #19]
 80006c8:	f043 0308 	orr.w	r3, r3, #8
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	737b      	strb	r3, [r7, #13]
 80006d0:	7cbb      	ldrb	r3, [r7, #18]
 80006d2:	f043 030c 	orr.w	r3, r3, #12
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	73bb      	strb	r3, [r7, #14]
 80006da:	7cbb      	ldrb	r3, [r7, #18]
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	73fb      	strb	r3, [r7, #15]
        high | 0x0C,
        high | 0x08,
        low  | 0x0C,
        low  | 0x08
    };
    for (int i = 0; i < 4; i++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	e00e      	b.n	8000708 <lcd_send_cmd+0x64>
        I2C1_WriteByte(LCD_ADDR, data_t[i]);
 80006ea:	f107 020c 	add.w	r2, r7, #12
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	204e      	movs	r0, #78	@ 0x4e
 80006f8:	f7ff ff90 	bl	800061c <I2C1_WriteByte>
        delay(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f000 fadd 	bl	8000cbc <delay>
    for (int i = 0; i < 4; i++) {
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	3301      	adds	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	2b03      	cmp	r3, #3
 800070c:	dded      	ble.n	80006ea <lcd_send_cmd+0x46>
    }
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
    uint8_t high = data & 0xF0;
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f023 030f 	bic.w	r3, r3, #15
 8000728:	74fb      	strb	r3, [r7, #19]
    uint8_t low  = (data << 4) & 0xF0;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	011b      	lsls	r3, r3, #4
 800072e:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = {
 8000730:	7cfb      	ldrb	r3, [r7, #19]
 8000732:	f043 030d 	orr.w	r3, r3, #13
 8000736:	b2db      	uxtb	r3, r3
 8000738:	733b      	strb	r3, [r7, #12]
 800073a:	7cfb      	ldrb	r3, [r7, #19]
 800073c:	f043 0309 	orr.w	r3, r3, #9
 8000740:	b2db      	uxtb	r3, r3
 8000742:	737b      	strb	r3, [r7, #13]
 8000744:	7cbb      	ldrb	r3, [r7, #18]
 8000746:	f043 030d 	orr.w	r3, r3, #13
 800074a:	b2db      	uxtb	r3, r3
 800074c:	73bb      	strb	r3, [r7, #14]
 800074e:	7cbb      	ldrb	r3, [r7, #18]
 8000750:	f043 0309 	orr.w	r3, r3, #9
 8000754:	b2db      	uxtb	r3, r3
 8000756:	73fb      	strb	r3, [r7, #15]
        high | 0x0D,
        high | 0x09,
        low  | 0x0D,
        low  | 0x09
    };
    for (int i = 0; i < 4; i++) {
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	e00e      	b.n	800077c <lcd_send_data+0x64>
        I2C1_WriteByte(LCD_ADDR, data_t[i]);
 800075e:	f107 020c 	add.w	r2, r7, #12
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	204e      	movs	r0, #78	@ 0x4e
 800076c:	f7ff ff56 	bl	800061c <I2C1_WriteByte>
        delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 faa3 	bl	8000cbc <delay>
    for (int i = 0; i < 4; i++) {
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	3301      	adds	r3, #1
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	2b03      	cmp	r3, #3
 8000780:	dded      	ble.n	800075e <lcd_send_data+0x46>
    }
}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <lcd_init>:

void lcd_init(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
    delay(100); // Cho LCD đủ thời gian lên nguồn
 8000790:	2064      	movs	r0, #100	@ 0x64
 8000792:	f000 fa93 	bl	8000cbc <delay>
    lcd_send_cmd(0x33);
 8000796:	2033      	movs	r0, #51	@ 0x33
 8000798:	f7ff ff84 	bl	80006a4 <lcd_send_cmd>
    lcd_send_cmd(0x32);
 800079c:	2032      	movs	r0, #50	@ 0x32
 800079e:	f7ff ff81 	bl	80006a4 <lcd_send_cmd>
    lcd_send_cmd(0x28);
 80007a2:	2028      	movs	r0, #40	@ 0x28
 80007a4:	f7ff ff7e 	bl	80006a4 <lcd_send_cmd>
    lcd_send_cmd(0x0C);
 80007a8:	200c      	movs	r0, #12
 80007aa:	f7ff ff7b 	bl	80006a4 <lcd_send_cmd>
    lcd_send_cmd(0x06);
 80007ae:	2006      	movs	r0, #6
 80007b0:	f7ff ff78 	bl	80006a4 <lcd_send_cmd>
    lcd_send_cmd(0x01);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ff75 	bl	80006a4 <lcd_send_cmd>
    delay(2);
 80007ba:	2002      	movs	r0, #2
 80007bc:	f000 fa7e 	bl	8000cbc <delay>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <lcd_send_string>:

void lcd_send_string(char *str) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    while (*str) {
 80007cc:	e006      	b.n	80007dc <lcd_send_string+0x18>
        lcd_send_data(*str++);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	607a      	str	r2, [r7, #4]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff9e 	bl	8000718 <lcd_send_data>
    while (*str) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1f4      	bne.n	80007ce <lcd_send_string+0xa>
    }
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <lcd_set_cursor>:
void lcd_set_cursor(uint8_t row, uint8_t col) {
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	460a      	mov	r2, r1
 80007f8:	71fb      	strb	r3, [r7, #7]
 80007fa:	4613      	mov	r3, r2
 80007fc:	71bb      	strb	r3, [r7, #6]
    lcd_send_cmd((row == 0 ? 0x80 : 0xC0) + col);
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <lcd_set_cursor+0x1a>
 8000804:	2280      	movs	r2, #128	@ 0x80
 8000806:	e000      	b.n	800080a <lcd_set_cursor+0x1c>
 8000808:	22c0      	movs	r2, #192	@ 0xc0
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	4413      	add	r3, r2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff47 	bl	80006a4 <lcd_send_cmd>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000824:	f3bf 8f4f 	dsb	sy
}
 8000828:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <__NVIC_SystemReset+0x24>)
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000832:	4904      	ldr	r1, [pc, #16]	@ (8000844 <__NVIC_SystemReset+0x24>)
 8000834:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <__NVIC_SystemReset+0x28>)
 8000836:	4313      	orrs	r3, r2
 8000838:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800083a:	f3bf 8f4f 	dsb	sy
}
 800083e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <__NVIC_SystemReset+0x20>
 8000844:	e000ed00 	.word	0xe000ed00
 8000848:	05fa0004 	.word	0x05fa0004

0800084c <MQ2_ConvertPPM>:
#define MQ2_RL 5.0f
#define MQ2_R0 9.83f
#define VREF   3.3f
#define ADC_MAX 4095.0f

float MQ2_ConvertPPM(uint16_t adc_value) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
    float voltage = (adc_value * 3.3f) / 4095.0f;
 8000856:	88fb      	ldrh	r3, [r7, #6]
 8000858:	ee07 3a90 	vmov	s15, r3
 800085c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000860:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80008d4 <MQ2_ConvertPPM+0x88>
 8000864:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000868:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80008d8 <MQ2_ConvertPPM+0x8c>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	edc7 7a07 	vstr	s15, [r7, #28]
    float Rs = (3.3f - voltage) * 10.0f / voltage; // RL = 10k
 8000874:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80008d4 <MQ2_ConvertPPM+0x88>
 8000878:	edd7 7a07 	vldr	s15, [r7, #28]
 800087c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000880:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000884:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000888:	ed97 7a07 	vldr	s14, [r7, #28]
 800088c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000890:	edc7 7a06 	vstr	s15, [r7, #24]

    float R0 = 92.8f;  // Đặt theo giá trị đo thực tế
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MQ2_ConvertPPM+0x90>)
 8000896:	617b      	str	r3, [r7, #20]
    float ratio = Rs / R0;
 8000898:	edd7 6a06 	vldr	s13, [r7, #24]
 800089c:	ed97 7a05 	vldr	s14, [r7, #20]
 80008a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008a4:	edc7 7a04 	vstr	s15, [r7, #16]

    // Áp dụng công thức log-log từ MQ2 datasheet (LPG)
    float ppm = 400.0f * powf(ratio, -1.5f);  // Thử với -1.4f hoặc -1.3f nếu cần hạ nhạy
 80008a8:	eeff 0a08 	vmov.f32	s1, #248	@ 0xbfc00000 -1.5
 80008ac:	ed97 0a04 	vldr	s0, [r7, #16]
 80008b0:	f001 f9ac 	bl	8001c0c <powf>
 80008b4:	eef0 7a40 	vmov.f32	s15, s0
 80008b8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80008e0 <MQ2_ConvertPPM+0x94>
 80008bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008c0:	edc7 7a03 	vstr	s15, [r7, #12]
    return ppm;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	ee07 3a90 	vmov	s15, r3
}
 80008ca:	eeb0 0a67 	vmov.f32	s0, s15
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40533333 	.word	0x40533333
 80008d8:	457ff000 	.word	0x457ff000
 80008dc:	42b9999a 	.word	0x42b9999a
 80008e0:	43c80000 	.word	0x43c80000

080008e4 <detect_gas_level>:
    GAS_NONE = 0,        // 0 – Không có khí
    GAS_LOW = 1,             // 1 – Nồng độ thấp
    GAS_HIGH = 2,            // 2 – Nồng độ cao
    GAS_DANGEROUS = 3        // 3 – Nguy hiểm
} GasState;
GasState detect_gas_level(uint32_t adc) {
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	    if (adc < 400) return GAS_NONE;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80008f2:	d201      	bcs.n	80008f8 <detect_gas_level+0x14>
 80008f4:	2300      	movs	r3, #0
 80008f6:	e00d      	b.n	8000914 <detect_gas_level+0x30>
	    else if (adc < 550) return GAS_LOW;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f240 2225 	movw	r2, #549	@ 0x225
 80008fe:	4293      	cmp	r3, r2
 8000900:	d801      	bhi.n	8000906 <detect_gas_level+0x22>
 8000902:	2301      	movs	r3, #1
 8000904:	e006      	b.n	8000914 <detect_gas_level+0x30>
	    else if (adc < 700) return GAS_HIGH;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800090c:	d201      	bcs.n	8000912 <detect_gas_level+0x2e>
 800090e:	2302      	movs	r3, #2
 8000910:	e000      	b.n	8000914 <detect_gas_level+0x30>
	    else return GAS_DANGEROUS;
 8000912:	2303      	movs	r3, #3
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <handle_gas_state>:
static uint32_t last_toggle = 0;
static uint8_t toggle = 0;

void handle_gas_state(GasState state, SystemState sys,uint32_t x) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	603a      	str	r2, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	460b      	mov	r3, r1
 800092e:	71bb      	strb	r3, [r7, #6]
    static GasState prev_state = -1;
    static SystemState prev = -1;

    if ((state != prev_state) || (sys != prev)) {
 8000930:	4b78      	ldr	r3, [pc, #480]	@ (8000b14 <handle_gas_state+0x1f4>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	429a      	cmp	r2, r3
 8000938:	d105      	bne.n	8000946 <handle_gas_state+0x26>
 800093a:	4b77      	ldr	r3, [pc, #476]	@ (8000b18 <handle_gas_state+0x1f8>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	79ba      	ldrb	r2, [r7, #6]
 8000940:	429a      	cmp	r2, r3
 8000942:	f000 80a3 	beq.w	8000a8c <handle_gas_state+0x16c>
        lcd_set_cursor(1, 0);
 8000946:	2100      	movs	r1, #0
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff ff50 	bl	80007ee <lcd_set_cursor>

        if (sys == SYS_IDLE) {
 800094e:	79bb      	ldrb	r3, [r7, #6]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d114      	bne.n	800097e <handle_gas_state+0x5e>
            RGB_SetPWM(0, 255, 0);  // LED xanh lá
 8000954:	2200      	movs	r2, #0
 8000956:	21ff      	movs	r1, #255	@ 0xff
 8000958:	2000      	movs	r0, #0
 800095a:	f000 fa8b 	bl	8000e74 <RGB_SetPWM>
            lcd_send_string("Idle ");
 800095e:	486f      	ldr	r0, [pc, #444]	@ (8000b1c <handle_gas_state+0x1fc>)
 8000960:	f7ff ff30 	bl	80007c4 <lcd_send_string>
            // Tắt hết thiết bị: Quạt PB13, Van PA8, Còi PB10
            GPIOB->BSRR = (1 << 13);          // PB13 HIGH → Quạt TẮT
 8000964:	4b6e      	ldr	r3, [pc, #440]	@ (8000b20 <handle_gas_state+0x200>)
 8000966:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800096a:	619a      	str	r2, [r3, #24]
            GPIOA->BSRR = (1 << 8);           // PA8 HIGH  → Van TẮT
 800096c:	4b6d      	ldr	r3, [pc, #436]	@ (8000b24 <handle_gas_state+0x204>)
 800096e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000972:	619a      	str	r2, [r3, #24]
            GPIOB->BSRR = (1 << (10 + 16));   // PB10 LOW  → Còi TẮT
 8000974:	4b6a      	ldr	r3, [pc, #424]	@ (8000b20 <handle_gas_state+0x200>)
 8000976:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800097a:	619a      	str	r2, [r3, #24]
 800097c:	e080      	b.n	8000a80 <handle_gas_state+0x160>
        } else {
            switch (state) {
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b03      	cmp	r3, #3
 8000982:	d87d      	bhi.n	8000a80 <handle_gas_state+0x160>
 8000984:	a201      	add	r2, pc, #4	@ (adr r2, 800098c <handle_gas_state+0x6c>)
 8000986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098a:	bf00      	nop
 800098c:	0800099d 	.word	0x0800099d
 8000990:	080009c7 	.word	0x080009c7
 8000994:	080009f1 	.word	0x080009f1
 8000998:	08000a39 	.word	0x08000a39
                case GAS_NONE:
                    RGB_SetPWM(0, 0, 255);  // Xanh dương
 800099c:	22ff      	movs	r2, #255	@ 0xff
 800099e:	2100      	movs	r1, #0
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fa67 	bl	8000e74 <RGB_SetPWM>
                    lcd_send_string("0     ");
 80009a6:	4860      	ldr	r0, [pc, #384]	@ (8000b28 <handle_gas_state+0x208>)
 80009a8:	f7ff ff0c 	bl	80007c4 <lcd_send_string>
                    GPIOB->BSRR = (1 << 13);         // Quạt TẮT
 80009ac:	4b5c      	ldr	r3, [pc, #368]	@ (8000b20 <handle_gas_state+0x200>)
 80009ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009b2:	619a      	str	r2, [r3, #24]
                    GPIOA->BSRR = (1 << 8 );   // Van BẬT
 80009b4:	4b5b      	ldr	r3, [pc, #364]	@ (8000b24 <handle_gas_state+0x204>)
 80009b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ba:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = (1 << (10 + 16));  // Còi TẮT
 80009bc:	4b58      	ldr	r3, [pc, #352]	@ (8000b20 <handle_gas_state+0x200>)
 80009be:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009c2:	619a      	str	r2, [r3, #24]
                    break;
 80009c4:	e05c      	b.n	8000a80 <handle_gas_state+0x160>

                case GAS_LOW:
                    RGB_SetPWM(255, 255, 0); // Vàng
 80009c6:	2200      	movs	r2, #0
 80009c8:	21ff      	movs	r1, #255	@ 0xff
 80009ca:	20ff      	movs	r0, #255	@ 0xff
 80009cc:	f000 fa52 	bl	8000e74 <RGB_SetPWM>
                    lcd_send_string("1     ");
 80009d0:	4856      	ldr	r0, [pc, #344]	@ (8000b2c <handle_gas_state+0x20c>)
 80009d2:	f7ff fef7 	bl	80007c4 <lcd_send_string>
                    GPIOB->BSRR = (1 << (13 + 16));  // Quạt BẬT
 80009d6:	4b52      	ldr	r3, [pc, #328]	@ (8000b20 <handle_gas_state+0x200>)
 80009d8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80009dc:	619a      	str	r2, [r3, #24]
                    GPIOA->BSRR = (1 << 8);          // Van TẮT
 80009de:	4b51      	ldr	r3, [pc, #324]	@ (8000b24 <handle_gas_state+0x204>)
 80009e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009e4:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = (1 << (10 + 16));  // Còi TẮT
 80009e6:	4b4e      	ldr	r3, [pc, #312]	@ (8000b20 <handle_gas_state+0x200>)
 80009e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009ec:	619a      	str	r2, [r3, #24]
                    break;
 80009ee:	e047      	b.n	8000a80 <handle_gas_state+0x160>

                case GAS_HIGH:
            	    sprintf(msg, "%lu\r\n", x);
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	494f      	ldr	r1, [pc, #316]	@ (8000b30 <handle_gas_state+0x210>)
 80009f4:	484f      	ldr	r0, [pc, #316]	@ (8000b34 <handle_gas_state+0x214>)
 80009f6:	f000 fc71 	bl	80012dc <siprintf>
            	    USART1_SendString(msg);
 80009fa:	484e      	ldr	r0, [pc, #312]	@ (8000b34 <handle_gas_state+0x214>)
 80009fc:	f000 fbac 	bl	8001158 <USART1_SendString>
                    last_toggle = millis;
 8000a00:	4b4d      	ldr	r3, [pc, #308]	@ (8000b38 <handle_gas_state+0x218>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a4d      	ldr	r2, [pc, #308]	@ (8000b3c <handle_gas_state+0x21c>)
 8000a06:	6013      	str	r3, [r2, #0]
                    toggle = 1;
 8000a08:	4b4d      	ldr	r3, [pc, #308]	@ (8000b40 <handle_gas_state+0x220>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
                    RGB_SetPWM(255, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	20ff      	movs	r0, #255	@ 0xff
 8000a14:	f000 fa2e 	bl	8000e74 <RGB_SetPWM>
                    lcd_send_string("2     ");
 8000a18:	484a      	ldr	r0, [pc, #296]	@ (8000b44 <handle_gas_state+0x224>)
 8000a1a:	f7ff fed3 	bl	80007c4 <lcd_send_string>
                    GPIOB->BSRR = (1 << (13 + 16));  // Quạt BẬT
 8000a1e:	4b40      	ldr	r3, [pc, #256]	@ (8000b20 <handle_gas_state+0x200>)
 8000a20:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000a24:	619a      	str	r2, [r3, #24]
                    GPIOA->BSRR = (1 << (8 + 16));   // Van BẬT
 8000a26:	4b3f      	ldr	r3, [pc, #252]	@ (8000b24 <handle_gas_state+0x204>)
 8000a28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a2c:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = (1 << 10);         // Còi BẬT
 8000a2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b20 <handle_gas_state+0x200>)
 8000a30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a34:	619a      	str	r2, [r3, #24]
                    break;
 8000a36:	e023      	b.n	8000a80 <handle_gas_state+0x160>

                case GAS_DANGEROUS:
            	    sprintf(msg, "%lu\r\n", x);
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	493d      	ldr	r1, [pc, #244]	@ (8000b30 <handle_gas_state+0x210>)
 8000a3c:	483d      	ldr	r0, [pc, #244]	@ (8000b34 <handle_gas_state+0x214>)
 8000a3e:	f000 fc4d 	bl	80012dc <siprintf>
            	    USART1_SendString(msg);
 8000a42:	483c      	ldr	r0, [pc, #240]	@ (8000b34 <handle_gas_state+0x214>)
 8000a44:	f000 fb88 	bl	8001158 <USART1_SendString>
                    last_toggle = millis;
 8000a48:	4b3b      	ldr	r3, [pc, #236]	@ (8000b38 <handle_gas_state+0x218>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a3b      	ldr	r2, [pc, #236]	@ (8000b3c <handle_gas_state+0x21c>)
 8000a4e:	6013      	str	r3, [r2, #0]
                    toggle = 1;
 8000a50:	4b3b      	ldr	r3, [pc, #236]	@ (8000b40 <handle_gas_state+0x220>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
                    RGB_SetPWM(255, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	20ff      	movs	r0, #255	@ 0xff
 8000a5c:	f000 fa0a 	bl	8000e74 <RGB_SetPWM>
                    lcd_send_string("3     ");
 8000a60:	4839      	ldr	r0, [pc, #228]	@ (8000b48 <handle_gas_state+0x228>)
 8000a62:	f7ff feaf 	bl	80007c4 <lcd_send_string>
                    GPIOB->BSRR = (1 << (13 + 16));  // Quạt BẬT
 8000a66:	4b2e      	ldr	r3, [pc, #184]	@ (8000b20 <handle_gas_state+0x200>)
 8000a68:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000a6c:	619a      	str	r2, [r3, #24]
                    GPIOA->BSRR = (1 << (8 + 16));   // Van BẬT
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b24 <handle_gas_state+0x204>)
 8000a70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a74:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = (1 << 10);         // Còi BẬT
 8000a76:	4b2a      	ldr	r3, [pc, #168]	@ (8000b20 <handle_gas_state+0x200>)
 8000a78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a7c:	619a      	str	r2, [r3, #24]
                    break;
 8000a7e:	bf00      	nop
            }
        }

        prev_state = state;
 8000a80:	4a24      	ldr	r2, [pc, #144]	@ (8000b14 <handle_gas_state+0x1f4>)
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	7013      	strb	r3, [r2, #0]
        prev = sys;
 8000a86:	4a24      	ldr	r2, [pc, #144]	@ (8000b18 <handle_gas_state+0x1f8>)
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	7013      	strb	r3, [r2, #0]
    }

    // Nháy LED đỏ nếu cần
    if (sys == SYS_ACTIVE) {
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d13c      	bne.n	8000b0c <handle_gas_state+0x1ec>
        if (state == GAS_HIGH && millis - last_toggle >= 500) {
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d11b      	bne.n	8000ad0 <handle_gas_state+0x1b0>
 8000a98:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <handle_gas_state+0x218>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b27      	ldr	r3, [pc, #156]	@ (8000b3c <handle_gas_state+0x21c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000aa6:	d313      	bcc.n	8000ad0 <handle_gas_state+0x1b0>
            toggle ^= 1;
 8000aa8:	4b25      	ldr	r3, [pc, #148]	@ (8000b40 <handle_gas_state+0x220>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	f083 0301 	eor.w	r3, r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b23      	ldr	r3, [pc, #140]	@ (8000b40 <handle_gas_state+0x220>)
 8000ab4:	701a      	strb	r2, [r3, #0]
            RGB_SetPWM(toggle * 255, 0, 0);
 8000ab6:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <handle_gas_state+0x220>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	425b      	negs	r3, r3
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f9d6 	bl	8000e74 <RGB_SetPWM>
            last_toggle = millis;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b38 <handle_gas_state+0x218>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b3c <handle_gas_state+0x21c>)
 8000ace:	6013      	str	r3, [r2, #0]
        }

        if (state == GAS_DANGEROUS && millis - last_toggle >= 125) {
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d11a      	bne.n	8000b0c <handle_gas_state+0x1ec>
 8000ad6:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <handle_gas_state+0x218>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <handle_gas_state+0x21c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	2b7c      	cmp	r3, #124	@ 0x7c
 8000ae2:	d913      	bls.n	8000b0c <handle_gas_state+0x1ec>
            toggle ^= 1;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <handle_gas_state+0x220>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	f083 0301 	eor.w	r3, r3, #1
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <handle_gas_state+0x220>)
 8000af0:	701a      	strb	r2, [r3, #0]
            RGB_SetPWM(toggle * 255, 0, 0);
 8000af2:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <handle_gas_state+0x220>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	425b      	negs	r3, r3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f9b8 	bl	8000e74 <RGB_SetPWM>
            last_toggle = millis;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <handle_gas_state+0x218>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <handle_gas_state+0x21c>)
 8000b0a:	6013      	str	r3, [r2, #0]
        }
    }
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000005 	.word	0x20000005
 8000b18:	20000006 	.word	0x20000006
 8000b1c:	08002404 	.word	0x08002404
 8000b20:	40020400 	.word	0x40020400
 8000b24:	40020000 	.word	0x40020000
 8000b28:	0800240c 	.word	0x0800240c
 8000b2c:	08002414 	.word	0x08002414
 8000b30:	0800241c 	.word	0x0800241c
 8000b34:	20000080 	.word	0x20000080
 8000b38:	2000007c 	.word	0x2000007c
 8000b3c:	200000a8 	.word	0x200000a8
 8000b40:	200000ac 	.word	0x200000ac
 8000b44:	08002424 	.word	0x08002424
 8000b48:	0800242c 	.word	0x0800242c

08000b4c <main>:



// ===== MAIN =====
int main(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
    SystemCoreClockUpdate();
 8000b52:	f000 fa29 	bl	8000fa8 <SystemCoreClockUpdate>
    USART1_Init();
 8000b56:	f000 fa9d 	bl	8001094 <USART1_Init>
    USART2_Init();
 8000b5a:	f000 fb13 	bl	8001184 <USART2_Init>
    GPIO_Init();         // PC1 - ADC
 8000b5e:	f7ff fc0d 	bl	800037c <GPIO_Init>
    Buttons_Init();      // SW1, SW2
 8000b62:	f7ff fbcf 	bl	8000304 <Buttons_Init>
    ADC_Init();
 8000b66:	f7ff fc67 	bl	8000438 <ADC_Init>
    I2C1_Init();
 8000b6a:	f7ff fc8f 	bl	800048c <I2C1_Init>
    TIM4_Init();
 8000b6e:	f7ff fba5 	bl	80002bc <TIM4_Init>
    RGB_PWM_Init();      // PA5, PA6, PA7 dùng PWM cho LED RGB
 8000b72:	f000 f90d 	bl	8000d90 <RGB_PWM_Init>
//  TIM3_Init();         // Nếu dùng millis để nhấp nháy, bật lại
    USART1_SendString("Hello STM32 + I2C Scan\r\n");
 8000b76:	4844      	ldr	r0, [pc, #272]	@ (8000c88 <main+0x13c>)
 8000b78:	f000 faee 	bl	8001158 <USART1_SendString>
    I2C_Scan();
 8000b7c:	f7ff fcde 	bl	800053c <I2C_Scan>
    lcd_init();
 8000b80:	f7ff fe04 	bl	800078c <lcd_init>


    uint32_t adc_value;

    while (1) {
    	if (sys_state == SYS_ACTIVE) {
 8000b84:	4b41      	ldr	r3, [pc, #260]	@ (8000c8c <main+0x140>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d169      	bne.n	8000c60 <main+0x114>
    	    if ((millis - last_adc_time) >=10) {
 8000b8c:	4b40      	ldr	r3, [pc, #256]	@ (8000c90 <main+0x144>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b40      	ldr	r3, [pc, #256]	@ (8000c94 <main+0x148>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b09      	cmp	r3, #9
 8000b98:	d955      	bls.n	8000c46 <main+0xfa>
    	        last_adc_time = millis;
 8000b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c90 <main+0x144>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c94 <main+0x148>)
 8000ba0:	6013      	str	r3, [r2, #0]
        		lcd_set_cursor(0,0);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff fe22 	bl	80007ee <lcd_set_cursor>
        		lcd_send_string("Gas:");
 8000baa:	483b      	ldr	r0, [pc, #236]	@ (8000c98 <main+0x14c>)
 8000bac:	f7ff fe0a 	bl	80007c4 <lcd_send_string>
            	lcd_set_cursor(0, 15);
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f7ff fe1b 	bl	80007ee <lcd_set_cursor>
            	lcd_send_string("1");
 8000bb8:	4838      	ldr	r0, [pc, #224]	@ (8000c9c <main+0x150>)
 8000bba:	f7ff fe03 	bl	80007c4 <lcd_send_string>
        	    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000bbe:	4b38      	ldr	r3, [pc, #224]	@ (8000ca0 <main+0x154>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	4a37      	ldr	r2, [pc, #220]	@ (8000ca0 <main+0x154>)
 8000bc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000bc8:	6093      	str	r3, [r2, #8]
        	    while (!(ADC1->SR & ADC_SR_EOC));
 8000bca:	bf00      	nop
 8000bcc:	4b34      	ldr	r3, [pc, #208]	@ (8000ca0 <main+0x154>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0f9      	beq.n	8000bcc <main+0x80>
        	    adc_value = ADC1->DR;
 8000bd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ca0 <main+0x154>)
 8000bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bdc:	60fb      	str	r3, [r7, #12]
        	    float gas_ppm_f = MQ2_ConvertPPM(adc_value);         // Giá trị thực dạng float
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fe32 	bl	800084c <MQ2_ConvertPPM>
 8000be8:	ed87 0a02 	vstr	s0, [r7, #8]
        	    adc_value = (int)(gas_ppm_f + 0.5f);               // Làm tròn về int
 8000bec:	edd7 7a02 	vldr	s15, [r7, #8]
 8000bf0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000bf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bfc:	ee17 3a90 	vmov	r3, s15
 8000c00:	60fb      	str	r3, [r7, #12]

        	    sprintf(msg, "%lu\r\n", adc_value);                     // In ra UART
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	4927      	ldr	r1, [pc, #156]	@ (8000ca4 <main+0x158>)
 8000c06:	4828      	ldr	r0, [pc, #160]	@ (8000ca8 <main+0x15c>)
 8000c08:	f000 fb68 	bl	80012dc <siprintf>
        	    USART2_SendString(msg);
 8000c0c:	4826      	ldr	r0, [pc, #152]	@ (8000ca8 <main+0x15c>)
 8000c0e:	f000 fb11 	bl	8001234 <USART2_SendString>

        	    // Gửi UART + LCD

        	    sprintf(msg, "%lu", adc_value);
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4925      	ldr	r1, [pc, #148]	@ (8000cac <main+0x160>)
 8000c16:	4824      	ldr	r0, [pc, #144]	@ (8000ca8 <main+0x15c>)
 8000c18:	f000 fb60 	bl	80012dc <siprintf>
        	    lcd_set_cursor(0, 5);
 8000c1c:	2105      	movs	r1, #5
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff fde5 	bl	80007ee <lcd_set_cursor>
        	    lcd_send_string("    ");
 8000c24:	4822      	ldr	r0, [pc, #136]	@ (8000cb0 <main+0x164>)
 8000c26:	f7ff fdcd 	bl	80007c4 <lcd_send_string>
        	    lcd_set_cursor(0, 5);
 8000c2a:	2105      	movs	r1, #5
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fdde 	bl	80007ee <lcd_set_cursor>
        	    lcd_send_string(msg);
 8000c32:	481d      	ldr	r0, [pc, #116]	@ (8000ca8 <main+0x15c>)
 8000c34:	f7ff fdc6 	bl	80007c4 <lcd_send_string>
        	    lcd_set_cursor(0, 10);
 8000c38:	210a      	movs	r1, #10
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f7ff fdd7 	bl	80007ee <lcd_set_cursor>
        	    lcd_send_string("ppm");
 8000c40:	481c      	ldr	r0, [pc, #112]	@ (8000cb4 <main+0x168>)
 8000c42:	f7ff fdbf 	bl	80007c4 <lcd_send_string>
    	    }
    	    // Máy trạng thái
    	    GasState current = detect_gas_level(adc_value);
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f7ff fe4c 	bl	80008e4 <detect_gas_level>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	71fb      	strb	r3, [r7, #7]
    	    handle_gas_state(current,sys_state,adc_value);
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <main+0x140>)
 8000c52:	7819      	ldrb	r1, [r3, #0]
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fe61 	bl	8000920 <handle_gas_state>
 8000c5e:	e791      	b.n	8000b84 <main+0x38>
    	} else {
    	    RGB_SetPWM(0, 255, 0); // Xanh lá
 8000c60:	2200      	movs	r2, #0
 8000c62:	21ff      	movs	r1, #255	@ 0xff
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 f905 	bl	8000e74 <RGB_SetPWM>
    		lcd_set_cursor(0,0);
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fdbe 	bl	80007ee <lcd_set_cursor>
    		lcd_send_string("Gas:");
 8000c72:	4809      	ldr	r0, [pc, #36]	@ (8000c98 <main+0x14c>)
 8000c74:	f7ff fda6 	bl	80007c4 <lcd_send_string>
    		lcd_set_cursor(0,15);
 8000c78:	210f      	movs	r1, #15
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff fdb7 	bl	80007ee <lcd_set_cursor>
    		lcd_send_string("0");
 8000c80:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <main+0x16c>)
 8000c82:	f7ff fd9f 	bl	80007c4 <lcd_send_string>
    	if (sys_state == SYS_ACTIVE) {
 8000c86:	e77d      	b.n	8000b84 <main+0x38>
 8000c88:	08002434 	.word	0x08002434
 8000c8c:	20000004 	.word	0x20000004
 8000c90:	2000007c 	.word	0x2000007c
 8000c94:	20000000 	.word	0x20000000
 8000c98:	08002450 	.word	0x08002450
 8000c9c:	08002458 	.word	0x08002458
 8000ca0:	40012000 	.word	0x40012000
 8000ca4:	0800241c 	.word	0x0800241c
 8000ca8:	20000080 	.word	0x20000080
 8000cac:	0800245c 	.word	0x0800245c
 8000cb0:	08002460 	.word	0x08002460
 8000cb4:	08002468 	.word	0x08002468
 8000cb8:	0800246c 	.word	0x0800246c

08000cbc <delay>:
    while (1);
}



void delay(uint32_t ms) {
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
    uint32_t start = millis;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <delay+0x2c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
    while ((millis - start) < ms);
 8000cca:	bf00      	nop
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <delay+0x2c>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d8f8      	bhi.n	8000ccc <delay+0x10>
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	2000007c 	.word	0x2000007c

08000cec <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 0)) {
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <EXTI0_IRQHandler+0x3c>)
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d010      	beq.n	8000d1e <EXTI0_IRQHandler+0x32>
        EXTI->PR |= (1 << 0);
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <EXTI0_IRQHandler+0x3c>)
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	4a09      	ldr	r2, [pc, #36]	@ (8000d28 <EXTI0_IRQHandler+0x3c>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6153      	str	r3, [r2, #20]
        if (sys_state){
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <EXTI0_IRQHandler+0x40>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <EXTI0_IRQHandler+0x2c>
        	sys_state = SYS_IDLE;
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <EXTI0_IRQHandler+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
        }else{
        	sys_state = SYS_ACTIVE;
        }
    }
}
 8000d16:	e002      	b.n	8000d1e <EXTI0_IRQHandler+0x32>
        	sys_state = SYS_ACTIVE;
 8000d18:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <EXTI0_IRQHandler+0x40>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	40013c00 	.word	0x40013c00
 8000d2c:	20000004 	.word	0x20000004

08000d30 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 1)) {
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <EXTI1_IRQHandler+0x24>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d007      	beq.n	8000d50 <EXTI1_IRQHandler+0x20>
        EXTI->PR |= (1 << 1); // Clear pending bit
 8000d40:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <EXTI1_IRQHandler+0x24>)
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	4a03      	ldr	r2, [pc, #12]	@ (8000d54 <EXTI1_IRQHandler+0x24>)
 8000d46:	f043 0302 	orr.w	r3, r3, #2
 8000d4a:	6153      	str	r3, [r2, #20]
        NVIC_SystemReset();
 8000d4c:	f7ff fd68 	bl	8000820 <__NVIC_SystemReset>
    }
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40013c00 	.word	0x40013c00

08000d58 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) {
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <TIM4_IRQHandler+0x30>)
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d00a      	beq.n	8000d7e <TIM4_IRQHandler+0x26>
        TIM4->SR &= ~TIM_SR_UIF;
 8000d68:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <TIM4_IRQHandler+0x30>)
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	4a06      	ldr	r2, [pc, #24]	@ (8000d88 <TIM4_IRQHandler+0x30>)
 8000d6e:	f023 0301 	bic.w	r3, r3, #1
 8000d72:	6113      	str	r3, [r2, #16]
        millis++;
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <TIM4_IRQHandler+0x34>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <TIM4_IRQHandler+0x34>)
 8000d7c:	6013      	str	r3, [r2, #0]
    }
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	40000800 	.word	0x40000800
 8000d8c:	2000007c 	.word	0x2000007c

08000d90 <RGB_PWM_Init>:

#include "stm32f4xx.h"
#include <stdint.h>
#include <stdio.h>
#include "rgb.h"
void RGB_PWM_Init(void) {
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000d94:	4b34      	ldr	r3, [pc, #208]	@ (8000e68 <RGB_PWM_Init+0xd8>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d98:	4a33      	ldr	r2, [pc, #204]	@ (8000e68 <RGB_PWM_Init+0xd8>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM3EN;
 8000da0:	4b31      	ldr	r3, [pc, #196]	@ (8000e68 <RGB_PWM_Init+0xd8>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	4a30      	ldr	r2, [pc, #192]	@ (8000e68 <RGB_PWM_Init+0xd8>)
 8000da6:	f043 0303 	orr.w	r3, r3, #3
 8000daa:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOA->MODER &= ~((3 << (5*2)) | (3 << (6*2)) | (3 << (7*2)));
 8000dac:	4b2f      	ldr	r3, [pc, #188]	@ (8000e6c <RGB_PWM_Init+0xdc>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a2e      	ldr	r2, [pc, #184]	@ (8000e6c <RGB_PWM_Init+0xdc>)
 8000db2:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000db6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2 << (5*2)) | (2 << (6*2)) | (2 << (7*2))); // AF mode
 8000db8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e6c <RGB_PWM_Init+0xdc>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8000e6c <RGB_PWM_Init+0xdc>)
 8000dbe:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000dc2:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[0] &= ~((0xF << (5*4)) | (0xF << (6*4)) | (0xF << (7*4)));
 8000dc4:	4b29      	ldr	r3, [pc, #164]	@ (8000e6c <RGB_PWM_Init+0xdc>)
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	4a28      	ldr	r2, [pc, #160]	@ (8000e6c <RGB_PWM_Init+0xdc>)
 8000dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000dce:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  ((1 << (5*4)) | (2 << (6*4)) | (2 << (7*4))); // AF1, AF2, AF2
 8000dd0:	4b26      	ldr	r3, [pc, #152]	@ (8000e6c <RGB_PWM_Init+0xdc>)
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	4a25      	ldr	r2, [pc, #148]	@ (8000e6c <RGB_PWM_Init+0xdc>)
 8000dd6:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 8000dda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000dde:	6213      	str	r3, [r2, #32]

    // TIM2 - Red
    TIM2->PSC = 84 - 1;
 8000de0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000de4:	2253      	movs	r2, #83	@ 0x53
 8000de6:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 255;
 8000de8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dec:	22ff      	movs	r2, #255	@ 0xff
 8000dee:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;
 8000df0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dfa:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000dfe:	6193      	str	r3, [r2, #24]
    TIM2->CCER |= TIM_CCER_CC1E;
 8000e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6213      	str	r3, [r2, #32]
    TIM2->CR1 |= TIM_CR1_ARPE | TIM_CR1_CEN;
 8000e10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e1a:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
 8000e1e:	6013      	str	r3, [r2, #0]

    // TIM3 - Green & Blue
    TIM3->PSC = 84 - 1;
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <RGB_PWM_Init+0xe0>)
 8000e22:	2253      	movs	r2, #83	@ 0x53
 8000e24:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 255;
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <RGB_PWM_Init+0xe0>)
 8000e28:	22ff      	movs	r2, #255	@ 0xff
 8000e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;       // CH1
 8000e2c:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <RGB_PWM_Init+0xe0>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a0f      	ldr	r2, [pc, #60]	@ (8000e70 <RGB_PWM_Init+0xe0>)
 8000e32:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000e36:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE;      // CH2
 8000e38:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <RGB_PWM_Init+0xe0>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e70 <RGB_PWM_Init+0xe0>)
 8000e3e:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8000e42:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <RGB_PWM_Init+0xe0>)
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	4a09      	ldr	r2, [pc, #36]	@ (8000e70 <RGB_PWM_Init+0xe0>)
 8000e4a:	f043 0311 	orr.w	r3, r3, #17
 8000e4e:	6213      	str	r3, [r2, #32]
    TIM3->CR1 |= TIM_CR1_ARPE | TIM_CR1_CEN;
 8000e50:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <RGB_PWM_Init+0xe0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a06      	ldr	r2, [pc, #24]	@ (8000e70 <RGB_PWM_Init+0xe0>)
 8000e56:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000
 8000e70:	40000400 	.word	0x40000400

08000e74 <RGB_SetPWM>:

void RGB_SetPWM(uint8_t r, uint8_t g, uint8_t b) {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	71bb      	strb	r3, [r7, #6]
 8000e82:	4613      	mov	r3, r2
 8000e84:	717b      	strb	r3, [r7, #5]
    // LED anode chung nên phải đảo
    TIM2->CCR1 = 255 - r;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8000e8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e90:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR1 = 255 - g;
 8000e92:	79bb      	ldrb	r3, [r7, #6]
 8000e94:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <RGB_SetPWM+0x40>)
 8000e9a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = 255 - b;
 8000e9c:	797b      	ldrb	r3, [r7, #5]
 8000e9e:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8000ea2:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <RGB_SetPWM+0x40>)
 8000ea4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40000400 	.word	0x40000400

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <NMI_Handler+0x4>

08000ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <MemManage_Handler+0x4>

08000ed0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <UsageFault_Handler+0x4>

08000ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0e:	f000 f9d1 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f000 f9e8 	bl	800131c <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20020000 	.word	0x20020000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	200000b0 	.word	0x200000b0
 8000f80:	20000200 	.word	0x20000200

08000f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
  uint32_t tmp, pllvco, pllp, pllsource, pllm;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000fae:	4b34      	ldr	r3, [pc, #208]	@ (8001080 <SystemCoreClockUpdate+0xd8>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d011      	beq.n	8000fe2 <SystemCoreClockUpdate+0x3a>
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d844      	bhi.n	800104e <SystemCoreClockUpdate+0xa6>
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <SystemCoreClockUpdate+0x2a>
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d004      	beq.n	8000fda <SystemCoreClockUpdate+0x32>
 8000fd0:	e03d      	b.n	800104e <SystemCoreClockUpdate+0xa6>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001084 <SystemCoreClockUpdate+0xdc>)
 8000fd4:	4a2c      	ldr	r2, [pc, #176]	@ (8001088 <SystemCoreClockUpdate+0xe0>)
 8000fd6:	601a      	str	r2, [r3, #0]
      break;
 8000fd8:	e03d      	b.n	8001056 <SystemCoreClockUpdate+0xae>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000fda:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <SystemCoreClockUpdate+0xdc>)
 8000fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800108c <SystemCoreClockUpdate+0xe4>)
 8000fde:	601a      	str	r2, [r3, #0]
      break;
 8000fe0:	e039      	b.n	8001056 <SystemCoreClockUpdate+0xae>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000fe2:	4b27      	ldr	r3, [pc, #156]	@ (8001080 <SystemCoreClockUpdate+0xd8>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	0d9b      	lsrs	r3, r3, #22
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fee:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <SystemCoreClockUpdate+0xd8>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ff6:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00c      	beq.n	8001018 <SystemCoreClockUpdate+0x70>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000ffe:	4a23      	ldr	r2, [pc, #140]	@ (800108c <SystemCoreClockUpdate+0xe4>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4a1e      	ldr	r2, [pc, #120]	@ (8001080 <SystemCoreClockUpdate+0xd8>)
 8001008:	6852      	ldr	r2, [r2, #4]
 800100a:	0992      	lsrs	r2, r2, #6
 800100c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001010:	fb02 f303 	mul.w	r3, r2, r3
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e00b      	b.n	8001030 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001018:	4a1b      	ldr	r2, [pc, #108]	@ (8001088 <SystemCoreClockUpdate+0xe0>)
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001020:	4a17      	ldr	r2, [pc, #92]	@ (8001080 <SystemCoreClockUpdate+0xd8>)
 8001022:	6852      	ldr	r2, [r2, #4]
 8001024:	0992      	lsrs	r2, r2, #6
 8001026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <SystemCoreClockUpdate+0xd8>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	0c1b      	lsrs	r3, r3, #16
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	3301      	adds	r3, #1
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllp;
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	fbb2 f3f3 	udiv	r3, r2, r3
 8001048:	4a0e      	ldr	r2, [pc, #56]	@ (8001084 <SystemCoreClockUpdate+0xdc>)
 800104a:	6013      	str	r3, [r2, #0]
      break;
 800104c:	e003      	b.n	8001056 <SystemCoreClockUpdate+0xae>
    default:
      SystemCoreClock = HSI_VALUE;
 800104e:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <SystemCoreClockUpdate+0xdc>)
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <SystemCoreClockUpdate+0xe0>)
 8001052:	601a      	str	r2, [r3, #0]
      break;
 8001054:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <SystemCoreClockUpdate+0xd8>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	f003 030f 	and.w	r3, r3, #15
 8001060:	4a0b      	ldr	r2, [pc, #44]	@ (8001090 <SystemCoreClockUpdate+0xe8>)
 8001062:	5cd3      	ldrb	r3, [r2, r3]
 8001064:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001066:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <SystemCoreClockUpdate+0xdc>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <SystemCoreClockUpdate+0xdc>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40023800 	.word	0x40023800
 8001084:	20000008 	.word	0x20000008
 8001088:	00f42400 	.word	0x00f42400
 800108c:	007a1200 	.word	0x007a1200
 8001090:	08002470 	.word	0x08002470

08001094 <USART1_Init>:
#include "stm32f4xx.h"
#include <stdint.h>
#include <stdio.h>
#include "uart.h"

void USART1_Init(void) {
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001098:	4b1e      	ldr	r3, [pc, #120]	@ (8001114 <USART1_Init+0x80>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109c:	4a1d      	ldr	r2, [pc, #116]	@ (8001114 <USART1_Init+0x80>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <USART1_Init+0x80>)
 80010a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001114 <USART1_Init+0x80>)
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	6453      	str	r3, [r2, #68]	@ 0x44

    // PA9 = TX, PA10 = RX (AF7)
    GPIOA->MODER &= ~((3 << 18) | (3 << 20));     // Clear MODER9,10
 80010b0:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <USART1_Init+0x84>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a18      	ldr	r2, [pc, #96]	@ (8001118 <USART1_Init+0x84>)
 80010b6:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80010ba:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2 << 18) | (2 << 20));     // Alternate Function
 80010bc:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <USART1_Init+0x84>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a15      	ldr	r2, [pc, #84]	@ (8001118 <USART1_Init+0x84>)
 80010c2:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80010c6:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[1] &= ~((0xF << 4) | (0xF << 8));  // Clear AFR for PA9, PA10
 80010c8:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <USART1_Init+0x84>)
 80010ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010cc:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <USART1_Init+0x84>)
 80010ce:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80010d2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |=  ((7 << 4) | (7 << 8));      // AF7 = USART1
 80010d4:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <USART1_Init+0x84>)
 80010d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001118 <USART1_Init+0x84>)
 80010da:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 80010de:	6253      	str	r3, [r2, #36]	@ 0x24

    USART1->BRR = SystemCoreClock / 9600;         // Baudrate = 9600 (với HSI 16 MHz → BRR ≈ 1667)
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <USART1_Init+0x88>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <USART1_Init+0x8c>)
 80010e6:	490f      	ldr	r1, [pc, #60]	@ (8001124 <USART1_Init+0x90>)
 80010e8:	fba1 1303 	umull	r1, r3, r1, r3
 80010ec:	0a9b      	lsrs	r3, r3, #10
 80010ee:	6093      	str	r3, [r2, #8]

    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;   // Bật cả gửi và nhận
 80010f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <USART1_Init+0x8c>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <USART1_Init+0x8c>)
 80010f6:	f043 030c 	orr.w	r3, r3, #12
 80010fa:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;                  // Bật USART
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <USART1_Init+0x8c>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4a07      	ldr	r2, [pc, #28]	@ (8001120 <USART1_Init+0x8c>)
 8001102:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000
 800111c:	20000008 	.word	0x20000008
 8001120:	40011000 	.word	0x40011000
 8001124:	1b4e81b5 	.word	0x1b4e81b5

08001128 <USART1_SendChar>:
        buffer[i++] = c;
    }
    buffer[i] = '\0';
}

void USART1_SendChar(char c) {
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE));
 8001132:	bf00      	nop
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <USART1_SendChar+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f9      	beq.n	8001134 <USART1_SendChar+0xc>
    USART1->DR = c;
 8001140:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <USART1_SendChar+0x2c>)
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	6053      	str	r3, [r2, #4]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40011000 	.word	0x40011000

08001158 <USART1_SendString>:

void USART1_SendString(const char *str) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001160:	e006      	b.n	8001170 <USART1_SendString+0x18>
        USART1_SendChar(*str++);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffdc 	bl	8001128 <USART1_SendChar>
    while (*str) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f4      	bne.n	8001162 <USART1_SendString+0xa>
    }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <USART2_Init>:
void USART2_Init(void) {
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <USART2_Init+0x6c>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118c:	4a18      	ldr	r2, [pc, #96]	@ (80011f0 <USART2_Init+0x6c>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <USART2_Init+0x6c>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	4a15      	ldr	r2, [pc, #84]	@ (80011f0 <USART2_Init+0x6c>)
 800119a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119e:	6413      	str	r3, [r2, #64]	@ 0x40

    // PA2 = TX (debug), PA3 = RX (nếu cần)
    GPIOA->MODER &= ~((3 << 4) | (3 << 6));
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <USART2_Init+0x70>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a13      	ldr	r2, [pc, #76]	@ (80011f4 <USART2_Init+0x70>)
 80011a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80011aa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2 << 4));       // PA2: Alternate Function
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <USART2_Init+0x70>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a10      	ldr	r2, [pc, #64]	@ (80011f4 <USART2_Init+0x70>)
 80011b2:	f043 0320 	orr.w	r3, r3, #32
 80011b6:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << 8);         // AF7: USART2
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <USART2_Init+0x70>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <USART2_Init+0x70>)
 80011be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011c2:	6213      	str	r3, [r2, #32]

    USART2->BRR = SystemCoreClock / 9600;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <USART2_Init+0x74>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0c      	ldr	r2, [pc, #48]	@ (80011fc <USART2_Init+0x78>)
 80011ca:	490d      	ldr	r1, [pc, #52]	@ (8001200 <USART2_Init+0x7c>)
 80011cc:	fba1 1303 	umull	r1, r3, r1, r3
 80011d0:	0a9b      	lsrs	r3, r3, #10
 80011d2:	6093      	str	r3, [r2, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_UE;
 80011d4:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <USART2_Init+0x78>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <USART2_Init+0x78>)
 80011da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	20000008 	.word	0x20000008
 80011fc:	40004400 	.word	0x40004400
 8001200:	1b4e81b5 	.word	0x1b4e81b5

08001204 <USART2_SendChar>:

void USART2_SendChar(char c) {
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE));
 800120e:	bf00      	nop
 8001210:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <USART2_SendChar+0x2c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f9      	beq.n	8001210 <USART2_SendChar+0xc>
    USART2->DR = c;
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <USART2_SendChar+0x2c>)
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	6053      	str	r3, [r2, #4]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40004400 	.word	0x40004400

08001234 <USART2_SendString>:

void USART2_SendString(const char *str) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    while (*str) USART2_SendChar(*str++);
 800123c:	e006      	b.n	800124c <USART2_SendString+0x18>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ffdc 	bl	8001204 <USART2_SendChar>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f4      	bne.n	800123e <USART2_SendString+0xa>
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001298 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001264:	f7ff fe8e 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800126a:	490d      	ldr	r1, [pc, #52]	@ (80012a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800126c:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001280:	4c0a      	ldr	r4, [pc, #40]	@ (80012ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128e:	f000 f84b 	bl	8001328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001292:	f7ff fc5b 	bl	8000b4c <main>
  bx  lr    
 8001296:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001298:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012a4:	080024dc 	.word	0x080024dc
  ldr r2, =_sbss
 80012a8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012ac:	20000200 	.word	0x20000200

080012b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC_IRQHandler>
	...

080012b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_IncTick+0x20>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_IncTick+0x24>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <HAL_IncTick+0x24>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	2000000c 	.word	0x2000000c
 80012d8:	200000b4 	.word	0x200000b4

080012dc <siprintf>:
 80012dc:	b40e      	push	{r1, r2, r3}
 80012de:	b500      	push	{lr}
 80012e0:	b09c      	sub	sp, #112	@ 0x70
 80012e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80012e4:	9002      	str	r0, [sp, #8]
 80012e6:	9006      	str	r0, [sp, #24]
 80012e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80012ec:	4809      	ldr	r0, [pc, #36]	@ (8001314 <siprintf+0x38>)
 80012ee:	9107      	str	r1, [sp, #28]
 80012f0:	9104      	str	r1, [sp, #16]
 80012f2:	4909      	ldr	r1, [pc, #36]	@ (8001318 <siprintf+0x3c>)
 80012f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80012f8:	9105      	str	r1, [sp, #20]
 80012fa:	6800      	ldr	r0, [r0, #0]
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	a902      	add	r1, sp, #8
 8001300:	f000 f98c 	bl	800161c <_svfiprintf_r>
 8001304:	9b02      	ldr	r3, [sp, #8]
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	b01c      	add	sp, #112	@ 0x70
 800130c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001310:	b003      	add	sp, #12
 8001312:	4770      	bx	lr
 8001314:	20000010 	.word	0x20000010
 8001318:	ffff0208 	.word	0xffff0208

0800131c <__errno>:
 800131c:	4b01      	ldr	r3, [pc, #4]	@ (8001324 <__errno+0x8>)
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000010 	.word	0x20000010

08001328 <__libc_init_array>:
 8001328:	b570      	push	{r4, r5, r6, lr}
 800132a:	4d0d      	ldr	r5, [pc, #52]	@ (8001360 <__libc_init_array+0x38>)
 800132c:	4c0d      	ldr	r4, [pc, #52]	@ (8001364 <__libc_init_array+0x3c>)
 800132e:	1b64      	subs	r4, r4, r5
 8001330:	10a4      	asrs	r4, r4, #2
 8001332:	2600      	movs	r6, #0
 8001334:	42a6      	cmp	r6, r4
 8001336:	d109      	bne.n	800134c <__libc_init_array+0x24>
 8001338:	4d0b      	ldr	r5, [pc, #44]	@ (8001368 <__libc_init_array+0x40>)
 800133a:	4c0c      	ldr	r4, [pc, #48]	@ (800136c <__libc_init_array+0x44>)
 800133c:	f001 f830 	bl	80023a0 <_init>
 8001340:	1b64      	subs	r4, r4, r5
 8001342:	10a4      	asrs	r4, r4, #2
 8001344:	2600      	movs	r6, #0
 8001346:	42a6      	cmp	r6, r4
 8001348:	d105      	bne.n	8001356 <__libc_init_array+0x2e>
 800134a:	bd70      	pop	{r4, r5, r6, pc}
 800134c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001350:	4798      	blx	r3
 8001352:	3601      	adds	r6, #1
 8001354:	e7ee      	b.n	8001334 <__libc_init_array+0xc>
 8001356:	f855 3b04 	ldr.w	r3, [r5], #4
 800135a:	4798      	blx	r3
 800135c:	3601      	adds	r6, #1
 800135e:	e7f2      	b.n	8001346 <__libc_init_array+0x1e>
 8001360:	080024d4 	.word	0x080024d4
 8001364:	080024d4 	.word	0x080024d4
 8001368:	080024d4 	.word	0x080024d4
 800136c:	080024d8 	.word	0x080024d8

08001370 <__retarget_lock_acquire_recursive>:
 8001370:	4770      	bx	lr

08001372 <__retarget_lock_release_recursive>:
 8001372:	4770      	bx	lr

08001374 <_free_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4605      	mov	r5, r0
 8001378:	2900      	cmp	r1, #0
 800137a:	d041      	beq.n	8001400 <_free_r+0x8c>
 800137c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001380:	1f0c      	subs	r4, r1, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	bfb8      	it	lt
 8001386:	18e4      	addlt	r4, r4, r3
 8001388:	f000 f8e0 	bl	800154c <__malloc_lock>
 800138c:	4a1d      	ldr	r2, [pc, #116]	@ (8001404 <_free_r+0x90>)
 800138e:	6813      	ldr	r3, [r2, #0]
 8001390:	b933      	cbnz	r3, 80013a0 <_free_r+0x2c>
 8001392:	6063      	str	r3, [r4, #4]
 8001394:	6014      	str	r4, [r2, #0]
 8001396:	4628      	mov	r0, r5
 8001398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800139c:	f000 b8dc 	b.w	8001558 <__malloc_unlock>
 80013a0:	42a3      	cmp	r3, r4
 80013a2:	d908      	bls.n	80013b6 <_free_r+0x42>
 80013a4:	6820      	ldr	r0, [r4, #0]
 80013a6:	1821      	adds	r1, r4, r0
 80013a8:	428b      	cmp	r3, r1
 80013aa:	bf01      	itttt	eq
 80013ac:	6819      	ldreq	r1, [r3, #0]
 80013ae:	685b      	ldreq	r3, [r3, #4]
 80013b0:	1809      	addeq	r1, r1, r0
 80013b2:	6021      	streq	r1, [r4, #0]
 80013b4:	e7ed      	b.n	8001392 <_free_r+0x1e>
 80013b6:	461a      	mov	r2, r3
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	b10b      	cbz	r3, 80013c0 <_free_r+0x4c>
 80013bc:	42a3      	cmp	r3, r4
 80013be:	d9fa      	bls.n	80013b6 <_free_r+0x42>
 80013c0:	6811      	ldr	r1, [r2, #0]
 80013c2:	1850      	adds	r0, r2, r1
 80013c4:	42a0      	cmp	r0, r4
 80013c6:	d10b      	bne.n	80013e0 <_free_r+0x6c>
 80013c8:	6820      	ldr	r0, [r4, #0]
 80013ca:	4401      	add	r1, r0
 80013cc:	1850      	adds	r0, r2, r1
 80013ce:	4283      	cmp	r3, r0
 80013d0:	6011      	str	r1, [r2, #0]
 80013d2:	d1e0      	bne.n	8001396 <_free_r+0x22>
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	6053      	str	r3, [r2, #4]
 80013da:	4408      	add	r0, r1
 80013dc:	6010      	str	r0, [r2, #0]
 80013de:	e7da      	b.n	8001396 <_free_r+0x22>
 80013e0:	d902      	bls.n	80013e8 <_free_r+0x74>
 80013e2:	230c      	movs	r3, #12
 80013e4:	602b      	str	r3, [r5, #0]
 80013e6:	e7d6      	b.n	8001396 <_free_r+0x22>
 80013e8:	6820      	ldr	r0, [r4, #0]
 80013ea:	1821      	adds	r1, r4, r0
 80013ec:	428b      	cmp	r3, r1
 80013ee:	bf04      	itt	eq
 80013f0:	6819      	ldreq	r1, [r3, #0]
 80013f2:	685b      	ldreq	r3, [r3, #4]
 80013f4:	6063      	str	r3, [r4, #4]
 80013f6:	bf04      	itt	eq
 80013f8:	1809      	addeq	r1, r1, r0
 80013fa:	6021      	streq	r1, [r4, #0]
 80013fc:	6054      	str	r4, [r2, #4]
 80013fe:	e7ca      	b.n	8001396 <_free_r+0x22>
 8001400:	bd38      	pop	{r3, r4, r5, pc}
 8001402:	bf00      	nop
 8001404:	200001fc 	.word	0x200001fc

08001408 <sbrk_aligned>:
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	4e0f      	ldr	r6, [pc, #60]	@ (8001448 <sbrk_aligned+0x40>)
 800140c:	460c      	mov	r4, r1
 800140e:	6831      	ldr	r1, [r6, #0]
 8001410:	4605      	mov	r5, r0
 8001412:	b911      	cbnz	r1, 800141a <sbrk_aligned+0x12>
 8001414:	f000 fba6 	bl	8001b64 <_sbrk_r>
 8001418:	6030      	str	r0, [r6, #0]
 800141a:	4621      	mov	r1, r4
 800141c:	4628      	mov	r0, r5
 800141e:	f000 fba1 	bl	8001b64 <_sbrk_r>
 8001422:	1c43      	adds	r3, r0, #1
 8001424:	d103      	bne.n	800142e <sbrk_aligned+0x26>
 8001426:	f04f 34ff 	mov.w	r4, #4294967295
 800142a:	4620      	mov	r0, r4
 800142c:	bd70      	pop	{r4, r5, r6, pc}
 800142e:	1cc4      	adds	r4, r0, #3
 8001430:	f024 0403 	bic.w	r4, r4, #3
 8001434:	42a0      	cmp	r0, r4
 8001436:	d0f8      	beq.n	800142a <sbrk_aligned+0x22>
 8001438:	1a21      	subs	r1, r4, r0
 800143a:	4628      	mov	r0, r5
 800143c:	f000 fb92 	bl	8001b64 <_sbrk_r>
 8001440:	3001      	adds	r0, #1
 8001442:	d1f2      	bne.n	800142a <sbrk_aligned+0x22>
 8001444:	e7ef      	b.n	8001426 <sbrk_aligned+0x1e>
 8001446:	bf00      	nop
 8001448:	200001f8 	.word	0x200001f8

0800144c <_malloc_r>:
 800144c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001450:	1ccd      	adds	r5, r1, #3
 8001452:	f025 0503 	bic.w	r5, r5, #3
 8001456:	3508      	adds	r5, #8
 8001458:	2d0c      	cmp	r5, #12
 800145a:	bf38      	it	cc
 800145c:	250c      	movcc	r5, #12
 800145e:	2d00      	cmp	r5, #0
 8001460:	4606      	mov	r6, r0
 8001462:	db01      	blt.n	8001468 <_malloc_r+0x1c>
 8001464:	42a9      	cmp	r1, r5
 8001466:	d904      	bls.n	8001472 <_malloc_r+0x26>
 8001468:	230c      	movs	r3, #12
 800146a:	6033      	str	r3, [r6, #0]
 800146c:	2000      	movs	r0, #0
 800146e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001548 <_malloc_r+0xfc>
 8001476:	f000 f869 	bl	800154c <__malloc_lock>
 800147a:	f8d8 3000 	ldr.w	r3, [r8]
 800147e:	461c      	mov	r4, r3
 8001480:	bb44      	cbnz	r4, 80014d4 <_malloc_r+0x88>
 8001482:	4629      	mov	r1, r5
 8001484:	4630      	mov	r0, r6
 8001486:	f7ff ffbf 	bl	8001408 <sbrk_aligned>
 800148a:	1c43      	adds	r3, r0, #1
 800148c:	4604      	mov	r4, r0
 800148e:	d158      	bne.n	8001542 <_malloc_r+0xf6>
 8001490:	f8d8 4000 	ldr.w	r4, [r8]
 8001494:	4627      	mov	r7, r4
 8001496:	2f00      	cmp	r7, #0
 8001498:	d143      	bne.n	8001522 <_malloc_r+0xd6>
 800149a:	2c00      	cmp	r4, #0
 800149c:	d04b      	beq.n	8001536 <_malloc_r+0xea>
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	4639      	mov	r1, r7
 80014a2:	4630      	mov	r0, r6
 80014a4:	eb04 0903 	add.w	r9, r4, r3
 80014a8:	f000 fb5c 	bl	8001b64 <_sbrk_r>
 80014ac:	4581      	cmp	r9, r0
 80014ae:	d142      	bne.n	8001536 <_malloc_r+0xea>
 80014b0:	6821      	ldr	r1, [r4, #0]
 80014b2:	1a6d      	subs	r5, r5, r1
 80014b4:	4629      	mov	r1, r5
 80014b6:	4630      	mov	r0, r6
 80014b8:	f7ff ffa6 	bl	8001408 <sbrk_aligned>
 80014bc:	3001      	adds	r0, #1
 80014be:	d03a      	beq.n	8001536 <_malloc_r+0xea>
 80014c0:	6823      	ldr	r3, [r4, #0]
 80014c2:	442b      	add	r3, r5
 80014c4:	6023      	str	r3, [r4, #0]
 80014c6:	f8d8 3000 	ldr.w	r3, [r8]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	bb62      	cbnz	r2, 8001528 <_malloc_r+0xdc>
 80014ce:	f8c8 7000 	str.w	r7, [r8]
 80014d2:	e00f      	b.n	80014f4 <_malloc_r+0xa8>
 80014d4:	6822      	ldr	r2, [r4, #0]
 80014d6:	1b52      	subs	r2, r2, r5
 80014d8:	d420      	bmi.n	800151c <_malloc_r+0xd0>
 80014da:	2a0b      	cmp	r2, #11
 80014dc:	d917      	bls.n	800150e <_malloc_r+0xc2>
 80014de:	1961      	adds	r1, r4, r5
 80014e0:	42a3      	cmp	r3, r4
 80014e2:	6025      	str	r5, [r4, #0]
 80014e4:	bf18      	it	ne
 80014e6:	6059      	strne	r1, [r3, #4]
 80014e8:	6863      	ldr	r3, [r4, #4]
 80014ea:	bf08      	it	eq
 80014ec:	f8c8 1000 	streq.w	r1, [r8]
 80014f0:	5162      	str	r2, [r4, r5]
 80014f2:	604b      	str	r3, [r1, #4]
 80014f4:	4630      	mov	r0, r6
 80014f6:	f000 f82f 	bl	8001558 <__malloc_unlock>
 80014fa:	f104 000b 	add.w	r0, r4, #11
 80014fe:	1d23      	adds	r3, r4, #4
 8001500:	f020 0007 	bic.w	r0, r0, #7
 8001504:	1ac2      	subs	r2, r0, r3
 8001506:	bf1c      	itt	ne
 8001508:	1a1b      	subne	r3, r3, r0
 800150a:	50a3      	strne	r3, [r4, r2]
 800150c:	e7af      	b.n	800146e <_malloc_r+0x22>
 800150e:	6862      	ldr	r2, [r4, #4]
 8001510:	42a3      	cmp	r3, r4
 8001512:	bf0c      	ite	eq
 8001514:	f8c8 2000 	streq.w	r2, [r8]
 8001518:	605a      	strne	r2, [r3, #4]
 800151a:	e7eb      	b.n	80014f4 <_malloc_r+0xa8>
 800151c:	4623      	mov	r3, r4
 800151e:	6864      	ldr	r4, [r4, #4]
 8001520:	e7ae      	b.n	8001480 <_malloc_r+0x34>
 8001522:	463c      	mov	r4, r7
 8001524:	687f      	ldr	r7, [r7, #4]
 8001526:	e7b6      	b.n	8001496 <_malloc_r+0x4a>
 8001528:	461a      	mov	r2, r3
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	42a3      	cmp	r3, r4
 800152e:	d1fb      	bne.n	8001528 <_malloc_r+0xdc>
 8001530:	2300      	movs	r3, #0
 8001532:	6053      	str	r3, [r2, #4]
 8001534:	e7de      	b.n	80014f4 <_malloc_r+0xa8>
 8001536:	230c      	movs	r3, #12
 8001538:	6033      	str	r3, [r6, #0]
 800153a:	4630      	mov	r0, r6
 800153c:	f000 f80c 	bl	8001558 <__malloc_unlock>
 8001540:	e794      	b.n	800146c <_malloc_r+0x20>
 8001542:	6005      	str	r5, [r0, #0]
 8001544:	e7d6      	b.n	80014f4 <_malloc_r+0xa8>
 8001546:	bf00      	nop
 8001548:	200001fc 	.word	0x200001fc

0800154c <__malloc_lock>:
 800154c:	4801      	ldr	r0, [pc, #4]	@ (8001554 <__malloc_lock+0x8>)
 800154e:	f7ff bf0f 	b.w	8001370 <__retarget_lock_acquire_recursive>
 8001552:	bf00      	nop
 8001554:	200001f4 	.word	0x200001f4

08001558 <__malloc_unlock>:
 8001558:	4801      	ldr	r0, [pc, #4]	@ (8001560 <__malloc_unlock+0x8>)
 800155a:	f7ff bf0a 	b.w	8001372 <__retarget_lock_release_recursive>
 800155e:	bf00      	nop
 8001560:	200001f4 	.word	0x200001f4

08001564 <__ssputs_r>:
 8001564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001568:	688e      	ldr	r6, [r1, #8]
 800156a:	461f      	mov	r7, r3
 800156c:	42be      	cmp	r6, r7
 800156e:	680b      	ldr	r3, [r1, #0]
 8001570:	4682      	mov	sl, r0
 8001572:	460c      	mov	r4, r1
 8001574:	4690      	mov	r8, r2
 8001576:	d82d      	bhi.n	80015d4 <__ssputs_r+0x70>
 8001578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800157c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001580:	d026      	beq.n	80015d0 <__ssputs_r+0x6c>
 8001582:	6965      	ldr	r5, [r4, #20]
 8001584:	6909      	ldr	r1, [r1, #16]
 8001586:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800158a:	eba3 0901 	sub.w	r9, r3, r1
 800158e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001592:	1c7b      	adds	r3, r7, #1
 8001594:	444b      	add	r3, r9
 8001596:	106d      	asrs	r5, r5, #1
 8001598:	429d      	cmp	r5, r3
 800159a:	bf38      	it	cc
 800159c:	461d      	movcc	r5, r3
 800159e:	0553      	lsls	r3, r2, #21
 80015a0:	d527      	bpl.n	80015f2 <__ssputs_r+0x8e>
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7ff ff52 	bl	800144c <_malloc_r>
 80015a8:	4606      	mov	r6, r0
 80015aa:	b360      	cbz	r0, 8001606 <__ssputs_r+0xa2>
 80015ac:	6921      	ldr	r1, [r4, #16]
 80015ae:	464a      	mov	r2, r9
 80015b0:	f000 fae8 	bl	8001b84 <memcpy>
 80015b4:	89a3      	ldrh	r3, [r4, #12]
 80015b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80015ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015be:	81a3      	strh	r3, [r4, #12]
 80015c0:	6126      	str	r6, [r4, #16]
 80015c2:	6165      	str	r5, [r4, #20]
 80015c4:	444e      	add	r6, r9
 80015c6:	eba5 0509 	sub.w	r5, r5, r9
 80015ca:	6026      	str	r6, [r4, #0]
 80015cc:	60a5      	str	r5, [r4, #8]
 80015ce:	463e      	mov	r6, r7
 80015d0:	42be      	cmp	r6, r7
 80015d2:	d900      	bls.n	80015d6 <__ssputs_r+0x72>
 80015d4:	463e      	mov	r6, r7
 80015d6:	6820      	ldr	r0, [r4, #0]
 80015d8:	4632      	mov	r2, r6
 80015da:	4641      	mov	r1, r8
 80015dc:	f000 faa8 	bl	8001b30 <memmove>
 80015e0:	68a3      	ldr	r3, [r4, #8]
 80015e2:	1b9b      	subs	r3, r3, r6
 80015e4:	60a3      	str	r3, [r4, #8]
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	4433      	add	r3, r6
 80015ea:	6023      	str	r3, [r4, #0]
 80015ec:	2000      	movs	r0, #0
 80015ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015f2:	462a      	mov	r2, r5
 80015f4:	f000 fad4 	bl	8001ba0 <_realloc_r>
 80015f8:	4606      	mov	r6, r0
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d1e0      	bne.n	80015c0 <__ssputs_r+0x5c>
 80015fe:	6921      	ldr	r1, [r4, #16]
 8001600:	4650      	mov	r0, sl
 8001602:	f7ff feb7 	bl	8001374 <_free_r>
 8001606:	230c      	movs	r3, #12
 8001608:	f8ca 3000 	str.w	r3, [sl]
 800160c:	89a3      	ldrh	r3, [r4, #12]
 800160e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001612:	81a3      	strh	r3, [r4, #12]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	e7e9      	b.n	80015ee <__ssputs_r+0x8a>
	...

0800161c <_svfiprintf_r>:
 800161c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001620:	4698      	mov	r8, r3
 8001622:	898b      	ldrh	r3, [r1, #12]
 8001624:	061b      	lsls	r3, r3, #24
 8001626:	b09d      	sub	sp, #116	@ 0x74
 8001628:	4607      	mov	r7, r0
 800162a:	460d      	mov	r5, r1
 800162c:	4614      	mov	r4, r2
 800162e:	d510      	bpl.n	8001652 <_svfiprintf_r+0x36>
 8001630:	690b      	ldr	r3, [r1, #16]
 8001632:	b973      	cbnz	r3, 8001652 <_svfiprintf_r+0x36>
 8001634:	2140      	movs	r1, #64	@ 0x40
 8001636:	f7ff ff09 	bl	800144c <_malloc_r>
 800163a:	6028      	str	r0, [r5, #0]
 800163c:	6128      	str	r0, [r5, #16]
 800163e:	b930      	cbnz	r0, 800164e <_svfiprintf_r+0x32>
 8001640:	230c      	movs	r3, #12
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	b01d      	add	sp, #116	@ 0x74
 800164a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800164e:	2340      	movs	r3, #64	@ 0x40
 8001650:	616b      	str	r3, [r5, #20]
 8001652:	2300      	movs	r3, #0
 8001654:	9309      	str	r3, [sp, #36]	@ 0x24
 8001656:	2320      	movs	r3, #32
 8001658:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800165c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001660:	2330      	movs	r3, #48	@ 0x30
 8001662:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001800 <_svfiprintf_r+0x1e4>
 8001666:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800166a:	f04f 0901 	mov.w	r9, #1
 800166e:	4623      	mov	r3, r4
 8001670:	469a      	mov	sl, r3
 8001672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001676:	b10a      	cbz	r2, 800167c <_svfiprintf_r+0x60>
 8001678:	2a25      	cmp	r2, #37	@ 0x25
 800167a:	d1f9      	bne.n	8001670 <_svfiprintf_r+0x54>
 800167c:	ebba 0b04 	subs.w	fp, sl, r4
 8001680:	d00b      	beq.n	800169a <_svfiprintf_r+0x7e>
 8001682:	465b      	mov	r3, fp
 8001684:	4622      	mov	r2, r4
 8001686:	4629      	mov	r1, r5
 8001688:	4638      	mov	r0, r7
 800168a:	f7ff ff6b 	bl	8001564 <__ssputs_r>
 800168e:	3001      	adds	r0, #1
 8001690:	f000 80a7 	beq.w	80017e2 <_svfiprintf_r+0x1c6>
 8001694:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001696:	445a      	add	r2, fp
 8001698:	9209      	str	r2, [sp, #36]	@ 0x24
 800169a:	f89a 3000 	ldrb.w	r3, [sl]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 809f 	beq.w	80017e2 <_svfiprintf_r+0x1c6>
 80016a4:	2300      	movs	r3, #0
 80016a6:	f04f 32ff 	mov.w	r2, #4294967295
 80016aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016ae:	f10a 0a01 	add.w	sl, sl, #1
 80016b2:	9304      	str	r3, [sp, #16]
 80016b4:	9307      	str	r3, [sp, #28]
 80016b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80016ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80016bc:	4654      	mov	r4, sl
 80016be:	2205      	movs	r2, #5
 80016c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016c4:	484e      	ldr	r0, [pc, #312]	@ (8001800 <_svfiprintf_r+0x1e4>)
 80016c6:	f7fe fd8b 	bl	80001e0 <memchr>
 80016ca:	9a04      	ldr	r2, [sp, #16]
 80016cc:	b9d8      	cbnz	r0, 8001706 <_svfiprintf_r+0xea>
 80016ce:	06d0      	lsls	r0, r2, #27
 80016d0:	bf44      	itt	mi
 80016d2:	2320      	movmi	r3, #32
 80016d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80016d8:	0711      	lsls	r1, r2, #28
 80016da:	bf44      	itt	mi
 80016dc:	232b      	movmi	r3, #43	@ 0x2b
 80016de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80016e2:	f89a 3000 	ldrb.w	r3, [sl]
 80016e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80016e8:	d015      	beq.n	8001716 <_svfiprintf_r+0xfa>
 80016ea:	9a07      	ldr	r2, [sp, #28]
 80016ec:	4654      	mov	r4, sl
 80016ee:	2000      	movs	r0, #0
 80016f0:	f04f 0c0a 	mov.w	ip, #10
 80016f4:	4621      	mov	r1, r4
 80016f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80016fa:	3b30      	subs	r3, #48	@ 0x30
 80016fc:	2b09      	cmp	r3, #9
 80016fe:	d94b      	bls.n	8001798 <_svfiprintf_r+0x17c>
 8001700:	b1b0      	cbz	r0, 8001730 <_svfiprintf_r+0x114>
 8001702:	9207      	str	r2, [sp, #28]
 8001704:	e014      	b.n	8001730 <_svfiprintf_r+0x114>
 8001706:	eba0 0308 	sub.w	r3, r0, r8
 800170a:	fa09 f303 	lsl.w	r3, r9, r3
 800170e:	4313      	orrs	r3, r2
 8001710:	9304      	str	r3, [sp, #16]
 8001712:	46a2      	mov	sl, r4
 8001714:	e7d2      	b.n	80016bc <_svfiprintf_r+0xa0>
 8001716:	9b03      	ldr	r3, [sp, #12]
 8001718:	1d19      	adds	r1, r3, #4
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	9103      	str	r1, [sp, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	bfbb      	ittet	lt
 8001722:	425b      	neglt	r3, r3
 8001724:	f042 0202 	orrlt.w	r2, r2, #2
 8001728:	9307      	strge	r3, [sp, #28]
 800172a:	9307      	strlt	r3, [sp, #28]
 800172c:	bfb8      	it	lt
 800172e:	9204      	strlt	r2, [sp, #16]
 8001730:	7823      	ldrb	r3, [r4, #0]
 8001732:	2b2e      	cmp	r3, #46	@ 0x2e
 8001734:	d10a      	bne.n	800174c <_svfiprintf_r+0x130>
 8001736:	7863      	ldrb	r3, [r4, #1]
 8001738:	2b2a      	cmp	r3, #42	@ 0x2a
 800173a:	d132      	bne.n	80017a2 <_svfiprintf_r+0x186>
 800173c:	9b03      	ldr	r3, [sp, #12]
 800173e:	1d1a      	adds	r2, r3, #4
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	9203      	str	r2, [sp, #12]
 8001744:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001748:	3402      	adds	r4, #2
 800174a:	9305      	str	r3, [sp, #20]
 800174c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001810 <_svfiprintf_r+0x1f4>
 8001750:	7821      	ldrb	r1, [r4, #0]
 8001752:	2203      	movs	r2, #3
 8001754:	4650      	mov	r0, sl
 8001756:	f7fe fd43 	bl	80001e0 <memchr>
 800175a:	b138      	cbz	r0, 800176c <_svfiprintf_r+0x150>
 800175c:	9b04      	ldr	r3, [sp, #16]
 800175e:	eba0 000a 	sub.w	r0, r0, sl
 8001762:	2240      	movs	r2, #64	@ 0x40
 8001764:	4082      	lsls	r2, r0
 8001766:	4313      	orrs	r3, r2
 8001768:	3401      	adds	r4, #1
 800176a:	9304      	str	r3, [sp, #16]
 800176c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001770:	4824      	ldr	r0, [pc, #144]	@ (8001804 <_svfiprintf_r+0x1e8>)
 8001772:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001776:	2206      	movs	r2, #6
 8001778:	f7fe fd32 	bl	80001e0 <memchr>
 800177c:	2800      	cmp	r0, #0
 800177e:	d036      	beq.n	80017ee <_svfiprintf_r+0x1d2>
 8001780:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <_svfiprintf_r+0x1ec>)
 8001782:	bb1b      	cbnz	r3, 80017cc <_svfiprintf_r+0x1b0>
 8001784:	9b03      	ldr	r3, [sp, #12]
 8001786:	3307      	adds	r3, #7
 8001788:	f023 0307 	bic.w	r3, r3, #7
 800178c:	3308      	adds	r3, #8
 800178e:	9303      	str	r3, [sp, #12]
 8001790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001792:	4433      	add	r3, r6
 8001794:	9309      	str	r3, [sp, #36]	@ 0x24
 8001796:	e76a      	b.n	800166e <_svfiprintf_r+0x52>
 8001798:	fb0c 3202 	mla	r2, ip, r2, r3
 800179c:	460c      	mov	r4, r1
 800179e:	2001      	movs	r0, #1
 80017a0:	e7a8      	b.n	80016f4 <_svfiprintf_r+0xd8>
 80017a2:	2300      	movs	r3, #0
 80017a4:	3401      	adds	r4, #1
 80017a6:	9305      	str	r3, [sp, #20]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f04f 0c0a 	mov.w	ip, #10
 80017ae:	4620      	mov	r0, r4
 80017b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017b4:	3a30      	subs	r2, #48	@ 0x30
 80017b6:	2a09      	cmp	r2, #9
 80017b8:	d903      	bls.n	80017c2 <_svfiprintf_r+0x1a6>
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0c6      	beq.n	800174c <_svfiprintf_r+0x130>
 80017be:	9105      	str	r1, [sp, #20]
 80017c0:	e7c4      	b.n	800174c <_svfiprintf_r+0x130>
 80017c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80017c6:	4604      	mov	r4, r0
 80017c8:	2301      	movs	r3, #1
 80017ca:	e7f0      	b.n	80017ae <_svfiprintf_r+0x192>
 80017cc:	ab03      	add	r3, sp, #12
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	462a      	mov	r2, r5
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <_svfiprintf_r+0x1f0>)
 80017d4:	a904      	add	r1, sp, #16
 80017d6:	4638      	mov	r0, r7
 80017d8:	f3af 8000 	nop.w
 80017dc:	1c42      	adds	r2, r0, #1
 80017de:	4606      	mov	r6, r0
 80017e0:	d1d6      	bne.n	8001790 <_svfiprintf_r+0x174>
 80017e2:	89ab      	ldrh	r3, [r5, #12]
 80017e4:	065b      	lsls	r3, r3, #25
 80017e6:	f53f af2d 	bmi.w	8001644 <_svfiprintf_r+0x28>
 80017ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80017ec:	e72c      	b.n	8001648 <_svfiprintf_r+0x2c>
 80017ee:	ab03      	add	r3, sp, #12
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	462a      	mov	r2, r5
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <_svfiprintf_r+0x1f0>)
 80017f6:	a904      	add	r1, sp, #16
 80017f8:	4638      	mov	r0, r7
 80017fa:	f000 f879 	bl	80018f0 <_printf_i>
 80017fe:	e7ed      	b.n	80017dc <_svfiprintf_r+0x1c0>
 8001800:	08002480 	.word	0x08002480
 8001804:	0800248a 	.word	0x0800248a
 8001808:	00000000 	.word	0x00000000
 800180c:	08001565 	.word	0x08001565
 8001810:	08002486 	.word	0x08002486

08001814 <_printf_common>:
 8001814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001818:	4616      	mov	r6, r2
 800181a:	4698      	mov	r8, r3
 800181c:	688a      	ldr	r2, [r1, #8]
 800181e:	690b      	ldr	r3, [r1, #16]
 8001820:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001824:	4293      	cmp	r3, r2
 8001826:	bfb8      	it	lt
 8001828:	4613      	movlt	r3, r2
 800182a:	6033      	str	r3, [r6, #0]
 800182c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001830:	4607      	mov	r7, r0
 8001832:	460c      	mov	r4, r1
 8001834:	b10a      	cbz	r2, 800183a <_printf_common+0x26>
 8001836:	3301      	adds	r3, #1
 8001838:	6033      	str	r3, [r6, #0]
 800183a:	6823      	ldr	r3, [r4, #0]
 800183c:	0699      	lsls	r1, r3, #26
 800183e:	bf42      	ittt	mi
 8001840:	6833      	ldrmi	r3, [r6, #0]
 8001842:	3302      	addmi	r3, #2
 8001844:	6033      	strmi	r3, [r6, #0]
 8001846:	6825      	ldr	r5, [r4, #0]
 8001848:	f015 0506 	ands.w	r5, r5, #6
 800184c:	d106      	bne.n	800185c <_printf_common+0x48>
 800184e:	f104 0a19 	add.w	sl, r4, #25
 8001852:	68e3      	ldr	r3, [r4, #12]
 8001854:	6832      	ldr	r2, [r6, #0]
 8001856:	1a9b      	subs	r3, r3, r2
 8001858:	42ab      	cmp	r3, r5
 800185a:	dc26      	bgt.n	80018aa <_printf_common+0x96>
 800185c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001860:	6822      	ldr	r2, [r4, #0]
 8001862:	3b00      	subs	r3, #0
 8001864:	bf18      	it	ne
 8001866:	2301      	movne	r3, #1
 8001868:	0692      	lsls	r2, r2, #26
 800186a:	d42b      	bmi.n	80018c4 <_printf_common+0xb0>
 800186c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001870:	4641      	mov	r1, r8
 8001872:	4638      	mov	r0, r7
 8001874:	47c8      	blx	r9
 8001876:	3001      	adds	r0, #1
 8001878:	d01e      	beq.n	80018b8 <_printf_common+0xa4>
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	6922      	ldr	r2, [r4, #16]
 800187e:	f003 0306 	and.w	r3, r3, #6
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf02      	ittt	eq
 8001886:	68e5      	ldreq	r5, [r4, #12]
 8001888:	6833      	ldreq	r3, [r6, #0]
 800188a:	1aed      	subeq	r5, r5, r3
 800188c:	68a3      	ldr	r3, [r4, #8]
 800188e:	bf0c      	ite	eq
 8001890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001894:	2500      	movne	r5, #0
 8001896:	4293      	cmp	r3, r2
 8001898:	bfc4      	itt	gt
 800189a:	1a9b      	subgt	r3, r3, r2
 800189c:	18ed      	addgt	r5, r5, r3
 800189e:	2600      	movs	r6, #0
 80018a0:	341a      	adds	r4, #26
 80018a2:	42b5      	cmp	r5, r6
 80018a4:	d11a      	bne.n	80018dc <_printf_common+0xc8>
 80018a6:	2000      	movs	r0, #0
 80018a8:	e008      	b.n	80018bc <_printf_common+0xa8>
 80018aa:	2301      	movs	r3, #1
 80018ac:	4652      	mov	r2, sl
 80018ae:	4641      	mov	r1, r8
 80018b0:	4638      	mov	r0, r7
 80018b2:	47c8      	blx	r9
 80018b4:	3001      	adds	r0, #1
 80018b6:	d103      	bne.n	80018c0 <_printf_common+0xac>
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018c0:	3501      	adds	r5, #1
 80018c2:	e7c6      	b.n	8001852 <_printf_common+0x3e>
 80018c4:	18e1      	adds	r1, r4, r3
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	2030      	movs	r0, #48	@ 0x30
 80018ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80018ce:	4422      	add	r2, r4
 80018d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80018d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80018d8:	3302      	adds	r3, #2
 80018da:	e7c7      	b.n	800186c <_printf_common+0x58>
 80018dc:	2301      	movs	r3, #1
 80018de:	4622      	mov	r2, r4
 80018e0:	4641      	mov	r1, r8
 80018e2:	4638      	mov	r0, r7
 80018e4:	47c8      	blx	r9
 80018e6:	3001      	adds	r0, #1
 80018e8:	d0e6      	beq.n	80018b8 <_printf_common+0xa4>
 80018ea:	3601      	adds	r6, #1
 80018ec:	e7d9      	b.n	80018a2 <_printf_common+0x8e>
	...

080018f0 <_printf_i>:
 80018f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80018f4:	7e0f      	ldrb	r7, [r1, #24]
 80018f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80018f8:	2f78      	cmp	r7, #120	@ 0x78
 80018fa:	4691      	mov	r9, r2
 80018fc:	4680      	mov	r8, r0
 80018fe:	460c      	mov	r4, r1
 8001900:	469a      	mov	sl, r3
 8001902:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001906:	d807      	bhi.n	8001918 <_printf_i+0x28>
 8001908:	2f62      	cmp	r7, #98	@ 0x62
 800190a:	d80a      	bhi.n	8001922 <_printf_i+0x32>
 800190c:	2f00      	cmp	r7, #0
 800190e:	f000 80d2 	beq.w	8001ab6 <_printf_i+0x1c6>
 8001912:	2f58      	cmp	r7, #88	@ 0x58
 8001914:	f000 80b9 	beq.w	8001a8a <_printf_i+0x19a>
 8001918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800191c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001920:	e03a      	b.n	8001998 <_printf_i+0xa8>
 8001922:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001926:	2b15      	cmp	r3, #21
 8001928:	d8f6      	bhi.n	8001918 <_printf_i+0x28>
 800192a:	a101      	add	r1, pc, #4	@ (adr r1, 8001930 <_printf_i+0x40>)
 800192c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001930:	08001989 	.word	0x08001989
 8001934:	0800199d 	.word	0x0800199d
 8001938:	08001919 	.word	0x08001919
 800193c:	08001919 	.word	0x08001919
 8001940:	08001919 	.word	0x08001919
 8001944:	08001919 	.word	0x08001919
 8001948:	0800199d 	.word	0x0800199d
 800194c:	08001919 	.word	0x08001919
 8001950:	08001919 	.word	0x08001919
 8001954:	08001919 	.word	0x08001919
 8001958:	08001919 	.word	0x08001919
 800195c:	08001a9d 	.word	0x08001a9d
 8001960:	080019c7 	.word	0x080019c7
 8001964:	08001a57 	.word	0x08001a57
 8001968:	08001919 	.word	0x08001919
 800196c:	08001919 	.word	0x08001919
 8001970:	08001abf 	.word	0x08001abf
 8001974:	08001919 	.word	0x08001919
 8001978:	080019c7 	.word	0x080019c7
 800197c:	08001919 	.word	0x08001919
 8001980:	08001919 	.word	0x08001919
 8001984:	08001a5f 	.word	0x08001a5f
 8001988:	6833      	ldr	r3, [r6, #0]
 800198a:	1d1a      	adds	r2, r3, #4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6032      	str	r2, [r6, #0]
 8001990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001994:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001998:	2301      	movs	r3, #1
 800199a:	e09d      	b.n	8001ad8 <_printf_i+0x1e8>
 800199c:	6833      	ldr	r3, [r6, #0]
 800199e:	6820      	ldr	r0, [r4, #0]
 80019a0:	1d19      	adds	r1, r3, #4
 80019a2:	6031      	str	r1, [r6, #0]
 80019a4:	0606      	lsls	r6, r0, #24
 80019a6:	d501      	bpl.n	80019ac <_printf_i+0xbc>
 80019a8:	681d      	ldr	r5, [r3, #0]
 80019aa:	e003      	b.n	80019b4 <_printf_i+0xc4>
 80019ac:	0645      	lsls	r5, r0, #25
 80019ae:	d5fb      	bpl.n	80019a8 <_printf_i+0xb8>
 80019b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80019b4:	2d00      	cmp	r5, #0
 80019b6:	da03      	bge.n	80019c0 <_printf_i+0xd0>
 80019b8:	232d      	movs	r3, #45	@ 0x2d
 80019ba:	426d      	negs	r5, r5
 80019bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80019c0:	4859      	ldr	r0, [pc, #356]	@ (8001b28 <_printf_i+0x238>)
 80019c2:	230a      	movs	r3, #10
 80019c4:	e011      	b.n	80019ea <_printf_i+0xfa>
 80019c6:	6821      	ldr	r1, [r4, #0]
 80019c8:	6833      	ldr	r3, [r6, #0]
 80019ca:	0608      	lsls	r0, r1, #24
 80019cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80019d0:	d402      	bmi.n	80019d8 <_printf_i+0xe8>
 80019d2:	0649      	lsls	r1, r1, #25
 80019d4:	bf48      	it	mi
 80019d6:	b2ad      	uxthmi	r5, r5
 80019d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80019da:	4853      	ldr	r0, [pc, #332]	@ (8001b28 <_printf_i+0x238>)
 80019dc:	6033      	str	r3, [r6, #0]
 80019de:	bf14      	ite	ne
 80019e0:	230a      	movne	r3, #10
 80019e2:	2308      	moveq	r3, #8
 80019e4:	2100      	movs	r1, #0
 80019e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80019ea:	6866      	ldr	r6, [r4, #4]
 80019ec:	60a6      	str	r6, [r4, #8]
 80019ee:	2e00      	cmp	r6, #0
 80019f0:	bfa2      	ittt	ge
 80019f2:	6821      	ldrge	r1, [r4, #0]
 80019f4:	f021 0104 	bicge.w	r1, r1, #4
 80019f8:	6021      	strge	r1, [r4, #0]
 80019fa:	b90d      	cbnz	r5, 8001a00 <_printf_i+0x110>
 80019fc:	2e00      	cmp	r6, #0
 80019fe:	d04b      	beq.n	8001a98 <_printf_i+0x1a8>
 8001a00:	4616      	mov	r6, r2
 8001a02:	fbb5 f1f3 	udiv	r1, r5, r3
 8001a06:	fb03 5711 	mls	r7, r3, r1, r5
 8001a0a:	5dc7      	ldrb	r7, [r0, r7]
 8001a0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001a10:	462f      	mov	r7, r5
 8001a12:	42bb      	cmp	r3, r7
 8001a14:	460d      	mov	r5, r1
 8001a16:	d9f4      	bls.n	8001a02 <_printf_i+0x112>
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d10b      	bne.n	8001a34 <_printf_i+0x144>
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	07df      	lsls	r7, r3, #31
 8001a20:	d508      	bpl.n	8001a34 <_printf_i+0x144>
 8001a22:	6923      	ldr	r3, [r4, #16]
 8001a24:	6861      	ldr	r1, [r4, #4]
 8001a26:	4299      	cmp	r1, r3
 8001a28:	bfde      	ittt	le
 8001a2a:	2330      	movle	r3, #48	@ 0x30
 8001a2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001a30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001a34:	1b92      	subs	r2, r2, r6
 8001a36:	6122      	str	r2, [r4, #16]
 8001a38:	f8cd a000 	str.w	sl, [sp]
 8001a3c:	464b      	mov	r3, r9
 8001a3e:	aa03      	add	r2, sp, #12
 8001a40:	4621      	mov	r1, r4
 8001a42:	4640      	mov	r0, r8
 8001a44:	f7ff fee6 	bl	8001814 <_printf_common>
 8001a48:	3001      	adds	r0, #1
 8001a4a:	d14a      	bne.n	8001ae2 <_printf_i+0x1f2>
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	b004      	add	sp, #16
 8001a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	f043 0320 	orr.w	r3, r3, #32
 8001a5c:	6023      	str	r3, [r4, #0]
 8001a5e:	4833      	ldr	r0, [pc, #204]	@ (8001b2c <_printf_i+0x23c>)
 8001a60:	2778      	movs	r7, #120	@ 0x78
 8001a62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	6831      	ldr	r1, [r6, #0]
 8001a6a:	061f      	lsls	r7, r3, #24
 8001a6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001a70:	d402      	bmi.n	8001a78 <_printf_i+0x188>
 8001a72:	065f      	lsls	r7, r3, #25
 8001a74:	bf48      	it	mi
 8001a76:	b2ad      	uxthmi	r5, r5
 8001a78:	6031      	str	r1, [r6, #0]
 8001a7a:	07d9      	lsls	r1, r3, #31
 8001a7c:	bf44      	itt	mi
 8001a7e:	f043 0320 	orrmi.w	r3, r3, #32
 8001a82:	6023      	strmi	r3, [r4, #0]
 8001a84:	b11d      	cbz	r5, 8001a8e <_printf_i+0x19e>
 8001a86:	2310      	movs	r3, #16
 8001a88:	e7ac      	b.n	80019e4 <_printf_i+0xf4>
 8001a8a:	4827      	ldr	r0, [pc, #156]	@ (8001b28 <_printf_i+0x238>)
 8001a8c:	e7e9      	b.n	8001a62 <_printf_i+0x172>
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	f023 0320 	bic.w	r3, r3, #32
 8001a94:	6023      	str	r3, [r4, #0]
 8001a96:	e7f6      	b.n	8001a86 <_printf_i+0x196>
 8001a98:	4616      	mov	r6, r2
 8001a9a:	e7bd      	b.n	8001a18 <_printf_i+0x128>
 8001a9c:	6833      	ldr	r3, [r6, #0]
 8001a9e:	6825      	ldr	r5, [r4, #0]
 8001aa0:	6961      	ldr	r1, [r4, #20]
 8001aa2:	1d18      	adds	r0, r3, #4
 8001aa4:	6030      	str	r0, [r6, #0]
 8001aa6:	062e      	lsls	r6, r5, #24
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	d501      	bpl.n	8001ab0 <_printf_i+0x1c0>
 8001aac:	6019      	str	r1, [r3, #0]
 8001aae:	e002      	b.n	8001ab6 <_printf_i+0x1c6>
 8001ab0:	0668      	lsls	r0, r5, #25
 8001ab2:	d5fb      	bpl.n	8001aac <_printf_i+0x1bc>
 8001ab4:	8019      	strh	r1, [r3, #0]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	6123      	str	r3, [r4, #16]
 8001aba:	4616      	mov	r6, r2
 8001abc:	e7bc      	b.n	8001a38 <_printf_i+0x148>
 8001abe:	6833      	ldr	r3, [r6, #0]
 8001ac0:	1d1a      	adds	r2, r3, #4
 8001ac2:	6032      	str	r2, [r6, #0]
 8001ac4:	681e      	ldr	r6, [r3, #0]
 8001ac6:	6862      	ldr	r2, [r4, #4]
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4630      	mov	r0, r6
 8001acc:	f7fe fb88 	bl	80001e0 <memchr>
 8001ad0:	b108      	cbz	r0, 8001ad6 <_printf_i+0x1e6>
 8001ad2:	1b80      	subs	r0, r0, r6
 8001ad4:	6060      	str	r0, [r4, #4]
 8001ad6:	6863      	ldr	r3, [r4, #4]
 8001ad8:	6123      	str	r3, [r4, #16]
 8001ada:	2300      	movs	r3, #0
 8001adc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ae0:	e7aa      	b.n	8001a38 <_printf_i+0x148>
 8001ae2:	6923      	ldr	r3, [r4, #16]
 8001ae4:	4632      	mov	r2, r6
 8001ae6:	4649      	mov	r1, r9
 8001ae8:	4640      	mov	r0, r8
 8001aea:	47d0      	blx	sl
 8001aec:	3001      	adds	r0, #1
 8001aee:	d0ad      	beq.n	8001a4c <_printf_i+0x15c>
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	079b      	lsls	r3, r3, #30
 8001af4:	d413      	bmi.n	8001b1e <_printf_i+0x22e>
 8001af6:	68e0      	ldr	r0, [r4, #12]
 8001af8:	9b03      	ldr	r3, [sp, #12]
 8001afa:	4298      	cmp	r0, r3
 8001afc:	bfb8      	it	lt
 8001afe:	4618      	movlt	r0, r3
 8001b00:	e7a6      	b.n	8001a50 <_printf_i+0x160>
 8001b02:	2301      	movs	r3, #1
 8001b04:	4632      	mov	r2, r6
 8001b06:	4649      	mov	r1, r9
 8001b08:	4640      	mov	r0, r8
 8001b0a:	47d0      	blx	sl
 8001b0c:	3001      	adds	r0, #1
 8001b0e:	d09d      	beq.n	8001a4c <_printf_i+0x15c>
 8001b10:	3501      	adds	r5, #1
 8001b12:	68e3      	ldr	r3, [r4, #12]
 8001b14:	9903      	ldr	r1, [sp, #12]
 8001b16:	1a5b      	subs	r3, r3, r1
 8001b18:	42ab      	cmp	r3, r5
 8001b1a:	dcf2      	bgt.n	8001b02 <_printf_i+0x212>
 8001b1c:	e7eb      	b.n	8001af6 <_printf_i+0x206>
 8001b1e:	2500      	movs	r5, #0
 8001b20:	f104 0619 	add.w	r6, r4, #25
 8001b24:	e7f5      	b.n	8001b12 <_printf_i+0x222>
 8001b26:	bf00      	nop
 8001b28:	08002491 	.word	0x08002491
 8001b2c:	080024a2 	.word	0x080024a2

08001b30 <memmove>:
 8001b30:	4288      	cmp	r0, r1
 8001b32:	b510      	push	{r4, lr}
 8001b34:	eb01 0402 	add.w	r4, r1, r2
 8001b38:	d902      	bls.n	8001b40 <memmove+0x10>
 8001b3a:	4284      	cmp	r4, r0
 8001b3c:	4623      	mov	r3, r4
 8001b3e:	d807      	bhi.n	8001b50 <memmove+0x20>
 8001b40:	1e43      	subs	r3, r0, #1
 8001b42:	42a1      	cmp	r1, r4
 8001b44:	d008      	beq.n	8001b58 <memmove+0x28>
 8001b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001b4e:	e7f8      	b.n	8001b42 <memmove+0x12>
 8001b50:	4402      	add	r2, r0
 8001b52:	4601      	mov	r1, r0
 8001b54:	428a      	cmp	r2, r1
 8001b56:	d100      	bne.n	8001b5a <memmove+0x2a>
 8001b58:	bd10      	pop	{r4, pc}
 8001b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001b62:	e7f7      	b.n	8001b54 <memmove+0x24>

08001b64 <_sbrk_r>:
 8001b64:	b538      	push	{r3, r4, r5, lr}
 8001b66:	4d06      	ldr	r5, [pc, #24]	@ (8001b80 <_sbrk_r+0x1c>)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	4608      	mov	r0, r1
 8001b6e:	602b      	str	r3, [r5, #0]
 8001b70:	f7ff f9d2 	bl	8000f18 <_sbrk>
 8001b74:	1c43      	adds	r3, r0, #1
 8001b76:	d102      	bne.n	8001b7e <_sbrk_r+0x1a>
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	b103      	cbz	r3, 8001b7e <_sbrk_r+0x1a>
 8001b7c:	6023      	str	r3, [r4, #0]
 8001b7e:	bd38      	pop	{r3, r4, r5, pc}
 8001b80:	200001f0 	.word	0x200001f0

08001b84 <memcpy>:
 8001b84:	440a      	add	r2, r1
 8001b86:	4291      	cmp	r1, r2
 8001b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8001b8c:	d100      	bne.n	8001b90 <memcpy+0xc>
 8001b8e:	4770      	bx	lr
 8001b90:	b510      	push	{r4, lr}
 8001b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b9a:	4291      	cmp	r1, r2
 8001b9c:	d1f9      	bne.n	8001b92 <memcpy+0xe>
 8001b9e:	bd10      	pop	{r4, pc}

08001ba0 <_realloc_r>:
 8001ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ba4:	4680      	mov	r8, r0
 8001ba6:	4615      	mov	r5, r2
 8001ba8:	460c      	mov	r4, r1
 8001baa:	b921      	cbnz	r1, 8001bb6 <_realloc_r+0x16>
 8001bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	f7ff bc4b 	b.w	800144c <_malloc_r>
 8001bb6:	b92a      	cbnz	r2, 8001bc4 <_realloc_r+0x24>
 8001bb8:	f7ff fbdc 	bl	8001374 <_free_r>
 8001bbc:	2400      	movs	r4, #0
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bc4:	f000 f81a 	bl	8001bfc <_malloc_usable_size_r>
 8001bc8:	4285      	cmp	r5, r0
 8001bca:	4606      	mov	r6, r0
 8001bcc:	d802      	bhi.n	8001bd4 <_realloc_r+0x34>
 8001bce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001bd2:	d8f4      	bhi.n	8001bbe <_realloc_r+0x1e>
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	4640      	mov	r0, r8
 8001bd8:	f7ff fc38 	bl	800144c <_malloc_r>
 8001bdc:	4607      	mov	r7, r0
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d0ec      	beq.n	8001bbc <_realloc_r+0x1c>
 8001be2:	42b5      	cmp	r5, r6
 8001be4:	462a      	mov	r2, r5
 8001be6:	4621      	mov	r1, r4
 8001be8:	bf28      	it	cs
 8001bea:	4632      	movcs	r2, r6
 8001bec:	f7ff ffca 	bl	8001b84 <memcpy>
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	4640      	mov	r0, r8
 8001bf4:	f7ff fbbe 	bl	8001374 <_free_r>
 8001bf8:	463c      	mov	r4, r7
 8001bfa:	e7e0      	b.n	8001bbe <_realloc_r+0x1e>

08001bfc <_malloc_usable_size_r>:
 8001bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c00:	1f18      	subs	r0, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bfbc      	itt	lt
 8001c06:	580b      	ldrlt	r3, [r1, r0]
 8001c08:	18c0      	addlt	r0, r0, r3
 8001c0a:	4770      	bx	lr

08001c0c <powf>:
 8001c0c:	b508      	push	{r3, lr}
 8001c0e:	ed2d 8b04 	vpush	{d8-d9}
 8001c12:	eeb0 8a60 	vmov.f32	s16, s1
 8001c16:	eeb0 9a40 	vmov.f32	s18, s0
 8001c1a:	f000 f859 	bl	8001cd0 <__ieee754_powf>
 8001c1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	eef0 8a40 	vmov.f32	s17, s0
 8001c2a:	d63e      	bvs.n	8001caa <powf+0x9e>
 8001c2c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	d112      	bne.n	8001c5c <powf+0x50>
 8001c36:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	d039      	beq.n	8001cb4 <powf+0xa8>
 8001c40:	eeb0 0a48 	vmov.f32	s0, s16
 8001c44:	f000 f839 	bl	8001cba <finitef>
 8001c48:	b378      	cbz	r0, 8001caa <powf+0x9e>
 8001c4a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	d52a      	bpl.n	8001caa <powf+0x9e>
 8001c54:	f7ff fb62 	bl	800131c <__errno>
 8001c58:	2322      	movs	r3, #34	@ 0x22
 8001c5a:	e014      	b.n	8001c86 <powf+0x7a>
 8001c5c:	f000 f82d 	bl	8001cba <finitef>
 8001c60:	b998      	cbnz	r0, 8001c8a <powf+0x7e>
 8001c62:	eeb0 0a49 	vmov.f32	s0, s18
 8001c66:	f000 f828 	bl	8001cba <finitef>
 8001c6a:	b170      	cbz	r0, 8001c8a <powf+0x7e>
 8001c6c:	eeb0 0a48 	vmov.f32	s0, s16
 8001c70:	f000 f823 	bl	8001cba <finitef>
 8001c74:	b148      	cbz	r0, 8001c8a <powf+0x7e>
 8001c76:	eef4 8a68 	vcmp.f32	s17, s17
 8001c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7e:	d7e9      	bvc.n	8001c54 <powf+0x48>
 8001c80:	f7ff fb4c 	bl	800131c <__errno>
 8001c84:	2321      	movs	r3, #33	@ 0x21
 8001c86:	6003      	str	r3, [r0, #0]
 8001c88:	e00f      	b.n	8001caa <powf+0x9e>
 8001c8a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	d10a      	bne.n	8001caa <powf+0x9e>
 8001c94:	eeb0 0a49 	vmov.f32	s0, s18
 8001c98:	f000 f80f 	bl	8001cba <finitef>
 8001c9c:	b128      	cbz	r0, 8001caa <powf+0x9e>
 8001c9e:	eeb0 0a48 	vmov.f32	s0, s16
 8001ca2:	f000 f80a 	bl	8001cba <finitef>
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d1d4      	bne.n	8001c54 <powf+0x48>
 8001caa:	eeb0 0a68 	vmov.f32	s0, s17
 8001cae:	ecbd 8b04 	vpop	{d8-d9}
 8001cb2:	bd08      	pop	{r3, pc}
 8001cb4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8001cb8:	e7f7      	b.n	8001caa <powf+0x9e>

08001cba <finitef>:
 8001cba:	ee10 3a10 	vmov	r3, s0
 8001cbe:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8001cc2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8001cc6:	bfac      	ite	ge
 8001cc8:	2000      	movge	r0, #0
 8001cca:	2001      	movlt	r0, #1
 8001ccc:	4770      	bx	lr
	...

08001cd0 <__ieee754_powf>:
 8001cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cd4:	ee10 4a90 	vmov	r4, s1
 8001cd8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8001cdc:	ed2d 8b02 	vpush	{d8}
 8001ce0:	ee10 6a10 	vmov	r6, s0
 8001ce4:	eeb0 8a40 	vmov.f32	s16, s0
 8001ce8:	eef0 8a60 	vmov.f32	s17, s1
 8001cec:	d10c      	bne.n	8001d08 <__ieee754_powf+0x38>
 8001cee:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8001cf2:	0076      	lsls	r6, r6, #1
 8001cf4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8001cf8:	f240 829c 	bls.w	8002234 <__ieee754_powf+0x564>
 8001cfc:	ee38 0a28 	vadd.f32	s0, s16, s17
 8001d00:	ecbd 8b02 	vpop	{d8}
 8001d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d08:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8001d0c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8001d10:	d802      	bhi.n	8001d18 <__ieee754_powf+0x48>
 8001d12:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8001d16:	d908      	bls.n	8001d2a <__ieee754_powf+0x5a>
 8001d18:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8001d1c:	d1ee      	bne.n	8001cfc <__ieee754_powf+0x2c>
 8001d1e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8001d22:	0064      	lsls	r4, r4, #1
 8001d24:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8001d28:	e7e6      	b.n	8001cf8 <__ieee754_powf+0x28>
 8001d2a:	2e00      	cmp	r6, #0
 8001d2c:	da1e      	bge.n	8001d6c <__ieee754_powf+0x9c>
 8001d2e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8001d32:	d22b      	bcs.n	8001d8c <__ieee754_powf+0xbc>
 8001d34:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8001d38:	d332      	bcc.n	8001da0 <__ieee754_powf+0xd0>
 8001d3a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8001d3e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8001d42:	fa49 f503 	asr.w	r5, r9, r3
 8001d46:	fa05 f303 	lsl.w	r3, r5, r3
 8001d4a:	454b      	cmp	r3, r9
 8001d4c:	d126      	bne.n	8001d9c <__ieee754_powf+0xcc>
 8001d4e:	f005 0501 	and.w	r5, r5, #1
 8001d52:	f1c5 0502 	rsb	r5, r5, #2
 8001d56:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8001d5a:	d122      	bne.n	8001da2 <__ieee754_powf+0xd2>
 8001d5c:	2c00      	cmp	r4, #0
 8001d5e:	f280 826f 	bge.w	8002240 <__ieee754_powf+0x570>
 8001d62:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001d66:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8001d6a:	e7c9      	b.n	8001d00 <__ieee754_powf+0x30>
 8001d6c:	2500      	movs	r5, #0
 8001d6e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8001d72:	d1f0      	bne.n	8001d56 <__ieee754_powf+0x86>
 8001d74:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8001d78:	f000 825c 	beq.w	8002234 <__ieee754_powf+0x564>
 8001d7c:	d908      	bls.n	8001d90 <__ieee754_powf+0xc0>
 8001d7e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 80020e0 <__ieee754_powf+0x410>
 8001d82:	2c00      	cmp	r4, #0
 8001d84:	bfa8      	it	ge
 8001d86:	eeb0 0a68 	vmovge.f32	s0, s17
 8001d8a:	e7b9      	b.n	8001d00 <__ieee754_powf+0x30>
 8001d8c:	2502      	movs	r5, #2
 8001d8e:	e7ee      	b.n	8001d6e <__ieee754_powf+0x9e>
 8001d90:	2c00      	cmp	r4, #0
 8001d92:	f280 8252 	bge.w	800223a <__ieee754_powf+0x56a>
 8001d96:	eeb1 0a68 	vneg.f32	s0, s17
 8001d9a:	e7b1      	b.n	8001d00 <__ieee754_powf+0x30>
 8001d9c:	2500      	movs	r5, #0
 8001d9e:	e7da      	b.n	8001d56 <__ieee754_powf+0x86>
 8001da0:	2500      	movs	r5, #0
 8001da2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8001da6:	d102      	bne.n	8001dae <__ieee754_powf+0xde>
 8001da8:	ee28 0a08 	vmul.f32	s0, s16, s16
 8001dac:	e7a8      	b.n	8001d00 <__ieee754_powf+0x30>
 8001dae:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8001db2:	d109      	bne.n	8001dc8 <__ieee754_powf+0xf8>
 8001db4:	2e00      	cmp	r6, #0
 8001db6:	db07      	blt.n	8001dc8 <__ieee754_powf+0xf8>
 8001db8:	eeb0 0a48 	vmov.f32	s0, s16
 8001dbc:	ecbd 8b02 	vpop	{d8}
 8001dc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dc4:	f000 bae8 	b.w	8002398 <__ieee754_sqrtf>
 8001dc8:	eeb0 0a48 	vmov.f32	s0, s16
 8001dcc:	f000 fa50 	bl	8002270 <fabsf>
 8001dd0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8001dd4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8001dd8:	4647      	mov	r7, r8
 8001dda:	d002      	beq.n	8001de2 <__ieee754_powf+0x112>
 8001ddc:	f1b8 0f00 	cmp.w	r8, #0
 8001de0:	d117      	bne.n	8001e12 <__ieee754_powf+0x142>
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	bfbc      	itt	lt
 8001de6:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8001dea:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8001dee:	2e00      	cmp	r6, #0
 8001df0:	da86      	bge.n	8001d00 <__ieee754_powf+0x30>
 8001df2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8001df6:	ea58 0805 	orrs.w	r8, r8, r5
 8001dfa:	d104      	bne.n	8001e06 <__ieee754_powf+0x136>
 8001dfc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8001e00:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8001e04:	e77c      	b.n	8001d00 <__ieee754_powf+0x30>
 8001e06:	2d01      	cmp	r5, #1
 8001e08:	f47f af7a 	bne.w	8001d00 <__ieee754_powf+0x30>
 8001e0c:	eeb1 0a40 	vneg.f32	s0, s0
 8001e10:	e776      	b.n	8001d00 <__ieee754_powf+0x30>
 8001e12:	0ff0      	lsrs	r0, r6, #31
 8001e14:	3801      	subs	r0, #1
 8001e16:	ea55 0300 	orrs.w	r3, r5, r0
 8001e1a:	d104      	bne.n	8001e26 <__ieee754_powf+0x156>
 8001e1c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8001e20:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8001e24:	e76c      	b.n	8001d00 <__ieee754_powf+0x30>
 8001e26:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8001e2a:	d973      	bls.n	8001f14 <__ieee754_powf+0x244>
 8001e2c:	4bad      	ldr	r3, [pc, #692]	@ (80020e4 <__ieee754_powf+0x414>)
 8001e2e:	4598      	cmp	r8, r3
 8001e30:	d808      	bhi.n	8001e44 <__ieee754_powf+0x174>
 8001e32:	2c00      	cmp	r4, #0
 8001e34:	da0b      	bge.n	8001e4e <__ieee754_powf+0x17e>
 8001e36:	2000      	movs	r0, #0
 8001e38:	ecbd 8b02 	vpop	{d8}
 8001e3c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e40:	f000 baa4 	b.w	800238c <__math_oflowf>
 8001e44:	4ba8      	ldr	r3, [pc, #672]	@ (80020e8 <__ieee754_powf+0x418>)
 8001e46:	4598      	cmp	r8, r3
 8001e48:	d908      	bls.n	8001e5c <__ieee754_powf+0x18c>
 8001e4a:	2c00      	cmp	r4, #0
 8001e4c:	dcf3      	bgt.n	8001e36 <__ieee754_powf+0x166>
 8001e4e:	2000      	movs	r0, #0
 8001e50:	ecbd 8b02 	vpop	{d8}
 8001e54:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e58:	f000 ba92 	b.w	8002380 <__math_uflowf>
 8001e5c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001e60:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001e64:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 80020ec <__ieee754_powf+0x41c>
 8001e68:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8001e6c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8001e70:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8001e74:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8001e78:	ee20 7a00 	vmul.f32	s14, s0, s0
 8001e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e80:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 80020f0 <__ieee754_powf+0x420>
 8001e84:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8001e88:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80020f4 <__ieee754_powf+0x424>
 8001e8c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001e90:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80020f8 <__ieee754_powf+0x428>
 8001e94:	eef0 6a67 	vmov.f32	s13, s15
 8001e98:	eee0 6a07 	vfma.f32	s13, s0, s14
 8001e9c:	ee16 3a90 	vmov	r3, s13
 8001ea0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001ea4:	f023 030f 	bic.w	r3, r3, #15
 8001ea8:	ee06 3a90 	vmov	s13, r3
 8001eac:	eee0 6a47 	vfms.f32	s13, s0, s14
 8001eb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001eb4:	3d01      	subs	r5, #1
 8001eb6:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8001eba:	4305      	orrs	r5, r0
 8001ebc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ec0:	f024 040f 	bic.w	r4, r4, #15
 8001ec4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8001ec8:	bf18      	it	ne
 8001eca:	eeb0 8a47 	vmovne.f32	s16, s14
 8001ece:	ee07 4a10 	vmov	s14, r4
 8001ed2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8001ed6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eee7 0a27 	vfma.f32	s1, s14, s15
 8001ee2:	ee07 4a10 	vmov	s14, r4
 8001ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eea:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8001eee:	ee17 1a10 	vmov	r1, s14
 8001ef2:	2900      	cmp	r1, #0
 8001ef4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8001ef8:	f340 80dd 	ble.w	80020b6 <__ieee754_powf+0x3e6>
 8001efc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8001f00:	f240 80ca 	bls.w	8002098 <__ieee754_powf+0x3c8>
 8001f04:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0c:	bf4c      	ite	mi
 8001f0e:	2001      	movmi	r0, #1
 8001f10:	2000      	movpl	r0, #0
 8001f12:	e791      	b.n	8001e38 <__ieee754_powf+0x168>
 8001f14:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8001f18:	bf01      	itttt	eq
 8001f1a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80020fc <__ieee754_powf+0x42c>
 8001f1e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8001f22:	f06f 0317 	mvneq.w	r3, #23
 8001f26:	ee17 7a90 	vmoveq	r7, s15
 8001f2a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8001f2e:	bf18      	it	ne
 8001f30:	2300      	movne	r3, #0
 8001f32:	3a7f      	subs	r2, #127	@ 0x7f
 8001f34:	441a      	add	r2, r3
 8001f36:	4b72      	ldr	r3, [pc, #456]	@ (8002100 <__ieee754_powf+0x430>)
 8001f38:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8001f3c:	429f      	cmp	r7, r3
 8001f3e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8001f42:	dd06      	ble.n	8001f52 <__ieee754_powf+0x282>
 8001f44:	4b6f      	ldr	r3, [pc, #444]	@ (8002104 <__ieee754_powf+0x434>)
 8001f46:	429f      	cmp	r7, r3
 8001f48:	f340 80a4 	ble.w	8002094 <__ieee754_powf+0x3c4>
 8001f4c:	3201      	adds	r2, #1
 8001f4e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8001f52:	2600      	movs	r6, #0
 8001f54:	4b6c      	ldr	r3, [pc, #432]	@ (8002108 <__ieee754_powf+0x438>)
 8001f56:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001f5a:	ee07 1a10 	vmov	s14, r1
 8001f5e:	edd3 5a00 	vldr	s11, [r3]
 8001f62:	4b6a      	ldr	r3, [pc, #424]	@ (800210c <__ieee754_powf+0x43c>)
 8001f64:	ee75 7a87 	vadd.f32	s15, s11, s14
 8001f68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f6c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8001f70:	1049      	asrs	r1, r1, #1
 8001f72:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8001f76:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8001f7a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8001f7e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8001f82:	ee07 1a90 	vmov	s15, r1
 8001f86:	ee26 5a24 	vmul.f32	s10, s12, s9
 8001f8a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8001f8e:	ee15 7a10 	vmov	r7, s10
 8001f92:	401f      	ands	r7, r3
 8001f94:	ee06 7a90 	vmov	s13, r7
 8001f98:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8001f9c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8001fa0:	ee65 7a05 	vmul.f32	s15, s10, s10
 8001fa4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8001fa8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8002110 <__ieee754_powf+0x440>
 8001fac:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002114 <__ieee754_powf+0x444>
 8001fb0:	eee7 5a87 	vfma.f32	s11, s15, s14
 8001fb4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002118 <__ieee754_powf+0x448>
 8001fb8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8001fbc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80020ec <__ieee754_powf+0x41c>
 8001fc0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8001fc4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800211c <__ieee754_powf+0x44c>
 8001fc8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8001fcc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8002120 <__ieee754_powf+0x450>
 8001fd0:	ee26 6a24 	vmul.f32	s12, s12, s9
 8001fd4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8001fd8:	ee35 7a26 	vadd.f32	s14, s10, s13
 8001fdc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8001fe0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001fe4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8001fe8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8001fec:	eef0 5a67 	vmov.f32	s11, s15
 8001ff0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8001ff4:	ee75 5a87 	vadd.f32	s11, s11, s14
 8001ff8:	ee15 1a90 	vmov	r1, s11
 8001ffc:	4019      	ands	r1, r3
 8001ffe:	ee05 1a90 	vmov	s11, r1
 8002002:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002006:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800200a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002012:	eee6 7a25 	vfma.f32	s15, s12, s11
 8002016:	eeb0 6a67 	vmov.f32	s12, s15
 800201a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800201e:	ee16 1a10 	vmov	r1, s12
 8002022:	4019      	ands	r1, r3
 8002024:	ee06 1a10 	vmov	s12, r1
 8002028:	eeb0 7a46 	vmov.f32	s14, s12
 800202c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8002030:	493c      	ldr	r1, [pc, #240]	@ (8002124 <__ieee754_powf+0x454>)
 8002032:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8002036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800203a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8002128 <__ieee754_powf+0x458>
 800203e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800212c <__ieee754_powf+0x45c>
 8002042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002046:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002130 <__ieee754_powf+0x460>
 800204a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800204e:	ed91 7a00 	vldr	s14, [r1]
 8002052:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002056:	ee07 2a10 	vmov	s14, r2
 800205a:	eef0 6a67 	vmov.f32	s13, s15
 800205e:	4a35      	ldr	r2, [pc, #212]	@ (8002134 <__ieee754_powf+0x464>)
 8002060:	eee6 6a25 	vfma.f32	s13, s12, s11
 8002064:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8002068:	ed92 5a00 	vldr	s10, [r2]
 800206c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002070:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002074:	ee76 6a87 	vadd.f32	s13, s13, s14
 8002078:	ee16 2a90 	vmov	r2, s13
 800207c:	4013      	ands	r3, r2
 800207e:	ee06 3a90 	vmov	s13, r3
 8002082:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002086:	ee37 7a45 	vsub.f32	s14, s14, s10
 800208a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800208e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002092:	e70f      	b.n	8001eb4 <__ieee754_powf+0x1e4>
 8002094:	2601      	movs	r6, #1
 8002096:	e75d      	b.n	8001f54 <__ieee754_powf+0x284>
 8002098:	d152      	bne.n	8002140 <__ieee754_powf+0x470>
 800209a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002138 <__ieee754_powf+0x468>
 800209e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020a2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80020a6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80020aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ae:	f73f af29 	bgt.w	8001f04 <__ieee754_powf+0x234>
 80020b2:	2386      	movs	r3, #134	@ 0x86
 80020b4:	e048      	b.n	8002148 <__ieee754_powf+0x478>
 80020b6:	4a21      	ldr	r2, [pc, #132]	@ (800213c <__ieee754_powf+0x46c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d907      	bls.n	80020cc <__ieee754_powf+0x3fc>
 80020bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80020c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c4:	bf4c      	ite	mi
 80020c6:	2001      	movmi	r0, #1
 80020c8:	2000      	movpl	r0, #0
 80020ca:	e6c1      	b.n	8001e50 <__ieee754_powf+0x180>
 80020cc:	d138      	bne.n	8002140 <__ieee754_powf+0x470>
 80020ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020d2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	dbea      	blt.n	80020b2 <__ieee754_powf+0x3e2>
 80020dc:	e7ee      	b.n	80020bc <__ieee754_powf+0x3ec>
 80020de:	bf00      	nop
 80020e0:	00000000 	.word	0x00000000
 80020e4:	3f7ffff3 	.word	0x3f7ffff3
 80020e8:	3f800007 	.word	0x3f800007
 80020ec:	3eaaaaab 	.word	0x3eaaaaab
 80020f0:	3fb8aa3b 	.word	0x3fb8aa3b
 80020f4:	36eca570 	.word	0x36eca570
 80020f8:	3fb8aa00 	.word	0x3fb8aa00
 80020fc:	4b800000 	.word	0x4b800000
 8002100:	001cc471 	.word	0x001cc471
 8002104:	005db3d6 	.word	0x005db3d6
 8002108:	080024c4 	.word	0x080024c4
 800210c:	fffff000 	.word	0xfffff000
 8002110:	3e6c3255 	.word	0x3e6c3255
 8002114:	3e53f142 	.word	0x3e53f142
 8002118:	3e8ba305 	.word	0x3e8ba305
 800211c:	3edb6db7 	.word	0x3edb6db7
 8002120:	3f19999a 	.word	0x3f19999a
 8002124:	080024b4 	.word	0x080024b4
 8002128:	3f76384f 	.word	0x3f76384f
 800212c:	3f763800 	.word	0x3f763800
 8002130:	369dc3a0 	.word	0x369dc3a0
 8002134:	080024bc 	.word	0x080024bc
 8002138:	3338aa3c 	.word	0x3338aa3c
 800213c:	43160000 	.word	0x43160000
 8002140:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8002144:	d971      	bls.n	800222a <__ieee754_powf+0x55a>
 8002146:	15db      	asrs	r3, r3, #23
 8002148:	3b7e      	subs	r3, #126	@ 0x7e
 800214a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800214e:	4118      	asrs	r0, r3
 8002150:	4408      	add	r0, r1
 8002152:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8002156:	4a3c      	ldr	r2, [pc, #240]	@ (8002248 <__ieee754_powf+0x578>)
 8002158:	3b7f      	subs	r3, #127	@ 0x7f
 800215a:	411a      	asrs	r2, r3
 800215c:	4002      	ands	r2, r0
 800215e:	ee07 2a10 	vmov	s14, r2
 8002162:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8002166:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800216a:	f1c3 0317 	rsb	r3, r3, #23
 800216e:	4118      	asrs	r0, r3
 8002170:	2900      	cmp	r1, #0
 8002172:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002176:	bfb8      	it	lt
 8002178:	4240      	neglt	r0, r0
 800217a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800217e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800224c <__ieee754_powf+0x57c>
 8002182:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8002250 <__ieee754_powf+0x580>
 8002186:	ee17 3a10 	vmov	r3, s14
 800218a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800218e:	f023 030f 	bic.w	r3, r3, #15
 8002192:	ee07 3a10 	vmov	s14, r3
 8002196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800219e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80021a2:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8002254 <__ieee754_powf+0x584>
 80021a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021aa:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80021ae:	eef0 6a67 	vmov.f32	s13, s15
 80021b2:	eee7 6a06 	vfma.f32	s13, s14, s12
 80021b6:	eef0 5a66 	vmov.f32	s11, s13
 80021ba:	eee7 5a46 	vfms.f32	s11, s14, s12
 80021be:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80021c2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80021c6:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8002258 <__ieee754_powf+0x588>
 80021ca:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800225c <__ieee754_powf+0x58c>
 80021ce:	eea7 6a25 	vfma.f32	s12, s14, s11
 80021d2:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8002260 <__ieee754_powf+0x590>
 80021d6:	eee6 5a07 	vfma.f32	s11, s12, s14
 80021da:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8002264 <__ieee754_powf+0x594>
 80021de:	eea5 6a87 	vfma.f32	s12, s11, s14
 80021e2:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8002268 <__ieee754_powf+0x598>
 80021e6:	eee6 5a07 	vfma.f32	s11, s12, s14
 80021ea:	eeb0 6a66 	vmov.f32	s12, s13
 80021ee:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80021f2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80021f6:	ee66 5a86 	vmul.f32	s11, s13, s12
 80021fa:	ee36 6a47 	vsub.f32	s12, s12, s14
 80021fe:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8002202:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8002206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800220e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002212:	ee10 3a10 	vmov	r3, s0
 8002216:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800221a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800221e:	da06      	bge.n	800222e <__ieee754_powf+0x55e>
 8002220:	f000 f82e 	bl	8002280 <scalbnf>
 8002224:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002228:	e56a      	b.n	8001d00 <__ieee754_powf+0x30>
 800222a:	2000      	movs	r0, #0
 800222c:	e7a5      	b.n	800217a <__ieee754_powf+0x4aa>
 800222e:	ee00 3a10 	vmov	s0, r3
 8002232:	e7f7      	b.n	8002224 <__ieee754_powf+0x554>
 8002234:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002238:	e562      	b.n	8001d00 <__ieee754_powf+0x30>
 800223a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800226c <__ieee754_powf+0x59c>
 800223e:	e55f      	b.n	8001d00 <__ieee754_powf+0x30>
 8002240:	eeb0 0a48 	vmov.f32	s0, s16
 8002244:	e55c      	b.n	8001d00 <__ieee754_powf+0x30>
 8002246:	bf00      	nop
 8002248:	ff800000 	.word	0xff800000
 800224c:	3f317218 	.word	0x3f317218
 8002250:	3f317200 	.word	0x3f317200
 8002254:	35bfbe8c 	.word	0x35bfbe8c
 8002258:	b5ddea0e 	.word	0xb5ddea0e
 800225c:	3331bb4c 	.word	0x3331bb4c
 8002260:	388ab355 	.word	0x388ab355
 8002264:	bb360b61 	.word	0xbb360b61
 8002268:	3e2aaaab 	.word	0x3e2aaaab
 800226c:	00000000 	.word	0x00000000

08002270 <fabsf>:
 8002270:	ee10 3a10 	vmov	r3, s0
 8002274:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002278:	ee00 3a10 	vmov	s0, r3
 800227c:	4770      	bx	lr
	...

08002280 <scalbnf>:
 8002280:	ee10 3a10 	vmov	r3, s0
 8002284:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8002288:	d02b      	beq.n	80022e2 <scalbnf+0x62>
 800228a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800228e:	d302      	bcc.n	8002296 <scalbnf+0x16>
 8002290:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002294:	4770      	bx	lr
 8002296:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800229a:	d123      	bne.n	80022e4 <scalbnf+0x64>
 800229c:	4b24      	ldr	r3, [pc, #144]	@ (8002330 <scalbnf+0xb0>)
 800229e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8002334 <scalbnf+0xb4>
 80022a2:	4298      	cmp	r0, r3
 80022a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80022a8:	db17      	blt.n	80022da <scalbnf+0x5a>
 80022aa:	ee10 3a10 	vmov	r3, s0
 80022ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80022b2:	3a19      	subs	r2, #25
 80022b4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80022b8:	4288      	cmp	r0, r1
 80022ba:	dd15      	ble.n	80022e8 <scalbnf+0x68>
 80022bc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8002338 <scalbnf+0xb8>
 80022c0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800233c <scalbnf+0xbc>
 80022c4:	ee10 3a10 	vmov	r3, s0
 80022c8:	eeb0 7a67 	vmov.f32	s14, s15
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bfb8      	it	lt
 80022d0:	eef0 7a66 	vmovlt.f32	s15, s13
 80022d4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80022d8:	4770      	bx	lr
 80022da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002340 <scalbnf+0xc0>
 80022de:	ee27 0a80 	vmul.f32	s0, s15, s0
 80022e2:	4770      	bx	lr
 80022e4:	0dd2      	lsrs	r2, r2, #23
 80022e6:	e7e5      	b.n	80022b4 <scalbnf+0x34>
 80022e8:	4410      	add	r0, r2
 80022ea:	28fe      	cmp	r0, #254	@ 0xfe
 80022ec:	dce6      	bgt.n	80022bc <scalbnf+0x3c>
 80022ee:	2800      	cmp	r0, #0
 80022f0:	dd06      	ble.n	8002300 <scalbnf+0x80>
 80022f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80022f6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80022fa:	ee00 3a10 	vmov	s0, r3
 80022fe:	4770      	bx	lr
 8002300:	f110 0f16 	cmn.w	r0, #22
 8002304:	da09      	bge.n	800231a <scalbnf+0x9a>
 8002306:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8002340 <scalbnf+0xc0>
 800230a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002344 <scalbnf+0xc4>
 800230e:	ee10 3a10 	vmov	r3, s0
 8002312:	eeb0 7a67 	vmov.f32	s14, s15
 8002316:	2b00      	cmp	r3, #0
 8002318:	e7d9      	b.n	80022ce <scalbnf+0x4e>
 800231a:	3019      	adds	r0, #25
 800231c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002320:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8002324:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002348 <scalbnf+0xc8>
 8002328:	ee07 3a90 	vmov	s15, r3
 800232c:	e7d7      	b.n	80022de <scalbnf+0x5e>
 800232e:	bf00      	nop
 8002330:	ffff3cb0 	.word	0xffff3cb0
 8002334:	4c000000 	.word	0x4c000000
 8002338:	7149f2ca 	.word	0x7149f2ca
 800233c:	f149f2ca 	.word	0xf149f2ca
 8002340:	0da24260 	.word	0x0da24260
 8002344:	8da24260 	.word	0x8da24260
 8002348:	33000000 	.word	0x33000000

0800234c <with_errnof>:
 800234c:	b510      	push	{r4, lr}
 800234e:	ed2d 8b02 	vpush	{d8}
 8002352:	eeb0 8a40 	vmov.f32	s16, s0
 8002356:	4604      	mov	r4, r0
 8002358:	f7fe ffe0 	bl	800131c <__errno>
 800235c:	eeb0 0a48 	vmov.f32	s0, s16
 8002360:	ecbd 8b02 	vpop	{d8}
 8002364:	6004      	str	r4, [r0, #0]
 8002366:	bd10      	pop	{r4, pc}

08002368 <xflowf>:
 8002368:	b130      	cbz	r0, 8002378 <xflowf+0x10>
 800236a:	eef1 7a40 	vneg.f32	s15, s0
 800236e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002372:	2022      	movs	r0, #34	@ 0x22
 8002374:	f7ff bfea 	b.w	800234c <with_errnof>
 8002378:	eef0 7a40 	vmov.f32	s15, s0
 800237c:	e7f7      	b.n	800236e <xflowf+0x6>
	...

08002380 <__math_uflowf>:
 8002380:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002388 <__math_uflowf+0x8>
 8002384:	f7ff bff0 	b.w	8002368 <xflowf>
 8002388:	10000000 	.word	0x10000000

0800238c <__math_oflowf>:
 800238c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002394 <__math_oflowf+0x8>
 8002390:	f7ff bfea 	b.w	8002368 <xflowf>
 8002394:	70000000 	.word	0x70000000

08002398 <__ieee754_sqrtf>:
 8002398:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800239c:	4770      	bx	lr
	...

080023a0 <_init>:
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a2:	bf00      	nop
 80023a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a6:	bc08      	pop	{r3}
 80023a8:	469e      	mov	lr, r3
 80023aa:	4770      	bx	lr

080023ac <_fini>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	bf00      	nop
 80023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b2:	bc08      	pop	{r3}
 80023b4:	469e      	mov	lr, r3
 80023b6:	4770      	bx	lr
