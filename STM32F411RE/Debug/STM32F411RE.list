
STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002310  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080024b0  080024b0  000034b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025c4  080025c4  00004060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080025c4  080025c4  000035c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025cc  080025cc  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025cc  080025cc  000035cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025d0  080025d0  000035d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080025d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000060  08002634  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08002634  00004200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000332c  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dec  00000000  00000000  000073bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000350  00000000  00000000  000081a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000251  00000000  00000000  000084f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ca3  00000000  00000000  00008749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005af1  00000000  00000000  0001e3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085416  00000000  00000000  00023edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a92f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010f8  00000000  00000000  000a9338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000aa430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002498 	.word	0x08002498

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08002498 	.word	0x08002498

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <TIM4_Init>:

#include "stm32f4xx.h"
#include <stdint.h>
#include <stdio.h>
#include "gpio.h"
void TIM4_Init(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	RCC->APB1ENR &= ~(1 << 2);                    // Clear TIM4 clock enable (bit 2)
 80002c0:	4b11      	ldr	r3, [pc, #68]	@ (8000308 <TIM4_Init+0x4c>)
 80002c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c4:	4a10      	ldr	r2, [pc, #64]	@ (8000308 <TIM4_Init+0x4c>)
 80002c6:	f023 0304 	bic.w	r3, r3, #4
 80002ca:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1ENR |= (1 << 2);                     // Enable TIM4 clock    TIM4->PSC = 16 - 1;
 80002cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000308 <TIM4_Init+0x4c>)
 80002ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000308 <TIM4_Init+0x4c>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM4->PSC = 16 - 1;                    // Bộ chia tần số: 16 - 1 = 15
 80002d8:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <TIM4_Init+0x50>)
 80002da:	220f      	movs	r2, #15
 80002dc:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = 1000 - 1;       // 1ms (1kHz)
 80002de:	4b0b      	ldr	r3, [pc, #44]	@ (800030c <TIM4_Init+0x50>)
 80002e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM4->DIER |= TIM_DIER_UIE;
 80002e6:	4b09      	ldr	r3, [pc, #36]	@ (800030c <TIM4_Init+0x50>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	4a08      	ldr	r2, [pc, #32]	@ (800030c <TIM4_Init+0x50>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	60d3      	str	r3, [r2, #12]
    TIM4->CR1 |= TIM_CR1_CEN;
 80002f2:	4b06      	ldr	r3, [pc, #24]	@ (800030c <TIM4_Init+0x50>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a05      	ldr	r2, [pc, #20]	@ (800030c <TIM4_Init+0x50>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM4_IRQn);
 80002fe:	201e      	movs	r0, #30
 8000300:	f7ff ffbe 	bl	8000280 <__NVIC_EnableIRQ>
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40023800 	.word	0x40023800
 800030c:	40000800 	.word	0x40000800

08000310 <Buttons_Init>:

void Buttons_Init(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	RCC->APB2ENR &= ~(1 << 14);                    // Clear SYSCFG clock enable (bit 14)
 8000314:	4b1b      	ldr	r3, [pc, #108]	@ (8000384 <Buttons_Init+0x74>)
 8000316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000318:	4a1a      	ldr	r2, [pc, #104]	@ (8000384 <Buttons_Init+0x74>)
 800031a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800031e:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->APB2ENR |= (1 << 14);                     // Enable SYSCFG clock
 8000320:	4b18      	ldr	r3, [pc, #96]	@ (8000384 <Buttons_Init+0x74>)
 8000322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000324:	4a17      	ldr	r2, [pc, #92]	@ (8000384 <Buttons_Init+0x74>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800032a:	6453      	str	r3, [r2, #68]	@ 0x44
    // PA0 và PA1 là input + pull-up
    GPIOA->MODER &= ~((3 << 0) | (3 << 2));  // Input mode
 800032c:	4b16      	ldr	r3, [pc, #88]	@ (8000388 <Buttons_Init+0x78>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a15      	ldr	r2, [pc, #84]	@ (8000388 <Buttons_Init+0x78>)
 8000332:	f023 030f 	bic.w	r3, r3, #15
 8000336:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~((3 << 0) | (3 << 2));
 8000338:	4b13      	ldr	r3, [pc, #76]	@ (8000388 <Buttons_Init+0x78>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	4a12      	ldr	r2, [pc, #72]	@ (8000388 <Buttons_Init+0x78>)
 800033e:	f023 030f 	bic.w	r3, r3, #15
 8000342:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (1 << 0) | (1 << 2);    // Pull-up
 8000344:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <Buttons_Init+0x78>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a0f      	ldr	r2, [pc, #60]	@ (8000388 <Buttons_Init+0x78>)
 800034a:	f043 0305 	orr.w	r3, r3, #5
 800034e:	60d3      	str	r3, [r2, #12]

    // Kết nối EXTI0 và EXTI1 tới PA0 và PA1
    SYSCFG->EXTICR[0] &= ~((0xF << 0) | (0xF << 4));
 8000350:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <Buttons_Init+0x7c>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a0d      	ldr	r2, [pc, #52]	@ (800038c <Buttons_Init+0x7c>)
 8000356:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800035a:	6093      	str	r3, [r2, #8]

    // Cho phép EXTI0 và EXTI1
    EXTI->IMR |= (1 << 0) | (1 << 1);
 800035c:	4b0c      	ldr	r3, [pc, #48]	@ (8000390 <Buttons_Init+0x80>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a0b      	ldr	r2, [pc, #44]	@ (8000390 <Buttons_Init+0x80>)
 8000362:	f043 0303 	orr.w	r3, r3, #3
 8000366:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 0) | (1 << 1); // Ngắt sườn xuống
 8000368:	4b09      	ldr	r3, [pc, #36]	@ (8000390 <Buttons_Init+0x80>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a08      	ldr	r2, [pc, #32]	@ (8000390 <Buttons_Init+0x80>)
 800036e:	f043 0303 	orr.w	r3, r3, #3
 8000372:	60d3      	str	r3, [r2, #12]

    // Bật NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000374:	2006      	movs	r0, #6
 8000376:	f7ff ff83 	bl	8000280 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(EXTI1_IRQn);
 800037a:	2007      	movs	r0, #7
 800037c:	f7ff ff80 	bl	8000280 <__NVIC_EnableIRQ>
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40023800 	.word	0x40023800
 8000388:	40020000 	.word	0x40020000
 800038c:	40013800 	.word	0x40013800
 8000390:	40013c00 	.word	0x40013c00

08000394 <GPIO_Init>:
void GPIO_Init(void) {
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~((1 << 0) | (1 << 1) | (1 << 2));    // Clear GPIOA, GPIOB, GPIOC clock enable (bits 0, 1, 2)
 8000398:	4b23      	ldr	r3, [pc, #140]	@ (8000428 <GPIO_Init+0x94>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039c:	4a22      	ldr	r2, [pc, #136]	@ (8000428 <GPIO_Init+0x94>)
 800039e:	f023 0307 	bic.w	r3, r3, #7
 80003a2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= ((1 << 0) | (1 << 1) | (1 << 2));     // Enable GPIOA, GPIOB, GPIOC clock
 80003a4:	4b20      	ldr	r3, [pc, #128]	@ (8000428 <GPIO_Init+0x94>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a8:	4a1f      	ldr	r2, [pc, #124]	@ (8000428 <GPIO_Init+0x94>)
 80003aa:	f043 0307 	orr.w	r3, r3, #7
 80003ae:	6313      	str	r3, [r2, #48]	@ 0x30
    // PC1 - ADC input
    GPIOC->MODER |= (3 << (1 * 2));  // Analog
 80003b0:	4b1e      	ldr	r3, [pc, #120]	@ (800042c <GPIO_Init+0x98>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a1d      	ldr	r2, [pc, #116]	@ (800042c <GPIO_Init+0x98>)
 80003b6:	f043 030c 	orr.w	r3, r3, #12
 80003ba:	6013      	str	r3, [r2, #0]

    // PA8 - van (output)
    GPIOA->MODER &= ~(3 << (8 * 2));
 80003bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000430 <GPIO_Init+0x9c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000430 <GPIO_Init+0x9c>)
 80003c2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80003c6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (1 << (8 * 2));       // Output
 80003c8:	4b19      	ldr	r3, [pc, #100]	@ (8000430 <GPIO_Init+0x9c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a18      	ldr	r2, [pc, #96]	@ (8000430 <GPIO_Init+0x9c>)
 80003ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80003d2:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1 << 8);            // Push-pull
 80003d4:	4b16      	ldr	r3, [pc, #88]	@ (8000430 <GPIO_Init+0x9c>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	4a15      	ldr	r2, [pc, #84]	@ (8000430 <GPIO_Init+0x9c>)
 80003da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80003de:	6053      	str	r3, [r2, #4]
    GPIOA->ODR &= ~(1 << 8);               // Tắt ban đầu
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <GPIO_Init+0x9c>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a12      	ldr	r2, [pc, #72]	@ (8000430 <GPIO_Init+0x9c>)
 80003e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80003ea:	6153      	str	r3, [r2, #20]

    // PB13 - quạt, PB10 - còi (output)
    GPIOB->MODER &= ~((3 << (13 * 2)) | (3 << (10 * 2)));
 80003ec:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <GPIO_Init+0xa0>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a10      	ldr	r2, [pc, #64]	@ (8000434 <GPIO_Init+0xa0>)
 80003f2:	f023 6343 	bic.w	r3, r3, #204472320	@ 0xc300000
 80003f6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((1 << (13 * 2)) | (1 << (10 * 2))); // Output mode
 80003f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <GPIO_Init+0xa0>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000434 <GPIO_Init+0xa0>)
 80003fe:	f043 6382 	orr.w	r3, r3, #68157440	@ 0x4100000
 8000402:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER &= ~((1 << 13) | (1 << 10)); // Push-pull
 8000404:	4b0b      	ldr	r3, [pc, #44]	@ (8000434 <GPIO_Init+0xa0>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a0a      	ldr	r2, [pc, #40]	@ (8000434 <GPIO_Init+0xa0>)
 800040a:	f423 5310 	bic.w	r3, r3, #9216	@ 0x2400
 800040e:	6053      	str	r3, [r2, #4]
    GPIOB->ODR &= ~((1 << 13) | (1 << 10));    // Tắt ban đầu
 8000410:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <GPIO_Init+0xa0>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a07      	ldr	r2, [pc, #28]	@ (8000434 <GPIO_Init+0xa0>)
 8000416:	f423 5310 	bic.w	r3, r3, #9216	@ 0x2400
 800041a:	6153      	str	r3, [r2, #20]
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40023800 	.word	0x40023800
 800042c:	40020800 	.word	0x40020800
 8000430:	40020000 	.word	0x40020000
 8000434:	40020400 	.word	0x40020400

08000438 <ADC_Init>:

void ADC_Init(void) {
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	RCC->APB2ENR &= ~(1 << 8);                    // Clear ADC1 clock enable (bit 8)
 800043c:	4b17      	ldr	r3, [pc, #92]	@ (800049c <ADC_Init+0x64>)
 800043e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000440:	4a16      	ldr	r2, [pc, #88]	@ (800049c <ADC_Init+0x64>)
 8000442:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000446:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->APB2ENR |= (1 << 8);                     // Enable ADC1 clock
 8000448:	4b14      	ldr	r3, [pc, #80]	@ (800049c <ADC_Init+0x64>)
 800044a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800044c:	4a13      	ldr	r2, [pc, #76]	@ (800049c <ADC_Init+0x64>)
 800044e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000452:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC1->CR2 = 0; // Tắt ADC để cấu hình
 8000454:	4b12      	ldr	r3, [pc, #72]	@ (80004a0 <ADC_Init+0x68>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
    ADC1->SQR1 &= ~(0xF << 20); // 1 lần chuyển đổi
 800045a:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <ADC_Init+0x68>)
 800045c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800045e:	4a10      	ldr	r2, [pc, #64]	@ (80004a0 <ADC_Init+0x68>)
 8000460:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000464:	62d3      	str	r3, [r2, #44]	@ 0x2c
    ADC1->SQR3 = 11; // Kênh 11 (PC1)
 8000466:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <ADC_Init+0x68>)
 8000468:	220b      	movs	r2, #11
 800046a:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->SMPR1 |= (7 << 3); // Sampling time 480 cycles cho kênh 11 (bit 3-5)
 800046c:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <ADC_Init+0x68>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a0b      	ldr	r2, [pc, #44]	@ (80004a0 <ADC_Init+0x68>)
 8000472:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8000476:	60d3      	str	r3, [r2, #12]
    ADC1->CR2 &= ~(1 << 0);                    // Clear ADON bit (bit 0)
 8000478:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <ADC_Init+0x68>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4a08      	ldr	r2, [pc, #32]	@ (80004a0 <ADC_Init+0x68>)
 800047e:	f023 0301 	bic.w	r3, r3, #1
 8000482:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= (1 << 0);                     // Enable ADC (set ADON bit)
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <ADC_Init+0x68>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4a05      	ldr	r2, [pc, #20]	@ (80004a0 <ADC_Init+0x68>)
 800048a:	f043 0301 	orr.w	r3, r3, #1
 800048e:	6093      	str	r3, [r2, #8]
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40023800 	.word	0x40023800
 80004a0:	40012000 	.word	0x40012000

080004a4 <I2C1_Init>:
#include "stm32f4xx.h"
#include <stdint.h>
#include <stdio.h>
#include "i2c.h"
#include "uart.h"
void I2C1_Init(void) {
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80004a8:	4b27      	ldr	r3, [pc, #156]	@ (8000548 <I2C1_Init+0xa4>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ac:	4a26      	ldr	r2, [pc, #152]	@ (8000548 <I2C1_Init+0xa4>)
 80004ae:	f043 0302 	orr.w	r3, r3, #2
 80004b2:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80004b4:	4b24      	ldr	r3, [pc, #144]	@ (8000548 <I2C1_Init+0xa4>)
 80004b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004b8:	4a23      	ldr	r2, [pc, #140]	@ (8000548 <I2C1_Init+0xa4>)
 80004ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004be:	6413      	str	r3, [r2, #64]	@ 0x40

    // Cấu hình PB6 (SCL) & PB9 (SDA) - cả hai là AF4
    GPIOB->MODER &= ~((3 << (6 * 2)) | (3 << (9 * 2)));
 80004c0:	4b22      	ldr	r3, [pc, #136]	@ (800054c <I2C1_Init+0xa8>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a21      	ldr	r2, [pc, #132]	@ (800054c <I2C1_Init+0xa8>)
 80004c6:	f423 2343 	bic.w	r3, r3, #798720	@ 0xc3000
 80004ca:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((2 << (6 * 2)) | (2 << (9 * 2)));
 80004cc:	4b1f      	ldr	r3, [pc, #124]	@ (800054c <I2C1_Init+0xa8>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a1e      	ldr	r2, [pc, #120]	@ (800054c <I2C1_Init+0xa8>)
 80004d2:	f443 2302 	orr.w	r3, r3, #532480	@ 0x82000
 80004d6:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= (1 << 6) | (1 << 9);  // Open-drain
 80004d8:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <I2C1_Init+0xa8>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	4a1b      	ldr	r2, [pc, #108]	@ (800054c <I2C1_Init+0xa8>)
 80004de:	f443 7310 	orr.w	r3, r3, #576	@ 0x240
 80004e2:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR  &= ~((3 << (6 * 2)) | (3 << (9 * 2))); // No pull-up/down
 80004e4:	4b19      	ldr	r3, [pc, #100]	@ (800054c <I2C1_Init+0xa8>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	4a18      	ldr	r2, [pc, #96]	@ (800054c <I2C1_Init+0xa8>)
 80004ea:	f423 2343 	bic.w	r3, r3, #798720	@ 0xc3000
 80004ee:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[0] &= ~(0xF << (6 * 4)); // Clear AF for PB6
 80004f0:	4b16      	ldr	r3, [pc, #88]	@ (800054c <I2C1_Init+0xa8>)
 80004f2:	6a1b      	ldr	r3, [r3, #32]
 80004f4:	4a15      	ldr	r2, [pc, #84]	@ (800054c <I2C1_Init+0xa8>)
 80004f6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80004fa:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |=  (4 << (6 * 4));   // AF4 for PB6 (SCL)
 80004fc:	4b13      	ldr	r3, [pc, #76]	@ (800054c <I2C1_Init+0xa8>)
 80004fe:	6a1b      	ldr	r3, [r3, #32]
 8000500:	4a12      	ldr	r2, [pc, #72]	@ (800054c <I2C1_Init+0xa8>)
 8000502:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000506:	6213      	str	r3, [r2, #32]

    GPIOB->AFR[1] &= ~(0xF << ((9 - 8) * 4)); // Clear AF for PB9
 8000508:	4b10      	ldr	r3, [pc, #64]	@ (800054c <I2C1_Init+0xa8>)
 800050a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800050c:	4a0f      	ldr	r2, [pc, #60]	@ (800054c <I2C1_Init+0xa8>)
 800050e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000512:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << ((9 - 8) * 4));   // AF4 for PB9 (SDA)
 8000514:	4b0d      	ldr	r3, [pc, #52]	@ (800054c <I2C1_Init+0xa8>)
 8000516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000518:	4a0c      	ldr	r2, [pc, #48]	@ (800054c <I2C1_Init+0xa8>)
 800051a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800051e:	6253      	str	r3, [r2, #36]	@ 0x24

    // Cấu hình tốc độ I2C 100kHz @16MHz
    I2C1->CR2 = 16;
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <I2C1_Init+0xac>)
 8000522:	2210      	movs	r2, #16
 8000524:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80;
 8000526:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <I2C1_Init+0xac>)
 8000528:	2250      	movs	r2, #80	@ 0x50
 800052a:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;
 800052c:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <I2C1_Init+0xac>)
 800052e:	2211      	movs	r2, #17
 8000530:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 8000532:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <I2C1_Init+0xac>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a06      	ldr	r2, [pc, #24]	@ (8000550 <I2C1_Init+0xac>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	40023800 	.word	0x40023800
 800054c:	40020400 	.word	0x40020400
 8000550:	40005400 	.word	0x40005400

08000554 <I2C_Scan>:
// ===== I2C SCAN =====
void I2C_Scan(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	@ 0x28
 8000558:	af00      	add	r7, sp, #0
    char msg[32];
    USART1_SendString("Scanning I2C bus...\r\n");
 800055a:	4832      	ldr	r0, [pc, #200]	@ (8000624 <I2C_Scan+0xd0>)
 800055c:	f000 fe7a 	bl	8001254 <USART1_SendString>
    for (uint8_t addr = 0x08; addr <= 0x77; addr++) {
 8000560:	2308      	movs	r3, #8
 8000562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000566:	e051      	b.n	800060c <I2C_Scan+0xb8>
        I2C1->CR1 |= I2C_CR1_START;
 8000568:	4b2f      	ldr	r3, [pc, #188]	@ (8000628 <I2C_Scan+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a2e      	ldr	r2, [pc, #184]	@ (8000628 <I2C_Scan+0xd4>)
 800056e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000572:	6013      	str	r3, [r2, #0]
        while (!(I2C1->SR1 & I2C_SR1_SB));
 8000574:	bf00      	nop
 8000576:	4b2c      	ldr	r3, [pc, #176]	@ (8000628 <I2C_Scan+0xd4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <I2C_Scan+0x22>
        (void)I2C1->SR1;
 8000582:	4b29      	ldr	r3, [pc, #164]	@ (8000628 <I2C_Scan+0xd4>)
 8000584:	695b      	ldr	r3, [r3, #20]
        I2C1->DR = addr << 1;
 8000586:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800058a:	4a27      	ldr	r2, [pc, #156]	@ (8000628 <I2C_Scan+0xd4>)
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	6113      	str	r3, [r2, #16]

        uint32_t timeout = 1000;
 8000590:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000594:	623b      	str	r3, [r7, #32]
        while (!(I2C1->SR1 & (I2C_SR1_ADDR | I2C_SR1_AF)) && --timeout);
 8000596:	bf00      	nop
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <I2C_Scan+0xd4>)
 800059a:	695a      	ldr	r2, [r3, #20]
 800059c:	f240 4302 	movw	r3, #1026	@ 0x402
 80005a0:	4013      	ands	r3, r2
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d105      	bne.n	80005b2 <I2C_Scan+0x5e>
 80005a6:	6a3b      	ldr	r3, [r7, #32]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
 80005ac:	6a3b      	ldr	r3, [r7, #32]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1f2      	bne.n	8000598 <I2C_Scan+0x44>

        if (I2C1->SR1 & I2C_SR1_ADDR) {
 80005b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000628 <I2C_Scan+0xd4>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d015      	beq.n	80005ea <I2C_Scan+0x96>
            (void)I2C1->SR1;
 80005be:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <I2C_Scan+0xd4>)
 80005c0:	695b      	ldr	r3, [r3, #20]
            (void)I2C1->SR2;
 80005c2:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <I2C_Scan+0xd4>)
 80005c4:	699b      	ldr	r3, [r3, #24]
            I2C1->CR1 |= I2C_CR1_STOP;
 80005c6:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <I2C_Scan+0xd4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a17      	ldr	r2, [pc, #92]	@ (8000628 <I2C_Scan+0xd4>)
 80005cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005d0:	6013      	str	r3, [r2, #0]
            sprintf(msg, "Found device at 0x%02X\r\n", addr);
 80005d2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80005d6:	463b      	mov	r3, r7
 80005d8:	4914      	ldr	r1, [pc, #80]	@ (800062c <I2C_Scan+0xd8>)
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fefc 	bl	80013d8 <siprintf>
            USART1_SendString(msg);
 80005e0:	463b      	mov	r3, r7
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fe36 	bl	8001254 <USART1_SendString>
 80005e8:	e00b      	b.n	8000602 <I2C_Scan+0xae>
        } else {
            I2C1->CR1 |= I2C_CR1_STOP;
 80005ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <I2C_Scan+0xd4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <I2C_Scan+0xd4>)
 80005f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005f4:	6013      	str	r3, [r2, #0]
            I2C1->SR1 &= ~I2C_SR1_AF;
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <I2C_Scan+0xd4>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000628 <I2C_Scan+0xd4>)
 80005fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000600:	6153      	str	r3, [r2, #20]
    for (uint8_t addr = 0x08; addr <= 0x77; addr++) {
 8000602:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000606:	3301      	adds	r3, #1
 8000608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800060c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000610:	2b77      	cmp	r3, #119	@ 0x77
 8000612:	d9a9      	bls.n	8000568 <I2C_Scan+0x14>
        }
    }
    USART1_SendString("I2C scan completed.\r\n");
 8000614:	4806      	ldr	r0, [pc, #24]	@ (8000630 <I2C_Scan+0xdc>)
 8000616:	f000 fe1d 	bl	8001254 <USART1_SendString>
}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	@ 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	080024b0 	.word	0x080024b0
 8000628:	40005400 	.word	0x40005400
 800062c:	080024c8 	.word	0x080024c8
 8000630:	080024e4 	.word	0x080024e4

08000634 <I2C1_WriteByte>:

void I2C1_WriteByte(uint8_t addr, uint8_t data) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	460a      	mov	r2, r1
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	4613      	mov	r3, r2
 8000642:	71bb      	strb	r3, [r7, #6]
    I2C1->CR1 |= I2C_CR1_START;
 8000644:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <I2C1_WriteByte+0x84>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <I2C1_WriteByte+0x84>)
 800064a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800064e:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8000650:	bf00      	nop
 8000652:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <I2C1_WriteByte+0x84>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <I2C1_WriteByte+0x1e>
    (void)I2C1->SR1;
 800065e:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <I2C1_WriteByte+0x84>)
 8000660:	695b      	ldr	r3, [r3, #20]
    I2C1->DR = addr;
 8000662:	4a15      	ldr	r2, [pc, #84]	@ (80006b8 <I2C1_WriteByte+0x84>)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000668:	bf00      	nop
 800066a:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <I2C1_WriteByte+0x84>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0f9      	beq.n	800066a <I2C1_WriteByte+0x36>
    (void)I2C1->SR1;
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <I2C1_WriteByte+0x84>)
 8000678:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <I2C1_WriteByte+0x84>)
 800067c:	699b      	ldr	r3, [r3, #24]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 800067e:	bf00      	nop
 8000680:	4b0d      	ldr	r3, [pc, #52]	@ (80006b8 <I2C1_WriteByte+0x84>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000688:	2b00      	cmp	r3, #0
 800068a:	d0f9      	beq.n	8000680 <I2C1_WriteByte+0x4c>
    I2C1->DR = data;
 800068c:	4a0a      	ldr	r2, [pc, #40]	@ (80006b8 <I2C1_WriteByte+0x84>)
 800068e:	79bb      	ldrb	r3, [r7, #6]
 8000690:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000692:	bf00      	nop
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <I2C1_WriteByte+0x84>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0f9      	beq.n	8000694 <I2C1_WriteByte+0x60>
    I2C1->CR1 |= I2C_CR1_STOP;
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <I2C1_WriteByte+0x84>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <I2C1_WriteByte+0x84>)
 80006a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	40005400 	.word	0x40005400

080006bc <lcd_send_cmd>:
#include <stdio.h>
#include "lcd.h"
#include "i2c.h"
#include "main.h"

void lcd_send_cmd(uint8_t cmd) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
    uint8_t high = cmd & 0xF0;
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	f023 030f 	bic.w	r3, r3, #15
 80006cc:	74fb      	strb	r3, [r7, #19]
    uint8_t low  = (cmd << 4) & 0xF0;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = {
 80006d4:	7cfb      	ldrb	r3, [r7, #19]
 80006d6:	f043 030c 	orr.w	r3, r3, #12
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	733b      	strb	r3, [r7, #12]
 80006de:	7cfb      	ldrb	r3, [r7, #19]
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	737b      	strb	r3, [r7, #13]
 80006e8:	7cbb      	ldrb	r3, [r7, #18]
 80006ea:	f043 030c 	orr.w	r3, r3, #12
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73bb      	strb	r3, [r7, #14]
 80006f2:	7cbb      	ldrb	r3, [r7, #18]
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	73fb      	strb	r3, [r7, #15]
        high | 0x0C,
        high | 0x08,
        low  | 0x0C,
        low  | 0x08
    };
    for (int i = 0; i < 4; i++) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e00e      	b.n	8000720 <lcd_send_cmd+0x64>
        I2C1_WriteByte(LCD_ADDR, data_t[i]);
 8000702:	f107 020c 	add.w	r2, r7, #12
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	204e      	movs	r0, #78	@ 0x4e
 8000710:	f7ff ff90 	bl	8000634 <I2C1_WriteByte>
        delay(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f000 fb07 	bl	8000d28 <delay>
    for (int i = 0; i < 4; i++) {
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	3301      	adds	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	2b03      	cmp	r3, #3
 8000724:	dded      	ble.n	8000702 <lcd_send_cmd+0x46>
    }
}
 8000726:	bf00      	nop
 8000728:	bf00      	nop
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
    uint8_t high = data & 0xF0;
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f023 030f 	bic.w	r3, r3, #15
 8000740:	74fb      	strb	r3, [r7, #19]
    uint8_t low  = (data << 4) & 0xF0;
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	74bb      	strb	r3, [r7, #18]
    uint8_t data_t[4] = {
 8000748:	7cfb      	ldrb	r3, [r7, #19]
 800074a:	f043 030d 	orr.w	r3, r3, #13
 800074e:	b2db      	uxtb	r3, r3
 8000750:	733b      	strb	r3, [r7, #12]
 8000752:	7cfb      	ldrb	r3, [r7, #19]
 8000754:	f043 0309 	orr.w	r3, r3, #9
 8000758:	b2db      	uxtb	r3, r3
 800075a:	737b      	strb	r3, [r7, #13]
 800075c:	7cbb      	ldrb	r3, [r7, #18]
 800075e:	f043 030d 	orr.w	r3, r3, #13
 8000762:	b2db      	uxtb	r3, r3
 8000764:	73bb      	strb	r3, [r7, #14]
 8000766:	7cbb      	ldrb	r3, [r7, #18]
 8000768:	f043 0309 	orr.w	r3, r3, #9
 800076c:	b2db      	uxtb	r3, r3
 800076e:	73fb      	strb	r3, [r7, #15]
        high | 0x0D,
        high | 0x09,
        low  | 0x0D,
        low  | 0x09
    };
    for (int i = 0; i < 4; i++) {
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	e00e      	b.n	8000794 <lcd_send_data+0x64>
        I2C1_WriteByte(LCD_ADDR, data_t[i]);
 8000776:	f107 020c 	add.w	r2, r7, #12
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	4413      	add	r3, r2
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	204e      	movs	r0, #78	@ 0x4e
 8000784:	f7ff ff56 	bl	8000634 <I2C1_WriteByte>
        delay(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f000 facd 	bl	8000d28 <delay>
    for (int i = 0; i < 4; i++) {
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	3301      	adds	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	2b03      	cmp	r3, #3
 8000798:	dded      	ble.n	8000776 <lcd_send_data+0x46>
    }
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <lcd_init>:

void lcd_init(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    delay(100); // Cho LCD đủ thời gian lên nguồn
 80007a8:	2064      	movs	r0, #100	@ 0x64
 80007aa:	f000 fabd 	bl	8000d28 <delay>
    lcd_send_cmd(0x33);
 80007ae:	2033      	movs	r0, #51	@ 0x33
 80007b0:	f7ff ff84 	bl	80006bc <lcd_send_cmd>
    lcd_send_cmd(0x32);
 80007b4:	2032      	movs	r0, #50	@ 0x32
 80007b6:	f7ff ff81 	bl	80006bc <lcd_send_cmd>
    lcd_send_cmd(0x28);
 80007ba:	2028      	movs	r0, #40	@ 0x28
 80007bc:	f7ff ff7e 	bl	80006bc <lcd_send_cmd>
    lcd_send_cmd(0x0C);
 80007c0:	200c      	movs	r0, #12
 80007c2:	f7ff ff7b 	bl	80006bc <lcd_send_cmd>
    lcd_send_cmd(0x06);
 80007c6:	2006      	movs	r0, #6
 80007c8:	f7ff ff78 	bl	80006bc <lcd_send_cmd>
    lcd_send_cmd(0x01);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ff75 	bl	80006bc <lcd_send_cmd>
    delay(2);
 80007d2:	2002      	movs	r0, #2
 80007d4:	f000 faa8 	bl	8000d28 <delay>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}

080007dc <lcd_send_string>:

void lcd_send_string(char *str) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    while (*str) {
 80007e4:	e006      	b.n	80007f4 <lcd_send_string+0x18>
        lcd_send_data(*str++);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff9e 	bl	8000730 <lcd_send_data>
    while (*str) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f4      	bne.n	80007e6 <lcd_send_string+0xa>
    }
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <lcd_set_cursor>:
void lcd_set_cursor(uint8_t row, uint8_t col) {
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	460a      	mov	r2, r1
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	4613      	mov	r3, r2
 8000814:	71bb      	strb	r3, [r7, #6]
    lcd_send_cmd((row == 0 ? 0x80 : 0xC0) + col);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d101      	bne.n	8000820 <lcd_set_cursor+0x1a>
 800081c:	2280      	movs	r2, #128	@ 0x80
 800081e:	e000      	b.n	8000822 <lcd_set_cursor+0x1c>
 8000820:	22c0      	movs	r2, #192	@ 0xc0
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	4413      	add	r3, r2
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff47 	bl	80006bc <lcd_send_cmd>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800083c:	f3bf 8f4f 	dsb	sy
}
 8000840:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <__NVIC_SystemReset+0x24>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800084a:	4904      	ldr	r1, [pc, #16]	@ (800085c <__NVIC_SystemReset+0x24>)
 800084c:	4b04      	ldr	r3, [pc, #16]	@ (8000860 <__NVIC_SystemReset+0x28>)
 800084e:	4313      	orrs	r3, r2
 8000850:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000852:	f3bf 8f4f 	dsb	sy
}
 8000856:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <__NVIC_SystemReset+0x20>
 800085c:	e000ed00 	.word	0xe000ed00
 8000860:	05fa0004 	.word	0x05fa0004

08000864 <MQ2_ConvertPPM>:
#include <math.h>

#define VREF   3.3f
#define ADC_MAX 4095.0f

float MQ2_ConvertPPM(uint16_t adc_value) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	80fb      	strh	r3, [r7, #6]
    float voltage = (adc_value * 3.3f) / 4095.0f;
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	ee07 3a90 	vmov	s15, r3
 8000874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000878:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80008ec <MQ2_ConvertPPM+0x88>
 800087c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000880:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80008f0 <MQ2_ConvertPPM+0x8c>
 8000884:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000888:	edc7 7a07 	vstr	s15, [r7, #28]
    float Rs = (3.3f - voltage) * 10.0f / voltage; // RL = 10k
 800088c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80008ec <MQ2_ConvertPPM+0x88>
 8000890:	edd7 7a07 	vldr	s15, [r7, #28]
 8000894:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000898:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800089c:	ee67 6a87 	vmul.f32	s13, s15, s14
 80008a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80008a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008a8:	edc7 7a06 	vstr	s15, [r7, #24]
    float R0 = 92.8f;  // Đặt theo giá trị đo thực tế
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MQ2_ConvertPPM+0x90>)
 80008ae:	617b      	str	r3, [r7, #20]
    float ratio = Rs / R0;
 80008b0:	edd7 6a06 	vldr	s13, [r7, #24]
 80008b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80008b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008bc:	edc7 7a04 	vstr	s15, [r7, #16]
    float ppm = 400.0f * powf(ratio, -1.5f);  // Thử với -1.4f hoặc -1.3f nếu cần hạ nhạy
 80008c0:	eeff 0a08 	vmov.f32	s1, #248	@ 0xbfc00000 -1.5
 80008c4:	ed97 0a04 	vldr	s0, [r7, #16]
 80008c8:	f001 fa1e 	bl	8001d08 <powf>
 80008cc:	eef0 7a40 	vmov.f32	s15, s0
 80008d0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80008f8 <MQ2_ConvertPPM+0x94>
 80008d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d8:	edc7 7a03 	vstr	s15, [r7, #12]
    return ppm;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	ee07 3a90 	vmov	s15, r3
}
 80008e2:	eeb0 0a67 	vmov.f32	s0, s15
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40533333 	.word	0x40533333
 80008f0:	457ff000 	.word	0x457ff000
 80008f4:	42b9999a 	.word	0x42b9999a
 80008f8:	43c80000 	.word	0x43c80000

080008fc <detect_gas_level>:
    GAS_NONE = 0,        // 0 – Không có khí
    GAS_LOW = 1,             // 1 – Nồng độ thấp
    GAS_HIGH = 2,            // 2 – Nồng độ cao
    GAS_DANGEROUS = 3        // 3 – Nguy hiểm
} GasState;
GasState detect_gas_level(uint32_t adc) {
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	    if (adc < 400) return GAS_NONE;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800090a:	d201      	bcs.n	8000910 <detect_gas_level+0x14>
 800090c:	2300      	movs	r3, #0
 800090e:	e00c      	b.n	800092a <detect_gas_level+0x2e>
	    else if (adc < 500) return GAS_LOW;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000916:	d201      	bcs.n	800091c <detect_gas_level+0x20>
 8000918:	2301      	movs	r3, #1
 800091a:	e006      	b.n	800092a <detect_gas_level+0x2e>
	    else if (adc < 700) return GAS_HIGH;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000922:	d201      	bcs.n	8000928 <detect_gas_level+0x2c>
 8000924:	2302      	movs	r3, #2
 8000926:	e000      	b.n	800092a <detect_gas_level+0x2e>
	    else return GAS_DANGEROUS;
 8000928:	2303      	movs	r3, #3
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <handle_gas_state>:
static uint32_t last_toggle = 0;
static uint8_t toggle = 0;

void handle_gas_state(GasState state, SystemState sys,uint32_t x) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	603a      	str	r2, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	460b      	mov	r3, r1
 8000946:	71bb      	strb	r3, [r7, #6]
    static GasState prev_state = -1;
    static SystemState prev = -1;

    if ((state != prev_state) || (sys != prev)) {
 8000948:	4b8b      	ldr	r3, [pc, #556]	@ (8000b78 <handle_gas_state+0x240>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	79fa      	ldrb	r2, [r7, #7]
 800094e:	429a      	cmp	r2, r3
 8000950:	d105      	bne.n	800095e <handle_gas_state+0x26>
 8000952:	4b8a      	ldr	r3, [pc, #552]	@ (8000b7c <handle_gas_state+0x244>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	79ba      	ldrb	r2, [r7, #6]
 8000958:	429a      	cmp	r2, r3
 800095a:	f000 80a3 	beq.w	8000aa4 <handle_gas_state+0x16c>
        lcd_set_cursor(1, 0);
 800095e:	2100      	movs	r1, #0
 8000960:	2001      	movs	r0, #1
 8000962:	f7ff ff50 	bl	8000806 <lcd_set_cursor>

        if (sys == SYS_IDLE) {
 8000966:	79bb      	ldrb	r3, [r7, #6]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d114      	bne.n	8000996 <handle_gas_state+0x5e>
            RGB_SetPWM(0, 255, 0);  // LED xanh lá
 800096c:	2200      	movs	r2, #0
 800096e:	21ff      	movs	r1, #255	@ 0xff
 8000970:	2000      	movs	r0, #0
 8000972:	f000 faf1 	bl	8000f58 <RGB_SetPWM>
            lcd_send_string("Idle ");
 8000976:	4882      	ldr	r0, [pc, #520]	@ (8000b80 <handle_gas_state+0x248>)
 8000978:	f7ff ff30 	bl	80007dc <lcd_send_string>
            // Tắt hết thiết bị: Quạt PB13, Van PA8, Còi PB10
            GPIOB->BSRR = (1 << 13);          // PB13 HIGH → Quạt TẮT
 800097c:	4b81      	ldr	r3, [pc, #516]	@ (8000b84 <handle_gas_state+0x24c>)
 800097e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000982:	619a      	str	r2, [r3, #24]
            GPIOA->BSRR = (1 << 8);           // PA8 HIGH  → Van TẮT
 8000984:	4b80      	ldr	r3, [pc, #512]	@ (8000b88 <handle_gas_state+0x250>)
 8000986:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800098a:	619a      	str	r2, [r3, #24]
            GPIOB->BSRR = (1 << (10 + 16));   // PB10 LOW  → Còi TẮT
 800098c:	4b7d      	ldr	r3, [pc, #500]	@ (8000b84 <handle_gas_state+0x24c>)
 800098e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000992:	619a      	str	r2, [r3, #24]
 8000994:	e080      	b.n	8000a98 <handle_gas_state+0x160>
        } else {
            switch (state) {
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b03      	cmp	r3, #3
 800099a:	d87d      	bhi.n	8000a98 <handle_gas_state+0x160>
 800099c:	a201      	add	r2, pc, #4	@ (adr r2, 80009a4 <handle_gas_state+0x6c>)
 800099e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a2:	bf00      	nop
 80009a4:	080009b5 	.word	0x080009b5
 80009a8:	080009df 	.word	0x080009df
 80009ac:	08000a09 	.word	0x08000a09
 80009b0:	08000a51 	.word	0x08000a51
                case GAS_NONE:
                    RGB_SetPWM(0, 0, 255);  // Xanh dương
 80009b4:	22ff      	movs	r2, #255	@ 0xff
 80009b6:	2100      	movs	r1, #0
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 facd 	bl	8000f58 <RGB_SetPWM>
                    lcd_send_string("0     ");
 80009be:	4873      	ldr	r0, [pc, #460]	@ (8000b8c <handle_gas_state+0x254>)
 80009c0:	f7ff ff0c 	bl	80007dc <lcd_send_string>
                    GPIOB->BSRR = (1 << 13);         // Quạt TẮT
 80009c4:	4b6f      	ldr	r3, [pc, #444]	@ (8000b84 <handle_gas_state+0x24c>)
 80009c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ca:	619a      	str	r2, [r3, #24]
                    GPIOA->BSRR = (1 << 8 );   // Van BẬT
 80009cc:	4b6e      	ldr	r3, [pc, #440]	@ (8000b88 <handle_gas_state+0x250>)
 80009ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009d2:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = (1 << (10 + 16));  // Còi TẮT
 80009d4:	4b6b      	ldr	r3, [pc, #428]	@ (8000b84 <handle_gas_state+0x24c>)
 80009d6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009da:	619a      	str	r2, [r3, #24]
                    break;
 80009dc:	e05c      	b.n	8000a98 <handle_gas_state+0x160>

                case GAS_LOW:
                    RGB_SetPWM(255, 255, 0); // Vàng
 80009de:	2200      	movs	r2, #0
 80009e0:	21ff      	movs	r1, #255	@ 0xff
 80009e2:	20ff      	movs	r0, #255	@ 0xff
 80009e4:	f000 fab8 	bl	8000f58 <RGB_SetPWM>
                    lcd_send_string("1     ");
 80009e8:	4869      	ldr	r0, [pc, #420]	@ (8000b90 <handle_gas_state+0x258>)
 80009ea:	f7ff fef7 	bl	80007dc <lcd_send_string>
                    GPIOB->BSRR = (1 << (13 + 16));  // Quạt BẬT
 80009ee:	4b65      	ldr	r3, [pc, #404]	@ (8000b84 <handle_gas_state+0x24c>)
 80009f0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80009f4:	619a      	str	r2, [r3, #24]
                    GPIOA->BSRR = (1 << 8);          // Van TẮT
 80009f6:	4b64      	ldr	r3, [pc, #400]	@ (8000b88 <handle_gas_state+0x250>)
 80009f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009fc:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = (1 << (10 + 16));  // Còi TẮT
 80009fe:	4b61      	ldr	r3, [pc, #388]	@ (8000b84 <handle_gas_state+0x24c>)
 8000a00:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a04:	619a      	str	r2, [r3, #24]
                    break;
 8000a06:	e047      	b.n	8000a98 <handle_gas_state+0x160>

                case GAS_HIGH:
            	    sprintf(msg, "%lu\r\n", x);
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	4962      	ldr	r1, [pc, #392]	@ (8000b94 <handle_gas_state+0x25c>)
 8000a0c:	4862      	ldr	r0, [pc, #392]	@ (8000b98 <handle_gas_state+0x260>)
 8000a0e:	f000 fce3 	bl	80013d8 <siprintf>
            	    USART1_SendString(msg);
 8000a12:	4861      	ldr	r0, [pc, #388]	@ (8000b98 <handle_gas_state+0x260>)
 8000a14:	f000 fc1e 	bl	8001254 <USART1_SendString>
                    last_toggle = millis;
 8000a18:	4b60      	ldr	r3, [pc, #384]	@ (8000b9c <handle_gas_state+0x264>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a60      	ldr	r2, [pc, #384]	@ (8000ba0 <handle_gas_state+0x268>)
 8000a1e:	6013      	str	r3, [r2, #0]
                    toggle = 1;
 8000a20:	4b60      	ldr	r3, [pc, #384]	@ (8000ba4 <handle_gas_state+0x26c>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
                    RGB_SetPWM(255, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	20ff      	movs	r0, #255	@ 0xff
 8000a2c:	f000 fa94 	bl	8000f58 <RGB_SetPWM>
                    lcd_send_string("2     ");
 8000a30:	485d      	ldr	r0, [pc, #372]	@ (8000ba8 <handle_gas_state+0x270>)
 8000a32:	f7ff fed3 	bl	80007dc <lcd_send_string>
                    GPIOB->BSRR = (1 << (13 + 16));  // Quạt BẬT
 8000a36:	4b53      	ldr	r3, [pc, #332]	@ (8000b84 <handle_gas_state+0x24c>)
 8000a38:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000a3c:	619a      	str	r2, [r3, #24]
                    GPIOA->BSRR = (1 << (8 + 16));   // Van BẬT
 8000a3e:	4b52      	ldr	r3, [pc, #328]	@ (8000b88 <handle_gas_state+0x250>)
 8000a40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a44:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = (1 << 10);         // Còi BẬT
 8000a46:	4b4f      	ldr	r3, [pc, #316]	@ (8000b84 <handle_gas_state+0x24c>)
 8000a48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a4c:	619a      	str	r2, [r3, #24]
                    break;
 8000a4e:	e023      	b.n	8000a98 <handle_gas_state+0x160>

                case GAS_DANGEROUS:
            	    sprintf(msg, "%lu\r\n", x);
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	4950      	ldr	r1, [pc, #320]	@ (8000b94 <handle_gas_state+0x25c>)
 8000a54:	4850      	ldr	r0, [pc, #320]	@ (8000b98 <handle_gas_state+0x260>)
 8000a56:	f000 fcbf 	bl	80013d8 <siprintf>
            	    USART1_SendString(msg);
 8000a5a:	484f      	ldr	r0, [pc, #316]	@ (8000b98 <handle_gas_state+0x260>)
 8000a5c:	f000 fbfa 	bl	8001254 <USART1_SendString>
                    last_toggle = millis;
 8000a60:	4b4e      	ldr	r3, [pc, #312]	@ (8000b9c <handle_gas_state+0x264>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a4e      	ldr	r2, [pc, #312]	@ (8000ba0 <handle_gas_state+0x268>)
 8000a66:	6013      	str	r3, [r2, #0]
                    toggle = 1;
 8000a68:	4b4e      	ldr	r3, [pc, #312]	@ (8000ba4 <handle_gas_state+0x26c>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
                    RGB_SetPWM(255, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	20ff      	movs	r0, #255	@ 0xff
 8000a74:	f000 fa70 	bl	8000f58 <RGB_SetPWM>
                    lcd_send_string("3     ");
 8000a78:	484c      	ldr	r0, [pc, #304]	@ (8000bac <handle_gas_state+0x274>)
 8000a7a:	f7ff feaf 	bl	80007dc <lcd_send_string>
                    GPIOB->BSRR = (1 << (13 + 16));  // Quạt BẬT
 8000a7e:	4b41      	ldr	r3, [pc, #260]	@ (8000b84 <handle_gas_state+0x24c>)
 8000a80:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000a84:	619a      	str	r2, [r3, #24]
                    GPIOA->BSRR = (1 << (8 + 16));   // Van BẬT
 8000a86:	4b40      	ldr	r3, [pc, #256]	@ (8000b88 <handle_gas_state+0x250>)
 8000a88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a8c:	619a      	str	r2, [r3, #24]
                    GPIOB->BSRR = (1 << 10);         // Còi BẬT
 8000a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b84 <handle_gas_state+0x24c>)
 8000a90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a94:	619a      	str	r2, [r3, #24]
                    break;
 8000a96:	bf00      	nop
            }
        }

        prev_state = state;
 8000a98:	4a37      	ldr	r2, [pc, #220]	@ (8000b78 <handle_gas_state+0x240>)
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	7013      	strb	r3, [r2, #0]
        prev = sys;
 8000a9e:	4a37      	ldr	r2, [pc, #220]	@ (8000b7c <handle_gas_state+0x244>)
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	7013      	strb	r3, [r2, #0]
    }

    // Nháy LED đỏ nếu cần
    if (sys == SYS_ACTIVE) {
 8000aa4:	79bb      	ldrb	r3, [r7, #6]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d161      	bne.n	8000b6e <handle_gas_state+0x236>
        if (state == GAS_HIGH && millis - last_toggle >= 500) {
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d11b      	bne.n	8000ae8 <handle_gas_state+0x1b0>
 8000ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8000b9c <handle_gas_state+0x264>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ba0 <handle_gas_state+0x268>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000abe:	d313      	bcc.n	8000ae8 <handle_gas_state+0x1b0>
            toggle ^= 1;
 8000ac0:	4b38      	ldr	r3, [pc, #224]	@ (8000ba4 <handle_gas_state+0x26c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	f083 0301 	eor.w	r3, r3, #1
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b36      	ldr	r3, [pc, #216]	@ (8000ba4 <handle_gas_state+0x26c>)
 8000acc:	701a      	strb	r2, [r3, #0]
            RGB_SetPWM(toggle * 255, 0, 0);
 8000ace:	4b35      	ldr	r3, [pc, #212]	@ (8000ba4 <handle_gas_state+0x26c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	425b      	negs	r3, r3
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fa3c 	bl	8000f58 <RGB_SetPWM>
            last_toggle = millis;
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b9c <handle_gas_state+0x264>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8000ba0 <handle_gas_state+0x268>)
 8000ae6:	6013      	str	r3, [r2, #0]
        }

        if (state == GAS_DANGEROUS) {
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d13f      	bne.n	8000b6e <handle_gas_state+0x236>
            int min_delay = 10;
 8000aee:	230a      	movs	r3, #10
 8000af0:	617b      	str	r3, [r7, #20]
            int max_delay = 200;
 8000af2:	23c8      	movs	r3, #200	@ 0xc8
 8000af4:	613b      	str	r3, [r7, #16]
            if (x < 700) x = 700;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000afc:	d202      	bcs.n	8000b04 <handle_gas_state+0x1cc>
 8000afe:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8000b02:	603b      	str	r3, [r7, #0]
            if (x > 1023) x = 1023;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b0a:	d302      	bcc.n	8000b12 <handle_gas_state+0x1da>
 8000b0c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000b10:	603b      	str	r3, [r7, #0]

            int dynamic_delay = max_delay - ((x - 700) * (max_delay - min_delay)) / (1023 - 700);
 8000b12:	6939      	ldr	r1, [r7, #16]
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8000b1a:	6938      	ldr	r0, [r7, #16]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	1a82      	subs	r2, r0, r2
 8000b20:	fb03 f202 	mul.w	r2, r3, r2
 8000b24:	4b22      	ldr	r3, [pc, #136]	@ (8000bb0 <handle_gas_state+0x278>)
 8000b26:	fba3 0302 	umull	r0, r3, r3, r2
 8000b2a:	1ad2      	subs	r2, r2, r3
 8000b2c:	0852      	lsrs	r2, r2, #1
 8000b2e:	4413      	add	r3, r2
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	1acb      	subs	r3, r1, r3
 8000b34:	60fb      	str	r3, [r7, #12]

            if (millis - last_toggle >= dynamic_delay) {
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <handle_gas_state+0x264>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <handle_gas_state+0x268>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	1ad2      	subs	r2, r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d313      	bcc.n	8000b6e <handle_gas_state+0x236>
                toggle ^= 1;
 8000b46:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <handle_gas_state+0x26c>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	f083 0301 	eor.w	r3, r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <handle_gas_state+0x26c>)
 8000b52:	701a      	strb	r2, [r3, #0]
                RGB_SetPWM(toggle * 255, 0, 0);
 8000b54:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <handle_gas_state+0x26c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	425b      	negs	r3, r3
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 f9f9 	bl	8000f58 <RGB_SetPWM>
                last_toggle = millis;
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <handle_gas_state+0x264>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba0 <handle_gas_state+0x268>)
 8000b6c:	6013      	str	r3, [r2, #0]
            }
        }
    }
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000005 	.word	0x20000005
 8000b7c:	20000006 	.word	0x20000006
 8000b80:	080024fc 	.word	0x080024fc
 8000b84:	40020400 	.word	0x40020400
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	08002504 	.word	0x08002504
 8000b90:	0800250c 	.word	0x0800250c
 8000b94:	08002514 	.word	0x08002514
 8000b98:	20000080 	.word	0x20000080
 8000b9c:	2000007c 	.word	0x2000007c
 8000ba0:	200000a8 	.word	0x200000a8
 8000ba4:	200000ac 	.word	0x200000ac
 8000ba8:	0800251c 	.word	0x0800251c
 8000bac:	08002524 	.word	0x08002524
 8000bb0:	95cbb0bf 	.word	0x95cbb0bf

08000bb4 <main>:



// ===== MAIN =====
int main(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
    SystemCoreClockUpdate();
 8000bba:	f000 fa67 	bl	800108c <SystemCoreClockUpdate>
    USART1_Init();
 8000bbe:	f000 fadb 	bl	8001178 <USART1_Init>
    USART2_Init();
 8000bc2:	f000 fb5d 	bl	8001280 <USART2_Init>
    GPIO_Init();         // PC1 - ADC
 8000bc6:	f7ff fbe5 	bl	8000394 <GPIO_Init>
    Buttons_Init();      // SW1, SW2
 8000bca:	f7ff fba1 	bl	8000310 <Buttons_Init>
    ADC_Init();
 8000bce:	f7ff fc33 	bl	8000438 <ADC_Init>
    I2C1_Init();
 8000bd2:	f7ff fc67 	bl	80004a4 <I2C1_Init>
    TIM4_Init();
 8000bd6:	f7ff fb71 	bl	80002bc <TIM4_Init>
    RGB_PWM_Init();      // PA5, PA6, PA7 dùng PWM cho LED RGB
 8000bda:	f000 f90f 	bl	8000dfc <RGB_PWM_Init>
//  TIM3_Init();         // Nếu dùng millis để nhấp nháy, bật lại
    USART1_SendString("Hello STM32 + I2C Scan\r\n");
 8000bde:	4845      	ldr	r0, [pc, #276]	@ (8000cf4 <main+0x140>)
 8000be0:	f000 fb38 	bl	8001254 <USART1_SendString>
    I2C_Scan();
 8000be4:	f7ff fcb6 	bl	8000554 <I2C_Scan>
    lcd_init();
 8000be8:	f7ff fddc 	bl	80007a4 <lcd_init>


    uint32_t adc_value;

    while (1) {
    	if (sys_state == SYS_ACTIVE) {
 8000bec:	4b42      	ldr	r3, [pc, #264]	@ (8000cf8 <main+0x144>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d16a      	bne.n	8000cca <main+0x116>
    	    if ((millis - last_adc_time) >=1000) {
 8000bf4:	4b41      	ldr	r3, [pc, #260]	@ (8000cfc <main+0x148>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b41      	ldr	r3, [pc, #260]	@ (8000d00 <main+0x14c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c02:	d355      	bcc.n	8000cb0 <main+0xfc>
    	        last_adc_time = millis;
 8000c04:	4b3d      	ldr	r3, [pc, #244]	@ (8000cfc <main+0x148>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a3d      	ldr	r2, [pc, #244]	@ (8000d00 <main+0x14c>)
 8000c0a:	6013      	str	r3, [r2, #0]
        		lcd_set_cursor(0,0);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff fdf9 	bl	8000806 <lcd_set_cursor>
        		lcd_send_string("Gas:");
 8000c14:	483b      	ldr	r0, [pc, #236]	@ (8000d04 <main+0x150>)
 8000c16:	f7ff fde1 	bl	80007dc <lcd_send_string>
            	lcd_set_cursor(0, 15);
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff fdf2 	bl	8000806 <lcd_set_cursor>
            	lcd_send_string("1");
 8000c22:	4839      	ldr	r0, [pc, #228]	@ (8000d08 <main+0x154>)
 8000c24:	f7ff fdda 	bl	80007dc <lcd_send_string>
        	    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000c28:	4b38      	ldr	r3, [pc, #224]	@ (8000d0c <main+0x158>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	4a37      	ldr	r2, [pc, #220]	@ (8000d0c <main+0x158>)
 8000c2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000c32:	6093      	str	r3, [r2, #8]
        	    while (!(ADC1->SR & ADC_SR_EOC));
 8000c34:	bf00      	nop
 8000c36:	4b35      	ldr	r3, [pc, #212]	@ (8000d0c <main+0x158>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f9      	beq.n	8000c36 <main+0x82>
        	    adc_value = ADC1->DR;
 8000c42:	4b32      	ldr	r3, [pc, #200]	@ (8000d0c <main+0x158>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	60fb      	str	r3, [r7, #12]
        	    float gas_ppm_f = MQ2_ConvertPPM(adc_value);         // Giá trị thực dạng float
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fe09 	bl	8000864 <MQ2_ConvertPPM>
 8000c52:	ed87 0a02 	vstr	s0, [r7, #8]
        	    adc_value = (int)(gas_ppm_f + 0.5f);               // Làm tròn về int
 8000c56:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000c5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c66:	ee17 3a90 	vmov	r3, s15
 8000c6a:	60fb      	str	r3, [r7, #12]

        	    sprintf(msg, "%lu\r\n", adc_value);                     // In ra UART
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4928      	ldr	r1, [pc, #160]	@ (8000d10 <main+0x15c>)
 8000c70:	4828      	ldr	r0, [pc, #160]	@ (8000d14 <main+0x160>)
 8000c72:	f000 fbb1 	bl	80013d8 <siprintf>
        	    USART2_SendString(msg);
 8000c76:	4827      	ldr	r0, [pc, #156]	@ (8000d14 <main+0x160>)
 8000c78:	f000 fb5a 	bl	8001330 <USART2_SendString>

        	    // Gửi UART + LCD

        	    sprintf(msg, "%lu", adc_value);
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4926      	ldr	r1, [pc, #152]	@ (8000d18 <main+0x164>)
 8000c80:	4824      	ldr	r0, [pc, #144]	@ (8000d14 <main+0x160>)
 8000c82:	f000 fba9 	bl	80013d8 <siprintf>
        	    lcd_set_cursor(0, 5);
 8000c86:	2105      	movs	r1, #5
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fdbc 	bl	8000806 <lcd_set_cursor>
        	    lcd_send_string("    ");
 8000c8e:	4823      	ldr	r0, [pc, #140]	@ (8000d1c <main+0x168>)
 8000c90:	f7ff fda4 	bl	80007dc <lcd_send_string>
        	    lcd_set_cursor(0, 5);
 8000c94:	2105      	movs	r1, #5
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff fdb5 	bl	8000806 <lcd_set_cursor>
        	    lcd_send_string(msg);
 8000c9c:	481d      	ldr	r0, [pc, #116]	@ (8000d14 <main+0x160>)
 8000c9e:	f7ff fd9d 	bl	80007dc <lcd_send_string>
        	    lcd_set_cursor(0, 10);
 8000ca2:	210a      	movs	r1, #10
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fdae 	bl	8000806 <lcd_set_cursor>
        	    lcd_send_string("ppm");
 8000caa:	481d      	ldr	r0, [pc, #116]	@ (8000d20 <main+0x16c>)
 8000cac:	f7ff fd96 	bl	80007dc <lcd_send_string>
    	    }
    	    // Máy trạng thái
    	    GasState current = detect_gas_level(adc_value);
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f7ff fe23 	bl	80008fc <detect_gas_level>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
    	    handle_gas_state(current,sys_state,adc_value);
 8000cba:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <main+0x144>)
 8000cbc:	7819      	ldrb	r1, [r3, #0]
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fe38 	bl	8000938 <handle_gas_state>
 8000cc8:	e790      	b.n	8000bec <main+0x38>
    	} else {
    	    RGB_SetPWM(0, 255, 0); // Xanh lá
 8000cca:	2200      	movs	r2, #0
 8000ccc:	21ff      	movs	r1, #255	@ 0xff
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f942 	bl	8000f58 <RGB_SetPWM>
    		lcd_set_cursor(0,0);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fd95 	bl	8000806 <lcd_set_cursor>
    		lcd_send_string("Gas:");
 8000cdc:	4809      	ldr	r0, [pc, #36]	@ (8000d04 <main+0x150>)
 8000cde:	f7ff fd7d 	bl	80007dc <lcd_send_string>
    		lcd_set_cursor(0,15);
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff fd8e 	bl	8000806 <lcd_set_cursor>
    		lcd_send_string("0");
 8000cea:	480e      	ldr	r0, [pc, #56]	@ (8000d24 <main+0x170>)
 8000cec:	f7ff fd76 	bl	80007dc <lcd_send_string>
    	if (sys_state == SYS_ACTIVE) {
 8000cf0:	e77c      	b.n	8000bec <main+0x38>
 8000cf2:	bf00      	nop
 8000cf4:	0800252c 	.word	0x0800252c
 8000cf8:	20000004 	.word	0x20000004
 8000cfc:	2000007c 	.word	0x2000007c
 8000d00:	20000000 	.word	0x20000000
 8000d04:	08002548 	.word	0x08002548
 8000d08:	08002550 	.word	0x08002550
 8000d0c:	40012000 	.word	0x40012000
 8000d10:	08002514 	.word	0x08002514
 8000d14:	20000080 	.word	0x20000080
 8000d18:	08002554 	.word	0x08002554
 8000d1c:	08002558 	.word	0x08002558
 8000d20:	08002560 	.word	0x08002560
 8000d24:	08002564 	.word	0x08002564

08000d28 <delay>:
    while (1);
}



void delay(uint32_t ms) {
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
    uint32_t start = millis;
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <delay+0x2c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
    while ((millis - start) < ms);
 8000d36:	bf00      	nop
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <delay+0x2c>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d8f8      	bhi.n	8000d38 <delay+0x10>
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	2000007c 	.word	0x2000007c

08000d58 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 0)) {
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <EXTI0_IRQHandler+0x3c>)
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d010      	beq.n	8000d8a <EXTI0_IRQHandler+0x32>
        EXTI->PR |= (1 << 0);
 8000d68:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <EXTI0_IRQHandler+0x3c>)
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	4a09      	ldr	r2, [pc, #36]	@ (8000d94 <EXTI0_IRQHandler+0x3c>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6153      	str	r3, [r2, #20]
        if (sys_state){
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <EXTI0_IRQHandler+0x40>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <EXTI0_IRQHandler+0x2c>
        	sys_state = SYS_IDLE;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <EXTI0_IRQHandler+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
        }else{
        	sys_state = SYS_ACTIVE;
        }
    }
}
 8000d82:	e002      	b.n	8000d8a <EXTI0_IRQHandler+0x32>
        	sys_state = SYS_ACTIVE;
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <EXTI0_IRQHandler+0x40>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40013c00 	.word	0x40013c00
 8000d98:	20000004 	.word	0x20000004

08000d9c <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 1)) {
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <EXTI1_IRQHandler+0x24>)
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d007      	beq.n	8000dbc <EXTI1_IRQHandler+0x20>
        EXTI->PR |= (1 << 1); // Clear pending bit
 8000dac:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <EXTI1_IRQHandler+0x24>)
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	4a03      	ldr	r2, [pc, #12]	@ (8000dc0 <EXTI1_IRQHandler+0x24>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	6153      	str	r3, [r2, #20]
        NVIC_SystemReset();
 8000db8:	f7ff fd3e 	bl	8000838 <__NVIC_SystemReset>
    }
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40013c00 	.word	0x40013c00

08000dc4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) {
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <TIM4_IRQHandler+0x30>)
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d00a      	beq.n	8000dea <TIM4_IRQHandler+0x26>
        TIM4->SR &= ~TIM_SR_UIF;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <TIM4_IRQHandler+0x30>)
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	4a06      	ldr	r2, [pc, #24]	@ (8000df4 <TIM4_IRQHandler+0x30>)
 8000dda:	f023 0301 	bic.w	r3, r3, #1
 8000dde:	6113      	str	r3, [r2, #16]
        millis++;
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <TIM4_IRQHandler+0x34>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <TIM4_IRQHandler+0x34>)
 8000de8:	6013      	str	r3, [r2, #0]
    }
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40000800 	.word	0x40000800
 8000df8:	2000007c 	.word	0x2000007c

08000dfc <RGB_PWM_Init>:

#include "stm32f4xx.h"
#include <stdint.h>
#include <stdio.h>
#include "rgb.h"
void RGB_PWM_Init(void) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~(1 << 0);                    // Clear GPIOA clock enable (bit 0)
 8000e00:	4b52      	ldr	r3, [pc, #328]	@ (8000f4c <RGB_PWM_Init+0x150>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e04:	4a51      	ldr	r2, [pc, #324]	@ (8000f4c <RGB_PWM_Init+0x150>)
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= (1 << 0);                     // Enable GPIOA clock
 8000e0c:	4b4f      	ldr	r3, [pc, #316]	@ (8000f4c <RGB_PWM_Init+0x150>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e10:	4a4e      	ldr	r2, [pc, #312]	@ (8000f4c <RGB_PWM_Init+0x150>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6313      	str	r3, [r2, #48]	@ 0x30

	RCC->APB1ENR &= ~((1 << 0) | (1 << 1));       // Clear TIM2 and TIM3 clock enable (bits 0, 1)
 8000e18:	4b4c      	ldr	r3, [pc, #304]	@ (8000f4c <RGB_PWM_Init+0x150>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8000f4c <RGB_PWM_Init+0x150>)
 8000e1e:	f023 0303 	bic.w	r3, r3, #3
 8000e22:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->APB1ENR |= ((1 << 0) | (1 << 1));        // Enable TIM2 and TIM3 clock
 8000e24:	4b49      	ldr	r3, [pc, #292]	@ (8000f4c <RGB_PWM_Init+0x150>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	4a48      	ldr	r2, [pc, #288]	@ (8000f4c <RGB_PWM_Init+0x150>)
 8000e2a:	f043 0303 	orr.w	r3, r3, #3
 8000e2e:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOA->MODER &= ~((3 << (5*2)) | (3 << (6*2)) | (3 << (7*2)));
 8000e30:	4b47      	ldr	r3, [pc, #284]	@ (8000f50 <RGB_PWM_Init+0x154>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a46      	ldr	r2, [pc, #280]	@ (8000f50 <RGB_PWM_Init+0x154>)
 8000e36:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000e3a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2 << (5*2)) | (2 << (6*2)) | (2 << (7*2))); // AF mode
 8000e3c:	4b44      	ldr	r3, [pc, #272]	@ (8000f50 <RGB_PWM_Init+0x154>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a43      	ldr	r2, [pc, #268]	@ (8000f50 <RGB_PWM_Init+0x154>)
 8000e42:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000e46:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[0] &= ~((0xF << (5*4)) | (0xF << (6*4)) | (0xF << (7*4)));
 8000e48:	4b41      	ldr	r3, [pc, #260]	@ (8000f50 <RGB_PWM_Init+0x154>)
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	4a40      	ldr	r2, [pc, #256]	@ (8000f50 <RGB_PWM_Init+0x154>)
 8000e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e52:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  ((1 << (5*4)) | (2 << (6*4)) | (2 << (7*4))); // AF1, AF2, AF2
 8000e54:	4b3e      	ldr	r3, [pc, #248]	@ (8000f50 <RGB_PWM_Init+0x154>)
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	4a3d      	ldr	r2, [pc, #244]	@ (8000f50 <RGB_PWM_Init+0x154>)
 8000e5a:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 8000e5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e62:	6213      	str	r3, [r2, #32]

    // TIM2 - Red
    TIM2->PSC = 16 - 1;
 8000e64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e68:	220f      	movs	r2, #15
 8000e6a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 255;
 8000e6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e70:	22ff      	movs	r2, #255	@ 0xff
 8000e72:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCMR1 &= ~((0x7 << 4) | (1 << 3));      // Xóa OC1M[2:0] và OC1PE (bits 4-6, 3)
 8000e74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e7e:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8000e82:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= ((6 << 4) | (1 << 3));         // Set OC1M = 110 (PWM mode 1) và OC1PE
 8000e84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e8e:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000e92:	6193      	str	r3, [r2, #24]

    TIM2->CCER &= ~(1 << 0);                      // Xóa CC1E (bit 0)
 8000e94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e9e:	f023 0301 	bic.w	r3, r3, #1
 8000ea2:	6213      	str	r3, [r2, #32]
    TIM2->CCER |= (1 << 0);                       // Kích hoạt CC1E (capture/compare output enable)
 8000ea4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6213      	str	r3, [r2, #32]

    TIM2->CR1 &= ~((1 << 7) | (1 << 0));          // Xóa ARPE và CEN (bits 7, 0)
 8000eb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ebe:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8000ec2:	6013      	str	r3, [r2, #0]
    TIM2->CR1 |= ((1 << 7) | (1 << 0));           // Bật ARPE và CEN (auto-reload preload và counter enable)
 8000ec4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ece:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
 8000ed2:	6013      	str	r3, [r2, #0]

    // TIM3 - Green & Blue
    TIM3->PSC = 16 - 1;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 255;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000edc:	22ff      	movs	r2, #255	@ 0xff
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->CCMR1 &= ~((0x7 << 4) | (1 << 3));       // Xóa OC1M[2:0] và OC1PE (bits 4-6, 3) cho CH1
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000ee6:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8000eea:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= ((6 << 4) | (1 << 3));          // Set OC1M = 110 (PWM mode 1) và OC1PE cho CH1
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a18      	ldr	r2, [pc, #96]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000ef2:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000ef6:	6193      	str	r3, [r2, #24]

	TIM3->CCMR1 &= ~((0x7 << 12) | (1 << 11));     // Xóa OC2M[2:0] và OC2PE (bits 12-14, 11) cho CH2
 8000ef8:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a15      	ldr	r2, [pc, #84]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000efe:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8000f02:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= ((6 << 12) | (1 << 11));        // Set OC2M = 110 (PWM mode 1) và OC2PE cho CH2
 8000f04:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a12      	ldr	r2, [pc, #72]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000f0a:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8000f0e:	6193      	str	r3, [r2, #24]

	TIM3->CCER &= ~((1 << 0) | (1 << 4));          // Xóa CC1E và CC2E (bits 0, 4)
 8000f10:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4a0f      	ldr	r2, [pc, #60]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000f16:	f023 0311 	bic.w	r3, r3, #17
 8000f1a:	6213      	str	r3, [r2, #32]
	TIM3->CCER |= ((1 << 0) | (1 << 4));           // Kích hoạt CC1E và CC2E (capture/compare output enable)
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	4a0c      	ldr	r2, [pc, #48]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000f22:	f043 0311 	orr.w	r3, r3, #17
 8000f26:	6213      	str	r3, [r2, #32]

	TIM3->CR1 &= ~((1 << 7) | (1 << 0));           // Xóa ARPE và CEN (bits 7, 0)
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a09      	ldr	r2, [pc, #36]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000f2e:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8000f32:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= ((1 << 7) | (1 << 0));            // Bật ARPE và CEN (auto-reload preload và counter enable)
 8000f34:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a06      	ldr	r2, [pc, #24]	@ (8000f54 <RGB_PWM_Init+0x158>)
 8000f3a:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40000400 	.word	0x40000400

08000f58 <RGB_SetPWM>:

void RGB_SetPWM(uint8_t r, uint8_t g, uint8_t b) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	460b      	mov	r3, r1
 8000f64:	71bb      	strb	r3, [r7, #6]
 8000f66:	4613      	mov	r3, r2
 8000f68:	717b      	strb	r3, [r7, #5]
    // LED anode chung nên phải đảo
    TIM2->CCR1 = 255 - r;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8000f70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f74:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR1 = 255 - g;
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <RGB_SetPWM+0x40>)
 8000f7e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = 255 - b;
 8000f80:	797b      	ldrb	r3, [r7, #5]
 8000f82:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8000f86:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <RGB_SetPWM+0x40>)
 8000f88:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40000400 	.word	0x40000400

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff2:	f000 f9dd 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001004:	4a14      	ldr	r2, [pc, #80]	@ (8001058 <_sbrk+0x5c>)
 8001006:	4b15      	ldr	r3, [pc, #84]	@ (800105c <_sbrk+0x60>)
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001010:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001018:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <_sbrk+0x64>)
 800101a:	4a12      	ldr	r2, [pc, #72]	@ (8001064 <_sbrk+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	429a      	cmp	r2, r3
 800102a:	d207      	bcs.n	800103c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800102c:	f000 f9f6 	bl	800141c <__errno>
 8001030:	4603      	mov	r3, r0
 8001032:	220c      	movs	r2, #12
 8001034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e009      	b.n	8001050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800103c:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001042:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <_sbrk+0x64>)
 800104c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20020000 	.word	0x20020000
 800105c:	00000400 	.word	0x00000400
 8001060:	200000b0 	.word	0x200000b0
 8001064:	20000200 	.word	0x20000200

08001068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <SystemInit+0x20>)
 800106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001072:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <SystemInit+0x20>)
 8001074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
  uint32_t tmp, pllvco, pllp, pllsource, pllm;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001092:	4b34      	ldr	r3, [pc, #208]	@ (8001164 <SystemCoreClockUpdate+0xd8>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d011      	beq.n	80010c6 <SystemCoreClockUpdate+0x3a>
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d844      	bhi.n	8001132 <SystemCoreClockUpdate+0xa6>
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <SystemCoreClockUpdate+0x2a>
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d004      	beq.n	80010be <SystemCoreClockUpdate+0x32>
 80010b4:	e03d      	b.n	8001132 <SystemCoreClockUpdate+0xa6>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80010b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <SystemCoreClockUpdate+0xdc>)
 80010b8:	4a2c      	ldr	r2, [pc, #176]	@ (800116c <SystemCoreClockUpdate+0xe0>)
 80010ba:	601a      	str	r2, [r3, #0]
      break;
 80010bc:	e03d      	b.n	800113a <SystemCoreClockUpdate+0xae>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80010be:	4b2a      	ldr	r3, [pc, #168]	@ (8001168 <SystemCoreClockUpdate+0xdc>)
 80010c0:	4a2b      	ldr	r2, [pc, #172]	@ (8001170 <SystemCoreClockUpdate+0xe4>)
 80010c2:	601a      	str	r2, [r3, #0]
      break;
 80010c4:	e039      	b.n	800113a <SystemCoreClockUpdate+0xae>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80010c6:	4b27      	ldr	r3, [pc, #156]	@ (8001164 <SystemCoreClockUpdate+0xd8>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	0d9b      	lsrs	r3, r3, #22
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010d2:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <SystemCoreClockUpdate+0xd8>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010da:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00c      	beq.n	80010fc <SystemCoreClockUpdate+0x70>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010e2:	4a23      	ldr	r2, [pc, #140]	@ (8001170 <SystemCoreClockUpdate+0xe4>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001164 <SystemCoreClockUpdate+0xd8>)
 80010ec:	6852      	ldr	r2, [r2, #4]
 80010ee:	0992      	lsrs	r2, r2, #6
 80010f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010f4:	fb02 f303 	mul.w	r3, r2, r3
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	e00b      	b.n	8001114 <SystemCoreClockUpdate+0x88>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010fc:	4a1b      	ldr	r2, [pc, #108]	@ (800116c <SystemCoreClockUpdate+0xe0>)
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	fbb2 f3f3 	udiv	r3, r2, r3
 8001104:	4a17      	ldr	r2, [pc, #92]	@ (8001164 <SystemCoreClockUpdate+0xd8>)
 8001106:	6852      	ldr	r2, [r2, #4]
 8001108:	0992      	lsrs	r2, r2, #6
 800110a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800110e:	fb02 f303 	mul.w	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <SystemCoreClockUpdate+0xd8>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	0c1b      	lsrs	r3, r3, #16
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	3301      	adds	r3, #1
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllp;
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	fbb2 f3f3 	udiv	r3, r2, r3
 800112c:	4a0e      	ldr	r2, [pc, #56]	@ (8001168 <SystemCoreClockUpdate+0xdc>)
 800112e:	6013      	str	r3, [r2, #0]
      break;
 8001130:	e003      	b.n	800113a <SystemCoreClockUpdate+0xae>
    default:
      SystemCoreClock = HSI_VALUE;
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <SystemCoreClockUpdate+0xdc>)
 8001134:	4a0d      	ldr	r2, [pc, #52]	@ (800116c <SystemCoreClockUpdate+0xe0>)
 8001136:	601a      	str	r2, [r3, #0]
      break;
 8001138:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <SystemCoreClockUpdate+0xd8>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	4a0b      	ldr	r2, [pc, #44]	@ (8001174 <SystemCoreClockUpdate+0xe8>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <SystemCoreClockUpdate+0xdc>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <SystemCoreClockUpdate+0xdc>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40023800 	.word	0x40023800
 8001168:	20000008 	.word	0x20000008
 800116c:	00f42400 	.word	0x00f42400
 8001170:	007a1200 	.word	0x007a1200
 8001174:	08002568 	.word	0x08002568

08001178 <USART1_Init>:
#include "stm32f4xx.h"
#include <stdint.h>
#include <stdio.h>
#include "uart.h"

void USART1_Init(void) {
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR &= ~(1 << 0);                    // Clear GPIOA clock enable (bit 0)
 800117c:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <USART1_Init+0x98>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001180:	4a23      	ldr	r2, [pc, #140]	@ (8001210 <USART1_Init+0x98>)
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= (1 << 0);                     // Enable GPIOA clock
 8001188:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <USART1_Init+0x98>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118c:	4a20      	ldr	r2, [pc, #128]	@ (8001210 <USART1_Init+0x98>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6313      	str	r3, [r2, #48]	@ 0x30

	RCC->APB2ENR &= ~(1 << 4);                    // Clear USART1 clock enable (bit 4)
 8001194:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <USART1_Init+0x98>)
 8001196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001198:	4a1d      	ldr	r2, [pc, #116]	@ (8001210 <USART1_Init+0x98>)
 800119a:	f023 0310 	bic.w	r3, r3, #16
 800119e:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->APB2ENR |= (1 << 4);                     // Enable USART1 clock
 80011a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001210 <USART1_Init+0x98>)
 80011a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001210 <USART1_Init+0x98>)
 80011a6:	f043 0310 	orr.w	r3, r3, #16
 80011aa:	6453      	str	r3, [r2, #68]	@ 0x44

    // PA9 = TX, PA10 = RX (AF7)
    GPIOA->MODER &= ~((3 << 18) | (3 << 20));     // Clear MODER9,10
 80011ac:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <USART1_Init+0x9c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a18      	ldr	r2, [pc, #96]	@ (8001214 <USART1_Init+0x9c>)
 80011b2:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80011b6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2 << 18) | (2 << 20));     // Alternate Function
 80011b8:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <USART1_Init+0x9c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a15      	ldr	r2, [pc, #84]	@ (8001214 <USART1_Init+0x9c>)
 80011be:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80011c2:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[1] &= ~((0xF << 4) | (0xF << 8));  // Clear AFR for PA9, PA10
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <USART1_Init+0x9c>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c8:	4a12      	ldr	r2, [pc, #72]	@ (8001214 <USART1_Init+0x9c>)
 80011ca:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80011ce:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |=  ((7 << 4) | (7 << 8));      // AF7 = USART1
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <USART1_Init+0x9c>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <USART1_Init+0x9c>)
 80011d6:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 80011da:	6253      	str	r3, [r2, #36]	@ 0x24

    USART1->BRR = SystemCoreClock / 9600;         // Baudrate = 9600 (với HSI 16 MHz → BRR ≈ 1667)
 80011dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <USART1_Init+0xa0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0e      	ldr	r2, [pc, #56]	@ (800121c <USART1_Init+0xa4>)
 80011e2:	490f      	ldr	r1, [pc, #60]	@ (8001220 <USART1_Init+0xa8>)
 80011e4:	fba1 1303 	umull	r1, r3, r1, r3
 80011e8:	0a9b      	lsrs	r3, r3, #10
 80011ea:	6093      	str	r3, [r2, #8]

    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;   // Bật cả gửi và nhận
 80011ec:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <USART1_Init+0xa4>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <USART1_Init+0xa4>)
 80011f2:	f043 030c 	orr.w	r3, r3, #12
 80011f6:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;                  // Bật USART
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <USART1_Init+0xa4>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4a07      	ldr	r2, [pc, #28]	@ (800121c <USART1_Init+0xa4>)
 80011fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000
 8001218:	20000008 	.word	0x20000008
 800121c:	40011000 	.word	0x40011000
 8001220:	1b4e81b5 	.word	0x1b4e81b5

08001224 <USART1_SendChar>:
        buffer[i++] = c;
    }
    buffer[i] = '\0';
}

void USART1_SendChar(char c) {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE));
 800122e:	bf00      	nop
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <USART1_SendChar+0x2c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f9      	beq.n	8001230 <USART1_SendChar+0xc>
    USART1->DR = c;
 800123c:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <USART1_SendChar+0x2c>)
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	6053      	str	r3, [r2, #4]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40011000 	.word	0x40011000

08001254 <USART1_SendString>:

void USART1_SendString(const char *str) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    while (*str) {
 800125c:	e006      	b.n	800126c <USART1_SendString+0x18>
        USART1_SendChar(*str++);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ffdc 	bl	8001224 <USART1_SendChar>
    while (*str) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f4      	bne.n	800125e <USART1_SendString+0xa>
    }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <USART2_Init>:
void USART2_Init(void) {
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001284:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <USART2_Init+0x6c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001288:	4a18      	ldr	r2, [pc, #96]	@ (80012ec <USART2_Init+0x6c>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001290:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <USART2_Init+0x6c>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	4a15      	ldr	r2, [pc, #84]	@ (80012ec <USART2_Init+0x6c>)
 8001296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800129a:	6413      	str	r3, [r2, #64]	@ 0x40

    // PA2 = TX (debug), PA3 = RX (nếu cần)
    GPIOA->MODER &= ~((3 << 4) | (3 << 6));
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <USART2_Init+0x70>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <USART2_Init+0x70>)
 80012a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80012a6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2 << 4));       // PA2: Alternate Function
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <USART2_Init+0x70>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a10      	ldr	r2, [pc, #64]	@ (80012f0 <USART2_Init+0x70>)
 80012ae:	f043 0320 	orr.w	r3, r3, #32
 80012b2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << 8);         // AF7: USART2
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <USART2_Init+0x70>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4a0d      	ldr	r2, [pc, #52]	@ (80012f0 <USART2_Init+0x70>)
 80012ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012be:	6213      	str	r3, [r2, #32]

    USART2->BRR = SystemCoreClock / 9600;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <USART2_Init+0x74>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0c      	ldr	r2, [pc, #48]	@ (80012f8 <USART2_Init+0x78>)
 80012c6:	490d      	ldr	r1, [pc, #52]	@ (80012fc <USART2_Init+0x7c>)
 80012c8:	fba1 1303 	umull	r1, r3, r1, r3
 80012cc:	0a9b      	lsrs	r3, r3, #10
 80012ce:	6093      	str	r3, [r2, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_UE;
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <USART2_Init+0x78>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <USART2_Init+0x78>)
 80012d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012da:	f043 0308 	orr.w	r3, r3, #8
 80012de:	60d3      	str	r3, [r2, #12]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	20000008 	.word	0x20000008
 80012f8:	40004400 	.word	0x40004400
 80012fc:	1b4e81b5 	.word	0x1b4e81b5

08001300 <USART2_SendChar>:

void USART2_SendChar(char c) {
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE));
 800130a:	bf00      	nop
 800130c:	4b07      	ldr	r3, [pc, #28]	@ (800132c <USART2_SendChar+0x2c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f9      	beq.n	800130c <USART2_SendChar+0xc>
    USART2->DR = c;
 8001318:	4a04      	ldr	r2, [pc, #16]	@ (800132c <USART2_SendChar+0x2c>)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	6053      	str	r3, [r2, #4]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40004400 	.word	0x40004400

08001330 <USART2_SendString>:

void USART2_SendString(const char *str) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
    while (*str) USART2_SendChar(*str++);
 8001338:	e006      	b.n	8001348 <USART2_SendString+0x18>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ffdc 	bl	8001300 <USART2_SendChar>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f4      	bne.n	800133a <USART2_SendString+0xa>
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001394 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001360:	f7ff fe82 	bl	8001068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001366:	490d      	ldr	r1, [pc, #52]	@ (800139c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001368:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800137c:	4c0a      	ldr	r4, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138a:	f000 f84d 	bl	8001428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff fc11 	bl	8000bb4 <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80013a0:	080025d4 	.word	0x080025d4
  ldr r2, =_sbss
 80013a4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80013a8:	20000200 	.word	0x20000200

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>
	...

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	2000000c 	.word	0x2000000c
 80013d4:	200000b4 	.word	0x200000b4

080013d8 <siprintf>:
 80013d8:	b40e      	push	{r1, r2, r3}
 80013da:	b510      	push	{r4, lr}
 80013dc:	b09d      	sub	sp, #116	@ 0x74
 80013de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80013e0:	9002      	str	r0, [sp, #8]
 80013e2:	9006      	str	r0, [sp, #24]
 80013e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80013e8:	480a      	ldr	r0, [pc, #40]	@ (8001414 <siprintf+0x3c>)
 80013ea:	9107      	str	r1, [sp, #28]
 80013ec:	9104      	str	r1, [sp, #16]
 80013ee:	490a      	ldr	r1, [pc, #40]	@ (8001418 <siprintf+0x40>)
 80013f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80013f4:	9105      	str	r1, [sp, #20]
 80013f6:	2400      	movs	r4, #0
 80013f8:	a902      	add	r1, sp, #8
 80013fa:	6800      	ldr	r0, [r0, #0]
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8001400:	f000 f98c 	bl	800171c <_svfiprintf_r>
 8001404:	9b02      	ldr	r3, [sp, #8]
 8001406:	701c      	strb	r4, [r3, #0]
 8001408:	b01d      	add	sp, #116	@ 0x74
 800140a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800140e:	b003      	add	sp, #12
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000010 	.word	0x20000010
 8001418:	ffff0208 	.word	0xffff0208

0800141c <__errno>:
 800141c:	4b01      	ldr	r3, [pc, #4]	@ (8001424 <__errno+0x8>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000010 	.word	0x20000010

08001428 <__libc_init_array>:
 8001428:	b570      	push	{r4, r5, r6, lr}
 800142a:	4d0d      	ldr	r5, [pc, #52]	@ (8001460 <__libc_init_array+0x38>)
 800142c:	4c0d      	ldr	r4, [pc, #52]	@ (8001464 <__libc_init_array+0x3c>)
 800142e:	1b64      	subs	r4, r4, r5
 8001430:	10a4      	asrs	r4, r4, #2
 8001432:	2600      	movs	r6, #0
 8001434:	42a6      	cmp	r6, r4
 8001436:	d109      	bne.n	800144c <__libc_init_array+0x24>
 8001438:	4d0b      	ldr	r5, [pc, #44]	@ (8001468 <__libc_init_array+0x40>)
 800143a:	4c0c      	ldr	r4, [pc, #48]	@ (800146c <__libc_init_array+0x44>)
 800143c:	f001 f82c 	bl	8002498 <_init>
 8001440:	1b64      	subs	r4, r4, r5
 8001442:	10a4      	asrs	r4, r4, #2
 8001444:	2600      	movs	r6, #0
 8001446:	42a6      	cmp	r6, r4
 8001448:	d105      	bne.n	8001456 <__libc_init_array+0x2e>
 800144a:	bd70      	pop	{r4, r5, r6, pc}
 800144c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001450:	4798      	blx	r3
 8001452:	3601      	adds	r6, #1
 8001454:	e7ee      	b.n	8001434 <__libc_init_array+0xc>
 8001456:	f855 3b04 	ldr.w	r3, [r5], #4
 800145a:	4798      	blx	r3
 800145c:	3601      	adds	r6, #1
 800145e:	e7f2      	b.n	8001446 <__libc_init_array+0x1e>
 8001460:	080025cc 	.word	0x080025cc
 8001464:	080025cc 	.word	0x080025cc
 8001468:	080025cc 	.word	0x080025cc
 800146c:	080025d0 	.word	0x080025d0

08001470 <__retarget_lock_acquire_recursive>:
 8001470:	4770      	bx	lr

08001472 <__retarget_lock_release_recursive>:
 8001472:	4770      	bx	lr

08001474 <_free_r>:
 8001474:	b538      	push	{r3, r4, r5, lr}
 8001476:	4605      	mov	r5, r0
 8001478:	2900      	cmp	r1, #0
 800147a:	d041      	beq.n	8001500 <_free_r+0x8c>
 800147c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001480:	1f0c      	subs	r4, r1, #4
 8001482:	2b00      	cmp	r3, #0
 8001484:	bfb8      	it	lt
 8001486:	18e4      	addlt	r4, r4, r3
 8001488:	f000 f8e0 	bl	800164c <__malloc_lock>
 800148c:	4a1d      	ldr	r2, [pc, #116]	@ (8001504 <_free_r+0x90>)
 800148e:	6813      	ldr	r3, [r2, #0]
 8001490:	b933      	cbnz	r3, 80014a0 <_free_r+0x2c>
 8001492:	6063      	str	r3, [r4, #4]
 8001494:	6014      	str	r4, [r2, #0]
 8001496:	4628      	mov	r0, r5
 8001498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800149c:	f000 b8dc 	b.w	8001658 <__malloc_unlock>
 80014a0:	42a3      	cmp	r3, r4
 80014a2:	d908      	bls.n	80014b6 <_free_r+0x42>
 80014a4:	6820      	ldr	r0, [r4, #0]
 80014a6:	1821      	adds	r1, r4, r0
 80014a8:	428b      	cmp	r3, r1
 80014aa:	bf01      	itttt	eq
 80014ac:	6819      	ldreq	r1, [r3, #0]
 80014ae:	685b      	ldreq	r3, [r3, #4]
 80014b0:	1809      	addeq	r1, r1, r0
 80014b2:	6021      	streq	r1, [r4, #0]
 80014b4:	e7ed      	b.n	8001492 <_free_r+0x1e>
 80014b6:	461a      	mov	r2, r3
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	b10b      	cbz	r3, 80014c0 <_free_r+0x4c>
 80014bc:	42a3      	cmp	r3, r4
 80014be:	d9fa      	bls.n	80014b6 <_free_r+0x42>
 80014c0:	6811      	ldr	r1, [r2, #0]
 80014c2:	1850      	adds	r0, r2, r1
 80014c4:	42a0      	cmp	r0, r4
 80014c6:	d10b      	bne.n	80014e0 <_free_r+0x6c>
 80014c8:	6820      	ldr	r0, [r4, #0]
 80014ca:	4401      	add	r1, r0
 80014cc:	1850      	adds	r0, r2, r1
 80014ce:	4283      	cmp	r3, r0
 80014d0:	6011      	str	r1, [r2, #0]
 80014d2:	d1e0      	bne.n	8001496 <_free_r+0x22>
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	6053      	str	r3, [r2, #4]
 80014da:	4408      	add	r0, r1
 80014dc:	6010      	str	r0, [r2, #0]
 80014de:	e7da      	b.n	8001496 <_free_r+0x22>
 80014e0:	d902      	bls.n	80014e8 <_free_r+0x74>
 80014e2:	230c      	movs	r3, #12
 80014e4:	602b      	str	r3, [r5, #0]
 80014e6:	e7d6      	b.n	8001496 <_free_r+0x22>
 80014e8:	6820      	ldr	r0, [r4, #0]
 80014ea:	1821      	adds	r1, r4, r0
 80014ec:	428b      	cmp	r3, r1
 80014ee:	bf04      	itt	eq
 80014f0:	6819      	ldreq	r1, [r3, #0]
 80014f2:	685b      	ldreq	r3, [r3, #4]
 80014f4:	6063      	str	r3, [r4, #4]
 80014f6:	bf04      	itt	eq
 80014f8:	1809      	addeq	r1, r1, r0
 80014fa:	6021      	streq	r1, [r4, #0]
 80014fc:	6054      	str	r4, [r2, #4]
 80014fe:	e7ca      	b.n	8001496 <_free_r+0x22>
 8001500:	bd38      	pop	{r3, r4, r5, pc}
 8001502:	bf00      	nop
 8001504:	200001fc 	.word	0x200001fc

08001508 <sbrk_aligned>:
 8001508:	b570      	push	{r4, r5, r6, lr}
 800150a:	4e0f      	ldr	r6, [pc, #60]	@ (8001548 <sbrk_aligned+0x40>)
 800150c:	460c      	mov	r4, r1
 800150e:	6831      	ldr	r1, [r6, #0]
 8001510:	4605      	mov	r5, r0
 8001512:	b911      	cbnz	r1, 800151a <sbrk_aligned+0x12>
 8001514:	f000 fba4 	bl	8001c60 <_sbrk_r>
 8001518:	6030      	str	r0, [r6, #0]
 800151a:	4621      	mov	r1, r4
 800151c:	4628      	mov	r0, r5
 800151e:	f000 fb9f 	bl	8001c60 <_sbrk_r>
 8001522:	1c43      	adds	r3, r0, #1
 8001524:	d103      	bne.n	800152e <sbrk_aligned+0x26>
 8001526:	f04f 34ff 	mov.w	r4, #4294967295
 800152a:	4620      	mov	r0, r4
 800152c:	bd70      	pop	{r4, r5, r6, pc}
 800152e:	1cc4      	adds	r4, r0, #3
 8001530:	f024 0403 	bic.w	r4, r4, #3
 8001534:	42a0      	cmp	r0, r4
 8001536:	d0f8      	beq.n	800152a <sbrk_aligned+0x22>
 8001538:	1a21      	subs	r1, r4, r0
 800153a:	4628      	mov	r0, r5
 800153c:	f000 fb90 	bl	8001c60 <_sbrk_r>
 8001540:	3001      	adds	r0, #1
 8001542:	d1f2      	bne.n	800152a <sbrk_aligned+0x22>
 8001544:	e7ef      	b.n	8001526 <sbrk_aligned+0x1e>
 8001546:	bf00      	nop
 8001548:	200001f8 	.word	0x200001f8

0800154c <_malloc_r>:
 800154c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001550:	1ccd      	adds	r5, r1, #3
 8001552:	f025 0503 	bic.w	r5, r5, #3
 8001556:	3508      	adds	r5, #8
 8001558:	2d0c      	cmp	r5, #12
 800155a:	bf38      	it	cc
 800155c:	250c      	movcc	r5, #12
 800155e:	2d00      	cmp	r5, #0
 8001560:	4606      	mov	r6, r0
 8001562:	db01      	blt.n	8001568 <_malloc_r+0x1c>
 8001564:	42a9      	cmp	r1, r5
 8001566:	d904      	bls.n	8001572 <_malloc_r+0x26>
 8001568:	230c      	movs	r3, #12
 800156a:	6033      	str	r3, [r6, #0]
 800156c:	2000      	movs	r0, #0
 800156e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001572:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001648 <_malloc_r+0xfc>
 8001576:	f000 f869 	bl	800164c <__malloc_lock>
 800157a:	f8d8 3000 	ldr.w	r3, [r8]
 800157e:	461c      	mov	r4, r3
 8001580:	bb44      	cbnz	r4, 80015d4 <_malloc_r+0x88>
 8001582:	4629      	mov	r1, r5
 8001584:	4630      	mov	r0, r6
 8001586:	f7ff ffbf 	bl	8001508 <sbrk_aligned>
 800158a:	1c43      	adds	r3, r0, #1
 800158c:	4604      	mov	r4, r0
 800158e:	d158      	bne.n	8001642 <_malloc_r+0xf6>
 8001590:	f8d8 4000 	ldr.w	r4, [r8]
 8001594:	4627      	mov	r7, r4
 8001596:	2f00      	cmp	r7, #0
 8001598:	d143      	bne.n	8001622 <_malloc_r+0xd6>
 800159a:	2c00      	cmp	r4, #0
 800159c:	d04b      	beq.n	8001636 <_malloc_r+0xea>
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	4639      	mov	r1, r7
 80015a2:	4630      	mov	r0, r6
 80015a4:	eb04 0903 	add.w	r9, r4, r3
 80015a8:	f000 fb5a 	bl	8001c60 <_sbrk_r>
 80015ac:	4581      	cmp	r9, r0
 80015ae:	d142      	bne.n	8001636 <_malloc_r+0xea>
 80015b0:	6821      	ldr	r1, [r4, #0]
 80015b2:	1a6d      	subs	r5, r5, r1
 80015b4:	4629      	mov	r1, r5
 80015b6:	4630      	mov	r0, r6
 80015b8:	f7ff ffa6 	bl	8001508 <sbrk_aligned>
 80015bc:	3001      	adds	r0, #1
 80015be:	d03a      	beq.n	8001636 <_malloc_r+0xea>
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	442b      	add	r3, r5
 80015c4:	6023      	str	r3, [r4, #0]
 80015c6:	f8d8 3000 	ldr.w	r3, [r8]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	bb62      	cbnz	r2, 8001628 <_malloc_r+0xdc>
 80015ce:	f8c8 7000 	str.w	r7, [r8]
 80015d2:	e00f      	b.n	80015f4 <_malloc_r+0xa8>
 80015d4:	6822      	ldr	r2, [r4, #0]
 80015d6:	1b52      	subs	r2, r2, r5
 80015d8:	d420      	bmi.n	800161c <_malloc_r+0xd0>
 80015da:	2a0b      	cmp	r2, #11
 80015dc:	d917      	bls.n	800160e <_malloc_r+0xc2>
 80015de:	1961      	adds	r1, r4, r5
 80015e0:	42a3      	cmp	r3, r4
 80015e2:	6025      	str	r5, [r4, #0]
 80015e4:	bf18      	it	ne
 80015e6:	6059      	strne	r1, [r3, #4]
 80015e8:	6863      	ldr	r3, [r4, #4]
 80015ea:	bf08      	it	eq
 80015ec:	f8c8 1000 	streq.w	r1, [r8]
 80015f0:	5162      	str	r2, [r4, r5]
 80015f2:	604b      	str	r3, [r1, #4]
 80015f4:	4630      	mov	r0, r6
 80015f6:	f000 f82f 	bl	8001658 <__malloc_unlock>
 80015fa:	f104 000b 	add.w	r0, r4, #11
 80015fe:	1d23      	adds	r3, r4, #4
 8001600:	f020 0007 	bic.w	r0, r0, #7
 8001604:	1ac2      	subs	r2, r0, r3
 8001606:	bf1c      	itt	ne
 8001608:	1a1b      	subne	r3, r3, r0
 800160a:	50a3      	strne	r3, [r4, r2]
 800160c:	e7af      	b.n	800156e <_malloc_r+0x22>
 800160e:	6862      	ldr	r2, [r4, #4]
 8001610:	42a3      	cmp	r3, r4
 8001612:	bf0c      	ite	eq
 8001614:	f8c8 2000 	streq.w	r2, [r8]
 8001618:	605a      	strne	r2, [r3, #4]
 800161a:	e7eb      	b.n	80015f4 <_malloc_r+0xa8>
 800161c:	4623      	mov	r3, r4
 800161e:	6864      	ldr	r4, [r4, #4]
 8001620:	e7ae      	b.n	8001580 <_malloc_r+0x34>
 8001622:	463c      	mov	r4, r7
 8001624:	687f      	ldr	r7, [r7, #4]
 8001626:	e7b6      	b.n	8001596 <_malloc_r+0x4a>
 8001628:	461a      	mov	r2, r3
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	42a3      	cmp	r3, r4
 800162e:	d1fb      	bne.n	8001628 <_malloc_r+0xdc>
 8001630:	2300      	movs	r3, #0
 8001632:	6053      	str	r3, [r2, #4]
 8001634:	e7de      	b.n	80015f4 <_malloc_r+0xa8>
 8001636:	230c      	movs	r3, #12
 8001638:	6033      	str	r3, [r6, #0]
 800163a:	4630      	mov	r0, r6
 800163c:	f000 f80c 	bl	8001658 <__malloc_unlock>
 8001640:	e794      	b.n	800156c <_malloc_r+0x20>
 8001642:	6005      	str	r5, [r0, #0]
 8001644:	e7d6      	b.n	80015f4 <_malloc_r+0xa8>
 8001646:	bf00      	nop
 8001648:	200001fc 	.word	0x200001fc

0800164c <__malloc_lock>:
 800164c:	4801      	ldr	r0, [pc, #4]	@ (8001654 <__malloc_lock+0x8>)
 800164e:	f7ff bf0f 	b.w	8001470 <__retarget_lock_acquire_recursive>
 8001652:	bf00      	nop
 8001654:	200001f4 	.word	0x200001f4

08001658 <__malloc_unlock>:
 8001658:	4801      	ldr	r0, [pc, #4]	@ (8001660 <__malloc_unlock+0x8>)
 800165a:	f7ff bf0a 	b.w	8001472 <__retarget_lock_release_recursive>
 800165e:	bf00      	nop
 8001660:	200001f4 	.word	0x200001f4

08001664 <__ssputs_r>:
 8001664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001668:	688e      	ldr	r6, [r1, #8]
 800166a:	461f      	mov	r7, r3
 800166c:	42be      	cmp	r6, r7
 800166e:	680b      	ldr	r3, [r1, #0]
 8001670:	4682      	mov	sl, r0
 8001672:	460c      	mov	r4, r1
 8001674:	4690      	mov	r8, r2
 8001676:	d82d      	bhi.n	80016d4 <__ssputs_r+0x70>
 8001678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800167c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001680:	d026      	beq.n	80016d0 <__ssputs_r+0x6c>
 8001682:	6965      	ldr	r5, [r4, #20]
 8001684:	6909      	ldr	r1, [r1, #16]
 8001686:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800168a:	eba3 0901 	sub.w	r9, r3, r1
 800168e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001692:	1c7b      	adds	r3, r7, #1
 8001694:	444b      	add	r3, r9
 8001696:	106d      	asrs	r5, r5, #1
 8001698:	429d      	cmp	r5, r3
 800169a:	bf38      	it	cc
 800169c:	461d      	movcc	r5, r3
 800169e:	0553      	lsls	r3, r2, #21
 80016a0:	d527      	bpl.n	80016f2 <__ssputs_r+0x8e>
 80016a2:	4629      	mov	r1, r5
 80016a4:	f7ff ff52 	bl	800154c <_malloc_r>
 80016a8:	4606      	mov	r6, r0
 80016aa:	b360      	cbz	r0, 8001706 <__ssputs_r+0xa2>
 80016ac:	6921      	ldr	r1, [r4, #16]
 80016ae:	464a      	mov	r2, r9
 80016b0:	f000 fae6 	bl	8001c80 <memcpy>
 80016b4:	89a3      	ldrh	r3, [r4, #12]
 80016b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80016ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016be:	81a3      	strh	r3, [r4, #12]
 80016c0:	6126      	str	r6, [r4, #16]
 80016c2:	6165      	str	r5, [r4, #20]
 80016c4:	444e      	add	r6, r9
 80016c6:	eba5 0509 	sub.w	r5, r5, r9
 80016ca:	6026      	str	r6, [r4, #0]
 80016cc:	60a5      	str	r5, [r4, #8]
 80016ce:	463e      	mov	r6, r7
 80016d0:	42be      	cmp	r6, r7
 80016d2:	d900      	bls.n	80016d6 <__ssputs_r+0x72>
 80016d4:	463e      	mov	r6, r7
 80016d6:	6820      	ldr	r0, [r4, #0]
 80016d8:	4632      	mov	r2, r6
 80016da:	4641      	mov	r1, r8
 80016dc:	f000 faa6 	bl	8001c2c <memmove>
 80016e0:	68a3      	ldr	r3, [r4, #8]
 80016e2:	1b9b      	subs	r3, r3, r6
 80016e4:	60a3      	str	r3, [r4, #8]
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	4433      	add	r3, r6
 80016ea:	6023      	str	r3, [r4, #0]
 80016ec:	2000      	movs	r0, #0
 80016ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016f2:	462a      	mov	r2, r5
 80016f4:	f000 fad2 	bl	8001c9c <_realloc_r>
 80016f8:	4606      	mov	r6, r0
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d1e0      	bne.n	80016c0 <__ssputs_r+0x5c>
 80016fe:	6921      	ldr	r1, [r4, #16]
 8001700:	4650      	mov	r0, sl
 8001702:	f7ff feb7 	bl	8001474 <_free_r>
 8001706:	230c      	movs	r3, #12
 8001708:	f8ca 3000 	str.w	r3, [sl]
 800170c:	89a3      	ldrh	r3, [r4, #12]
 800170e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001712:	81a3      	strh	r3, [r4, #12]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	e7e9      	b.n	80016ee <__ssputs_r+0x8a>
	...

0800171c <_svfiprintf_r>:
 800171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001720:	4698      	mov	r8, r3
 8001722:	898b      	ldrh	r3, [r1, #12]
 8001724:	061b      	lsls	r3, r3, #24
 8001726:	b09d      	sub	sp, #116	@ 0x74
 8001728:	4607      	mov	r7, r0
 800172a:	460d      	mov	r5, r1
 800172c:	4614      	mov	r4, r2
 800172e:	d510      	bpl.n	8001752 <_svfiprintf_r+0x36>
 8001730:	690b      	ldr	r3, [r1, #16]
 8001732:	b973      	cbnz	r3, 8001752 <_svfiprintf_r+0x36>
 8001734:	2140      	movs	r1, #64	@ 0x40
 8001736:	f7ff ff09 	bl	800154c <_malloc_r>
 800173a:	6028      	str	r0, [r5, #0]
 800173c:	6128      	str	r0, [r5, #16]
 800173e:	b930      	cbnz	r0, 800174e <_svfiprintf_r+0x32>
 8001740:	230c      	movs	r3, #12
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	b01d      	add	sp, #116	@ 0x74
 800174a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800174e:	2340      	movs	r3, #64	@ 0x40
 8001750:	616b      	str	r3, [r5, #20]
 8001752:	2300      	movs	r3, #0
 8001754:	9309      	str	r3, [sp, #36]	@ 0x24
 8001756:	2320      	movs	r3, #32
 8001758:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800175c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001760:	2330      	movs	r3, #48	@ 0x30
 8001762:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001900 <_svfiprintf_r+0x1e4>
 8001766:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800176a:	f04f 0901 	mov.w	r9, #1
 800176e:	4623      	mov	r3, r4
 8001770:	469a      	mov	sl, r3
 8001772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001776:	b10a      	cbz	r2, 800177c <_svfiprintf_r+0x60>
 8001778:	2a25      	cmp	r2, #37	@ 0x25
 800177a:	d1f9      	bne.n	8001770 <_svfiprintf_r+0x54>
 800177c:	ebba 0b04 	subs.w	fp, sl, r4
 8001780:	d00b      	beq.n	800179a <_svfiprintf_r+0x7e>
 8001782:	465b      	mov	r3, fp
 8001784:	4622      	mov	r2, r4
 8001786:	4629      	mov	r1, r5
 8001788:	4638      	mov	r0, r7
 800178a:	f7ff ff6b 	bl	8001664 <__ssputs_r>
 800178e:	3001      	adds	r0, #1
 8001790:	f000 80a7 	beq.w	80018e2 <_svfiprintf_r+0x1c6>
 8001794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001796:	445a      	add	r2, fp
 8001798:	9209      	str	r2, [sp, #36]	@ 0x24
 800179a:	f89a 3000 	ldrb.w	r3, [sl]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 809f 	beq.w	80018e2 <_svfiprintf_r+0x1c6>
 80017a4:	2300      	movs	r3, #0
 80017a6:	f04f 32ff 	mov.w	r2, #4294967295
 80017aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017ae:	f10a 0a01 	add.w	sl, sl, #1
 80017b2:	9304      	str	r3, [sp, #16]
 80017b4:	9307      	str	r3, [sp, #28]
 80017b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80017ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80017bc:	4654      	mov	r4, sl
 80017be:	2205      	movs	r2, #5
 80017c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017c4:	484e      	ldr	r0, [pc, #312]	@ (8001900 <_svfiprintf_r+0x1e4>)
 80017c6:	f7fe fd0b 	bl	80001e0 <memchr>
 80017ca:	9a04      	ldr	r2, [sp, #16]
 80017cc:	b9d8      	cbnz	r0, 8001806 <_svfiprintf_r+0xea>
 80017ce:	06d0      	lsls	r0, r2, #27
 80017d0:	bf44      	itt	mi
 80017d2:	2320      	movmi	r3, #32
 80017d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80017d8:	0711      	lsls	r1, r2, #28
 80017da:	bf44      	itt	mi
 80017dc:	232b      	movmi	r3, #43	@ 0x2b
 80017de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80017e2:	f89a 3000 	ldrb.w	r3, [sl]
 80017e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80017e8:	d015      	beq.n	8001816 <_svfiprintf_r+0xfa>
 80017ea:	9a07      	ldr	r2, [sp, #28]
 80017ec:	4654      	mov	r4, sl
 80017ee:	2000      	movs	r0, #0
 80017f0:	f04f 0c0a 	mov.w	ip, #10
 80017f4:	4621      	mov	r1, r4
 80017f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017fa:	3b30      	subs	r3, #48	@ 0x30
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d94b      	bls.n	8001898 <_svfiprintf_r+0x17c>
 8001800:	b1b0      	cbz	r0, 8001830 <_svfiprintf_r+0x114>
 8001802:	9207      	str	r2, [sp, #28]
 8001804:	e014      	b.n	8001830 <_svfiprintf_r+0x114>
 8001806:	eba0 0308 	sub.w	r3, r0, r8
 800180a:	fa09 f303 	lsl.w	r3, r9, r3
 800180e:	4313      	orrs	r3, r2
 8001810:	9304      	str	r3, [sp, #16]
 8001812:	46a2      	mov	sl, r4
 8001814:	e7d2      	b.n	80017bc <_svfiprintf_r+0xa0>
 8001816:	9b03      	ldr	r3, [sp, #12]
 8001818:	1d19      	adds	r1, r3, #4
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	9103      	str	r1, [sp, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	bfbb      	ittet	lt
 8001822:	425b      	neglt	r3, r3
 8001824:	f042 0202 	orrlt.w	r2, r2, #2
 8001828:	9307      	strge	r3, [sp, #28]
 800182a:	9307      	strlt	r3, [sp, #28]
 800182c:	bfb8      	it	lt
 800182e:	9204      	strlt	r2, [sp, #16]
 8001830:	7823      	ldrb	r3, [r4, #0]
 8001832:	2b2e      	cmp	r3, #46	@ 0x2e
 8001834:	d10a      	bne.n	800184c <_svfiprintf_r+0x130>
 8001836:	7863      	ldrb	r3, [r4, #1]
 8001838:	2b2a      	cmp	r3, #42	@ 0x2a
 800183a:	d132      	bne.n	80018a2 <_svfiprintf_r+0x186>
 800183c:	9b03      	ldr	r3, [sp, #12]
 800183e:	1d1a      	adds	r2, r3, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	9203      	str	r2, [sp, #12]
 8001844:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001848:	3402      	adds	r4, #2
 800184a:	9305      	str	r3, [sp, #20]
 800184c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001910 <_svfiprintf_r+0x1f4>
 8001850:	7821      	ldrb	r1, [r4, #0]
 8001852:	2203      	movs	r2, #3
 8001854:	4650      	mov	r0, sl
 8001856:	f7fe fcc3 	bl	80001e0 <memchr>
 800185a:	b138      	cbz	r0, 800186c <_svfiprintf_r+0x150>
 800185c:	9b04      	ldr	r3, [sp, #16]
 800185e:	eba0 000a 	sub.w	r0, r0, sl
 8001862:	2240      	movs	r2, #64	@ 0x40
 8001864:	4082      	lsls	r2, r0
 8001866:	4313      	orrs	r3, r2
 8001868:	3401      	adds	r4, #1
 800186a:	9304      	str	r3, [sp, #16]
 800186c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001870:	4824      	ldr	r0, [pc, #144]	@ (8001904 <_svfiprintf_r+0x1e8>)
 8001872:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001876:	2206      	movs	r2, #6
 8001878:	f7fe fcb2 	bl	80001e0 <memchr>
 800187c:	2800      	cmp	r0, #0
 800187e:	d036      	beq.n	80018ee <_svfiprintf_r+0x1d2>
 8001880:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <_svfiprintf_r+0x1ec>)
 8001882:	bb1b      	cbnz	r3, 80018cc <_svfiprintf_r+0x1b0>
 8001884:	9b03      	ldr	r3, [sp, #12]
 8001886:	3307      	adds	r3, #7
 8001888:	f023 0307 	bic.w	r3, r3, #7
 800188c:	3308      	adds	r3, #8
 800188e:	9303      	str	r3, [sp, #12]
 8001890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001892:	4433      	add	r3, r6
 8001894:	9309      	str	r3, [sp, #36]	@ 0x24
 8001896:	e76a      	b.n	800176e <_svfiprintf_r+0x52>
 8001898:	fb0c 3202 	mla	r2, ip, r2, r3
 800189c:	460c      	mov	r4, r1
 800189e:	2001      	movs	r0, #1
 80018a0:	e7a8      	b.n	80017f4 <_svfiprintf_r+0xd8>
 80018a2:	2300      	movs	r3, #0
 80018a4:	3401      	adds	r4, #1
 80018a6:	9305      	str	r3, [sp, #20]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f04f 0c0a 	mov.w	ip, #10
 80018ae:	4620      	mov	r0, r4
 80018b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018b4:	3a30      	subs	r2, #48	@ 0x30
 80018b6:	2a09      	cmp	r2, #9
 80018b8:	d903      	bls.n	80018c2 <_svfiprintf_r+0x1a6>
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0c6      	beq.n	800184c <_svfiprintf_r+0x130>
 80018be:	9105      	str	r1, [sp, #20]
 80018c0:	e7c4      	b.n	800184c <_svfiprintf_r+0x130>
 80018c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80018c6:	4604      	mov	r4, r0
 80018c8:	2301      	movs	r3, #1
 80018ca:	e7f0      	b.n	80018ae <_svfiprintf_r+0x192>
 80018cc:	ab03      	add	r3, sp, #12
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	462a      	mov	r2, r5
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <_svfiprintf_r+0x1f0>)
 80018d4:	a904      	add	r1, sp, #16
 80018d6:	4638      	mov	r0, r7
 80018d8:	f3af 8000 	nop.w
 80018dc:	1c42      	adds	r2, r0, #1
 80018de:	4606      	mov	r6, r0
 80018e0:	d1d6      	bne.n	8001890 <_svfiprintf_r+0x174>
 80018e2:	89ab      	ldrh	r3, [r5, #12]
 80018e4:	065b      	lsls	r3, r3, #25
 80018e6:	f53f af2d 	bmi.w	8001744 <_svfiprintf_r+0x28>
 80018ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80018ec:	e72c      	b.n	8001748 <_svfiprintf_r+0x2c>
 80018ee:	ab03      	add	r3, sp, #12
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	462a      	mov	r2, r5
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <_svfiprintf_r+0x1f0>)
 80018f6:	a904      	add	r1, sp, #16
 80018f8:	4638      	mov	r0, r7
 80018fa:	f000 f879 	bl	80019f0 <_printf_i>
 80018fe:	e7ed      	b.n	80018dc <_svfiprintf_r+0x1c0>
 8001900:	08002578 	.word	0x08002578
 8001904:	08002582 	.word	0x08002582
 8001908:	00000000 	.word	0x00000000
 800190c:	08001665 	.word	0x08001665
 8001910:	0800257e 	.word	0x0800257e

08001914 <_printf_common>:
 8001914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001918:	4616      	mov	r6, r2
 800191a:	4698      	mov	r8, r3
 800191c:	688a      	ldr	r2, [r1, #8]
 800191e:	690b      	ldr	r3, [r1, #16]
 8001920:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001924:	4293      	cmp	r3, r2
 8001926:	bfb8      	it	lt
 8001928:	4613      	movlt	r3, r2
 800192a:	6033      	str	r3, [r6, #0]
 800192c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001930:	4607      	mov	r7, r0
 8001932:	460c      	mov	r4, r1
 8001934:	b10a      	cbz	r2, 800193a <_printf_common+0x26>
 8001936:	3301      	adds	r3, #1
 8001938:	6033      	str	r3, [r6, #0]
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	0699      	lsls	r1, r3, #26
 800193e:	bf42      	ittt	mi
 8001940:	6833      	ldrmi	r3, [r6, #0]
 8001942:	3302      	addmi	r3, #2
 8001944:	6033      	strmi	r3, [r6, #0]
 8001946:	6825      	ldr	r5, [r4, #0]
 8001948:	f015 0506 	ands.w	r5, r5, #6
 800194c:	d106      	bne.n	800195c <_printf_common+0x48>
 800194e:	f104 0a19 	add.w	sl, r4, #25
 8001952:	68e3      	ldr	r3, [r4, #12]
 8001954:	6832      	ldr	r2, [r6, #0]
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	42ab      	cmp	r3, r5
 800195a:	dc26      	bgt.n	80019aa <_printf_common+0x96>
 800195c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001960:	6822      	ldr	r2, [r4, #0]
 8001962:	3b00      	subs	r3, #0
 8001964:	bf18      	it	ne
 8001966:	2301      	movne	r3, #1
 8001968:	0692      	lsls	r2, r2, #26
 800196a:	d42b      	bmi.n	80019c4 <_printf_common+0xb0>
 800196c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001970:	4641      	mov	r1, r8
 8001972:	4638      	mov	r0, r7
 8001974:	47c8      	blx	r9
 8001976:	3001      	adds	r0, #1
 8001978:	d01e      	beq.n	80019b8 <_printf_common+0xa4>
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	6922      	ldr	r2, [r4, #16]
 800197e:	f003 0306 	and.w	r3, r3, #6
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf02      	ittt	eq
 8001986:	68e5      	ldreq	r5, [r4, #12]
 8001988:	6833      	ldreq	r3, [r6, #0]
 800198a:	1aed      	subeq	r5, r5, r3
 800198c:	68a3      	ldr	r3, [r4, #8]
 800198e:	bf0c      	ite	eq
 8001990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001994:	2500      	movne	r5, #0
 8001996:	4293      	cmp	r3, r2
 8001998:	bfc4      	itt	gt
 800199a:	1a9b      	subgt	r3, r3, r2
 800199c:	18ed      	addgt	r5, r5, r3
 800199e:	2600      	movs	r6, #0
 80019a0:	341a      	adds	r4, #26
 80019a2:	42b5      	cmp	r5, r6
 80019a4:	d11a      	bne.n	80019dc <_printf_common+0xc8>
 80019a6:	2000      	movs	r0, #0
 80019a8:	e008      	b.n	80019bc <_printf_common+0xa8>
 80019aa:	2301      	movs	r3, #1
 80019ac:	4652      	mov	r2, sl
 80019ae:	4641      	mov	r1, r8
 80019b0:	4638      	mov	r0, r7
 80019b2:	47c8      	blx	r9
 80019b4:	3001      	adds	r0, #1
 80019b6:	d103      	bne.n	80019c0 <_printf_common+0xac>
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019c0:	3501      	adds	r5, #1
 80019c2:	e7c6      	b.n	8001952 <_printf_common+0x3e>
 80019c4:	18e1      	adds	r1, r4, r3
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	2030      	movs	r0, #48	@ 0x30
 80019ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80019ce:	4422      	add	r2, r4
 80019d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80019d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80019d8:	3302      	adds	r3, #2
 80019da:	e7c7      	b.n	800196c <_printf_common+0x58>
 80019dc:	2301      	movs	r3, #1
 80019de:	4622      	mov	r2, r4
 80019e0:	4641      	mov	r1, r8
 80019e2:	4638      	mov	r0, r7
 80019e4:	47c8      	blx	r9
 80019e6:	3001      	adds	r0, #1
 80019e8:	d0e6      	beq.n	80019b8 <_printf_common+0xa4>
 80019ea:	3601      	adds	r6, #1
 80019ec:	e7d9      	b.n	80019a2 <_printf_common+0x8e>
	...

080019f0 <_printf_i>:
 80019f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019f4:	7e0f      	ldrb	r7, [r1, #24]
 80019f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80019f8:	2f78      	cmp	r7, #120	@ 0x78
 80019fa:	4691      	mov	r9, r2
 80019fc:	4680      	mov	r8, r0
 80019fe:	460c      	mov	r4, r1
 8001a00:	469a      	mov	sl, r3
 8001a02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001a06:	d807      	bhi.n	8001a18 <_printf_i+0x28>
 8001a08:	2f62      	cmp	r7, #98	@ 0x62
 8001a0a:	d80a      	bhi.n	8001a22 <_printf_i+0x32>
 8001a0c:	2f00      	cmp	r7, #0
 8001a0e:	f000 80d1 	beq.w	8001bb4 <_printf_i+0x1c4>
 8001a12:	2f58      	cmp	r7, #88	@ 0x58
 8001a14:	f000 80b8 	beq.w	8001b88 <_printf_i+0x198>
 8001a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a20:	e03a      	b.n	8001a98 <_printf_i+0xa8>
 8001a22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a26:	2b15      	cmp	r3, #21
 8001a28:	d8f6      	bhi.n	8001a18 <_printf_i+0x28>
 8001a2a:	a101      	add	r1, pc, #4	@ (adr r1, 8001a30 <_printf_i+0x40>)
 8001a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a30:	08001a89 	.word	0x08001a89
 8001a34:	08001a9d 	.word	0x08001a9d
 8001a38:	08001a19 	.word	0x08001a19
 8001a3c:	08001a19 	.word	0x08001a19
 8001a40:	08001a19 	.word	0x08001a19
 8001a44:	08001a19 	.word	0x08001a19
 8001a48:	08001a9d 	.word	0x08001a9d
 8001a4c:	08001a19 	.word	0x08001a19
 8001a50:	08001a19 	.word	0x08001a19
 8001a54:	08001a19 	.word	0x08001a19
 8001a58:	08001a19 	.word	0x08001a19
 8001a5c:	08001b9b 	.word	0x08001b9b
 8001a60:	08001ac7 	.word	0x08001ac7
 8001a64:	08001b55 	.word	0x08001b55
 8001a68:	08001a19 	.word	0x08001a19
 8001a6c:	08001a19 	.word	0x08001a19
 8001a70:	08001bbd 	.word	0x08001bbd
 8001a74:	08001a19 	.word	0x08001a19
 8001a78:	08001ac7 	.word	0x08001ac7
 8001a7c:	08001a19 	.word	0x08001a19
 8001a80:	08001a19 	.word	0x08001a19
 8001a84:	08001b5d 	.word	0x08001b5d
 8001a88:	6833      	ldr	r3, [r6, #0]
 8001a8a:	1d1a      	adds	r2, r3, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6032      	str	r2, [r6, #0]
 8001a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e09c      	b.n	8001bd6 <_printf_i+0x1e6>
 8001a9c:	6833      	ldr	r3, [r6, #0]
 8001a9e:	6820      	ldr	r0, [r4, #0]
 8001aa0:	1d19      	adds	r1, r3, #4
 8001aa2:	6031      	str	r1, [r6, #0]
 8001aa4:	0606      	lsls	r6, r0, #24
 8001aa6:	d501      	bpl.n	8001aac <_printf_i+0xbc>
 8001aa8:	681d      	ldr	r5, [r3, #0]
 8001aaa:	e003      	b.n	8001ab4 <_printf_i+0xc4>
 8001aac:	0645      	lsls	r5, r0, #25
 8001aae:	d5fb      	bpl.n	8001aa8 <_printf_i+0xb8>
 8001ab0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ab4:	2d00      	cmp	r5, #0
 8001ab6:	da03      	bge.n	8001ac0 <_printf_i+0xd0>
 8001ab8:	232d      	movs	r3, #45	@ 0x2d
 8001aba:	426d      	negs	r5, r5
 8001abc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ac0:	4858      	ldr	r0, [pc, #352]	@ (8001c24 <_printf_i+0x234>)
 8001ac2:	230a      	movs	r3, #10
 8001ac4:	e011      	b.n	8001aea <_printf_i+0xfa>
 8001ac6:	6821      	ldr	r1, [r4, #0]
 8001ac8:	6833      	ldr	r3, [r6, #0]
 8001aca:	0608      	lsls	r0, r1, #24
 8001acc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001ad0:	d402      	bmi.n	8001ad8 <_printf_i+0xe8>
 8001ad2:	0649      	lsls	r1, r1, #25
 8001ad4:	bf48      	it	mi
 8001ad6:	b2ad      	uxthmi	r5, r5
 8001ad8:	2f6f      	cmp	r7, #111	@ 0x6f
 8001ada:	4852      	ldr	r0, [pc, #328]	@ (8001c24 <_printf_i+0x234>)
 8001adc:	6033      	str	r3, [r6, #0]
 8001ade:	bf14      	ite	ne
 8001ae0:	230a      	movne	r3, #10
 8001ae2:	2308      	moveq	r3, #8
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001aea:	6866      	ldr	r6, [r4, #4]
 8001aec:	60a6      	str	r6, [r4, #8]
 8001aee:	2e00      	cmp	r6, #0
 8001af0:	db05      	blt.n	8001afe <_printf_i+0x10e>
 8001af2:	6821      	ldr	r1, [r4, #0]
 8001af4:	432e      	orrs	r6, r5
 8001af6:	f021 0104 	bic.w	r1, r1, #4
 8001afa:	6021      	str	r1, [r4, #0]
 8001afc:	d04b      	beq.n	8001b96 <_printf_i+0x1a6>
 8001afe:	4616      	mov	r6, r2
 8001b00:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b04:	fb03 5711 	mls	r7, r3, r1, r5
 8001b08:	5dc7      	ldrb	r7, [r0, r7]
 8001b0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b0e:	462f      	mov	r7, r5
 8001b10:	42bb      	cmp	r3, r7
 8001b12:	460d      	mov	r5, r1
 8001b14:	d9f4      	bls.n	8001b00 <_printf_i+0x110>
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d10b      	bne.n	8001b32 <_printf_i+0x142>
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	07df      	lsls	r7, r3, #31
 8001b1e:	d508      	bpl.n	8001b32 <_printf_i+0x142>
 8001b20:	6923      	ldr	r3, [r4, #16]
 8001b22:	6861      	ldr	r1, [r4, #4]
 8001b24:	4299      	cmp	r1, r3
 8001b26:	bfde      	ittt	le
 8001b28:	2330      	movle	r3, #48	@ 0x30
 8001b2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b32:	1b92      	subs	r2, r2, r6
 8001b34:	6122      	str	r2, [r4, #16]
 8001b36:	f8cd a000 	str.w	sl, [sp]
 8001b3a:	464b      	mov	r3, r9
 8001b3c:	aa03      	add	r2, sp, #12
 8001b3e:	4621      	mov	r1, r4
 8001b40:	4640      	mov	r0, r8
 8001b42:	f7ff fee7 	bl	8001914 <_printf_common>
 8001b46:	3001      	adds	r0, #1
 8001b48:	d14a      	bne.n	8001be0 <_printf_i+0x1f0>
 8001b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4e:	b004      	add	sp, #16
 8001b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	f043 0320 	orr.w	r3, r3, #32
 8001b5a:	6023      	str	r3, [r4, #0]
 8001b5c:	4832      	ldr	r0, [pc, #200]	@ (8001c28 <_printf_i+0x238>)
 8001b5e:	2778      	movs	r7, #120	@ 0x78
 8001b60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	6831      	ldr	r1, [r6, #0]
 8001b68:	061f      	lsls	r7, r3, #24
 8001b6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8001b6e:	d402      	bmi.n	8001b76 <_printf_i+0x186>
 8001b70:	065f      	lsls	r7, r3, #25
 8001b72:	bf48      	it	mi
 8001b74:	b2ad      	uxthmi	r5, r5
 8001b76:	6031      	str	r1, [r6, #0]
 8001b78:	07d9      	lsls	r1, r3, #31
 8001b7a:	bf44      	itt	mi
 8001b7c:	f043 0320 	orrmi.w	r3, r3, #32
 8001b80:	6023      	strmi	r3, [r4, #0]
 8001b82:	b11d      	cbz	r5, 8001b8c <_printf_i+0x19c>
 8001b84:	2310      	movs	r3, #16
 8001b86:	e7ad      	b.n	8001ae4 <_printf_i+0xf4>
 8001b88:	4826      	ldr	r0, [pc, #152]	@ (8001c24 <_printf_i+0x234>)
 8001b8a:	e7e9      	b.n	8001b60 <_printf_i+0x170>
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	f023 0320 	bic.w	r3, r3, #32
 8001b92:	6023      	str	r3, [r4, #0]
 8001b94:	e7f6      	b.n	8001b84 <_printf_i+0x194>
 8001b96:	4616      	mov	r6, r2
 8001b98:	e7bd      	b.n	8001b16 <_printf_i+0x126>
 8001b9a:	6833      	ldr	r3, [r6, #0]
 8001b9c:	6825      	ldr	r5, [r4, #0]
 8001b9e:	6961      	ldr	r1, [r4, #20]
 8001ba0:	1d18      	adds	r0, r3, #4
 8001ba2:	6030      	str	r0, [r6, #0]
 8001ba4:	062e      	lsls	r6, r5, #24
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	d501      	bpl.n	8001bae <_printf_i+0x1be>
 8001baa:	6019      	str	r1, [r3, #0]
 8001bac:	e002      	b.n	8001bb4 <_printf_i+0x1c4>
 8001bae:	0668      	lsls	r0, r5, #25
 8001bb0:	d5fb      	bpl.n	8001baa <_printf_i+0x1ba>
 8001bb2:	8019      	strh	r1, [r3, #0]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	6123      	str	r3, [r4, #16]
 8001bb8:	4616      	mov	r6, r2
 8001bba:	e7bc      	b.n	8001b36 <_printf_i+0x146>
 8001bbc:	6833      	ldr	r3, [r6, #0]
 8001bbe:	1d1a      	adds	r2, r3, #4
 8001bc0:	6032      	str	r2, [r6, #0]
 8001bc2:	681e      	ldr	r6, [r3, #0]
 8001bc4:	6862      	ldr	r2, [r4, #4]
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4630      	mov	r0, r6
 8001bca:	f7fe fb09 	bl	80001e0 <memchr>
 8001bce:	b108      	cbz	r0, 8001bd4 <_printf_i+0x1e4>
 8001bd0:	1b80      	subs	r0, r0, r6
 8001bd2:	6060      	str	r0, [r4, #4]
 8001bd4:	6863      	ldr	r3, [r4, #4]
 8001bd6:	6123      	str	r3, [r4, #16]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001bde:	e7aa      	b.n	8001b36 <_printf_i+0x146>
 8001be0:	6923      	ldr	r3, [r4, #16]
 8001be2:	4632      	mov	r2, r6
 8001be4:	4649      	mov	r1, r9
 8001be6:	4640      	mov	r0, r8
 8001be8:	47d0      	blx	sl
 8001bea:	3001      	adds	r0, #1
 8001bec:	d0ad      	beq.n	8001b4a <_printf_i+0x15a>
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	079b      	lsls	r3, r3, #30
 8001bf2:	d413      	bmi.n	8001c1c <_printf_i+0x22c>
 8001bf4:	68e0      	ldr	r0, [r4, #12]
 8001bf6:	9b03      	ldr	r3, [sp, #12]
 8001bf8:	4298      	cmp	r0, r3
 8001bfa:	bfb8      	it	lt
 8001bfc:	4618      	movlt	r0, r3
 8001bfe:	e7a6      	b.n	8001b4e <_printf_i+0x15e>
 8001c00:	2301      	movs	r3, #1
 8001c02:	4632      	mov	r2, r6
 8001c04:	4649      	mov	r1, r9
 8001c06:	4640      	mov	r0, r8
 8001c08:	47d0      	blx	sl
 8001c0a:	3001      	adds	r0, #1
 8001c0c:	d09d      	beq.n	8001b4a <_printf_i+0x15a>
 8001c0e:	3501      	adds	r5, #1
 8001c10:	68e3      	ldr	r3, [r4, #12]
 8001c12:	9903      	ldr	r1, [sp, #12]
 8001c14:	1a5b      	subs	r3, r3, r1
 8001c16:	42ab      	cmp	r3, r5
 8001c18:	dcf2      	bgt.n	8001c00 <_printf_i+0x210>
 8001c1a:	e7eb      	b.n	8001bf4 <_printf_i+0x204>
 8001c1c:	2500      	movs	r5, #0
 8001c1e:	f104 0619 	add.w	r6, r4, #25
 8001c22:	e7f5      	b.n	8001c10 <_printf_i+0x220>
 8001c24:	08002589 	.word	0x08002589
 8001c28:	0800259a 	.word	0x0800259a

08001c2c <memmove>:
 8001c2c:	4288      	cmp	r0, r1
 8001c2e:	b510      	push	{r4, lr}
 8001c30:	eb01 0402 	add.w	r4, r1, r2
 8001c34:	d902      	bls.n	8001c3c <memmove+0x10>
 8001c36:	4284      	cmp	r4, r0
 8001c38:	4623      	mov	r3, r4
 8001c3a:	d807      	bhi.n	8001c4c <memmove+0x20>
 8001c3c:	1e43      	subs	r3, r0, #1
 8001c3e:	42a1      	cmp	r1, r4
 8001c40:	d008      	beq.n	8001c54 <memmove+0x28>
 8001c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c4a:	e7f8      	b.n	8001c3e <memmove+0x12>
 8001c4c:	4402      	add	r2, r0
 8001c4e:	4601      	mov	r1, r0
 8001c50:	428a      	cmp	r2, r1
 8001c52:	d100      	bne.n	8001c56 <memmove+0x2a>
 8001c54:	bd10      	pop	{r4, pc}
 8001c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c5e:	e7f7      	b.n	8001c50 <memmove+0x24>

08001c60 <_sbrk_r>:
 8001c60:	b538      	push	{r3, r4, r5, lr}
 8001c62:	4d06      	ldr	r5, [pc, #24]	@ (8001c7c <_sbrk_r+0x1c>)
 8001c64:	2300      	movs	r3, #0
 8001c66:	4604      	mov	r4, r0
 8001c68:	4608      	mov	r0, r1
 8001c6a:	602b      	str	r3, [r5, #0]
 8001c6c:	f7ff f9c6 	bl	8000ffc <_sbrk>
 8001c70:	1c43      	adds	r3, r0, #1
 8001c72:	d102      	bne.n	8001c7a <_sbrk_r+0x1a>
 8001c74:	682b      	ldr	r3, [r5, #0]
 8001c76:	b103      	cbz	r3, 8001c7a <_sbrk_r+0x1a>
 8001c78:	6023      	str	r3, [r4, #0]
 8001c7a:	bd38      	pop	{r3, r4, r5, pc}
 8001c7c:	200001f0 	.word	0x200001f0

08001c80 <memcpy>:
 8001c80:	440a      	add	r2, r1
 8001c82:	4291      	cmp	r1, r2
 8001c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8001c88:	d100      	bne.n	8001c8c <memcpy+0xc>
 8001c8a:	4770      	bx	lr
 8001c8c:	b510      	push	{r4, lr}
 8001c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c96:	4291      	cmp	r1, r2
 8001c98:	d1f9      	bne.n	8001c8e <memcpy+0xe>
 8001c9a:	bd10      	pop	{r4, pc}

08001c9c <_realloc_r>:
 8001c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ca0:	4607      	mov	r7, r0
 8001ca2:	4614      	mov	r4, r2
 8001ca4:	460d      	mov	r5, r1
 8001ca6:	b921      	cbnz	r1, 8001cb2 <_realloc_r+0x16>
 8001ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cac:	4611      	mov	r1, r2
 8001cae:	f7ff bc4d 	b.w	800154c <_malloc_r>
 8001cb2:	b92a      	cbnz	r2, 8001cc0 <_realloc_r+0x24>
 8001cb4:	f7ff fbde 	bl	8001474 <_free_r>
 8001cb8:	4625      	mov	r5, r4
 8001cba:	4628      	mov	r0, r5
 8001cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cc0:	f000 f81a 	bl	8001cf8 <_malloc_usable_size_r>
 8001cc4:	4284      	cmp	r4, r0
 8001cc6:	4606      	mov	r6, r0
 8001cc8:	d802      	bhi.n	8001cd0 <_realloc_r+0x34>
 8001cca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001cce:	d8f4      	bhi.n	8001cba <_realloc_r+0x1e>
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	4638      	mov	r0, r7
 8001cd4:	f7ff fc3a 	bl	800154c <_malloc_r>
 8001cd8:	4680      	mov	r8, r0
 8001cda:	b908      	cbnz	r0, 8001ce0 <_realloc_r+0x44>
 8001cdc:	4645      	mov	r5, r8
 8001cde:	e7ec      	b.n	8001cba <_realloc_r+0x1e>
 8001ce0:	42b4      	cmp	r4, r6
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	bf28      	it	cs
 8001ce8:	4632      	movcs	r2, r6
 8001cea:	f7ff ffc9 	bl	8001c80 <memcpy>
 8001cee:	4629      	mov	r1, r5
 8001cf0:	4638      	mov	r0, r7
 8001cf2:	f7ff fbbf 	bl	8001474 <_free_r>
 8001cf6:	e7f1      	b.n	8001cdc <_realloc_r+0x40>

08001cf8 <_malloc_usable_size_r>:
 8001cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cfc:	1f18      	subs	r0, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	bfbc      	itt	lt
 8001d02:	580b      	ldrlt	r3, [r1, r0]
 8001d04:	18c0      	addlt	r0, r0, r3
 8001d06:	4770      	bx	lr

08001d08 <powf>:
 8001d08:	b508      	push	{r3, lr}
 8001d0a:	ed2d 8b04 	vpush	{d8-d9}
 8001d0e:	eeb0 8a60 	vmov.f32	s16, s1
 8001d12:	eeb0 9a40 	vmov.f32	s18, s0
 8001d16:	f000 f859 	bl	8001dcc <__ieee754_powf>
 8001d1a:	eeb4 8a48 	vcmp.f32	s16, s16
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	eef0 8a40 	vmov.f32	s17, s0
 8001d26:	d63e      	bvs.n	8001da6 <powf+0x9e>
 8001d28:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d30:	d112      	bne.n	8001d58 <powf+0x50>
 8001d32:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3a:	d039      	beq.n	8001db0 <powf+0xa8>
 8001d3c:	eeb0 0a48 	vmov.f32	s0, s16
 8001d40:	f000 f839 	bl	8001db6 <finitef>
 8001d44:	b378      	cbz	r0, 8001da6 <powf+0x9e>
 8001d46:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d52a      	bpl.n	8001da6 <powf+0x9e>
 8001d50:	f7ff fb64 	bl	800141c <__errno>
 8001d54:	2322      	movs	r3, #34	@ 0x22
 8001d56:	e014      	b.n	8001d82 <powf+0x7a>
 8001d58:	f000 f82d 	bl	8001db6 <finitef>
 8001d5c:	b998      	cbnz	r0, 8001d86 <powf+0x7e>
 8001d5e:	eeb0 0a49 	vmov.f32	s0, s18
 8001d62:	f000 f828 	bl	8001db6 <finitef>
 8001d66:	b170      	cbz	r0, 8001d86 <powf+0x7e>
 8001d68:	eeb0 0a48 	vmov.f32	s0, s16
 8001d6c:	f000 f823 	bl	8001db6 <finitef>
 8001d70:	b148      	cbz	r0, 8001d86 <powf+0x7e>
 8001d72:	eef4 8a68 	vcmp.f32	s17, s17
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d7e9      	bvc.n	8001d50 <powf+0x48>
 8001d7c:	f7ff fb4e 	bl	800141c <__errno>
 8001d80:	2321      	movs	r3, #33	@ 0x21
 8001d82:	6003      	str	r3, [r0, #0]
 8001d84:	e00f      	b.n	8001da6 <powf+0x9e>
 8001d86:	eef5 8a40 	vcmp.f32	s17, #0.0
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	d10a      	bne.n	8001da6 <powf+0x9e>
 8001d90:	eeb0 0a49 	vmov.f32	s0, s18
 8001d94:	f000 f80f 	bl	8001db6 <finitef>
 8001d98:	b128      	cbz	r0, 8001da6 <powf+0x9e>
 8001d9a:	eeb0 0a48 	vmov.f32	s0, s16
 8001d9e:	f000 f80a 	bl	8001db6 <finitef>
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d1d4      	bne.n	8001d50 <powf+0x48>
 8001da6:	eeb0 0a68 	vmov.f32	s0, s17
 8001daa:	ecbd 8b04 	vpop	{d8-d9}
 8001dae:	bd08      	pop	{r3, pc}
 8001db0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8001db4:	e7f7      	b.n	8001da6 <powf+0x9e>

08001db6 <finitef>:
 8001db6:	ee10 3a10 	vmov	r3, s0
 8001dba:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8001dbe:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8001dc2:	bfac      	ite	ge
 8001dc4:	2000      	movge	r0, #0
 8001dc6:	2001      	movlt	r0, #1
 8001dc8:	4770      	bx	lr
	...

08001dcc <__ieee754_powf>:
 8001dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dd0:	ee10 4a90 	vmov	r4, s1
 8001dd4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8001dd8:	ed2d 8b02 	vpush	{d8}
 8001ddc:	ee10 6a10 	vmov	r6, s0
 8001de0:	eeb0 8a40 	vmov.f32	s16, s0
 8001de4:	eef0 8a60 	vmov.f32	s17, s1
 8001de8:	d10c      	bne.n	8001e04 <__ieee754_powf+0x38>
 8001dea:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8001dee:	0076      	lsls	r6, r6, #1
 8001df0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8001df4:	f240 8274 	bls.w	80022e0 <__ieee754_powf+0x514>
 8001df8:	ee38 0a28 	vadd.f32	s0, s16, s17
 8001dfc:	ecbd 8b02 	vpop	{d8}
 8001e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e04:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8001e08:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8001e0c:	d802      	bhi.n	8001e14 <__ieee754_powf+0x48>
 8001e0e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8001e12:	d908      	bls.n	8001e26 <__ieee754_powf+0x5a>
 8001e14:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8001e18:	d1ee      	bne.n	8001df8 <__ieee754_powf+0x2c>
 8001e1a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8001e1e:	0064      	lsls	r4, r4, #1
 8001e20:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8001e24:	e7e6      	b.n	8001df4 <__ieee754_powf+0x28>
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	da1f      	bge.n	8001e6a <__ieee754_powf+0x9e>
 8001e2a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8001e2e:	f080 8260 	bcs.w	80022f2 <__ieee754_powf+0x526>
 8001e32:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8001e36:	d32f      	bcc.n	8001e98 <__ieee754_powf+0xcc>
 8001e38:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8001e3c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8001e40:	fa49 f503 	asr.w	r5, r9, r3
 8001e44:	fa05 f303 	lsl.w	r3, r5, r3
 8001e48:	454b      	cmp	r3, r9
 8001e4a:	d123      	bne.n	8001e94 <__ieee754_powf+0xc8>
 8001e4c:	f005 0501 	and.w	r5, r5, #1
 8001e50:	f1c5 0502 	rsb	r5, r5, #2
 8001e54:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8001e58:	d11f      	bne.n	8001e9a <__ieee754_powf+0xce>
 8001e5a:	2c00      	cmp	r4, #0
 8001e5c:	f280 8246 	bge.w	80022ec <__ieee754_powf+0x520>
 8001e60:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001e64:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8001e68:	e7c8      	b.n	8001dfc <__ieee754_powf+0x30>
 8001e6a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8001e6e:	d111      	bne.n	8001e94 <__ieee754_powf+0xc8>
 8001e70:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8001e74:	f000 8234 	beq.w	80022e0 <__ieee754_powf+0x514>
 8001e78:	d906      	bls.n	8001e88 <__ieee754_powf+0xbc>
 8001e7a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8002190 <__ieee754_powf+0x3c4>
 8001e7e:	2c00      	cmp	r4, #0
 8001e80:	bfa8      	it	ge
 8001e82:	eeb0 0a68 	vmovge.f32	s0, s17
 8001e86:	e7b9      	b.n	8001dfc <__ieee754_powf+0x30>
 8001e88:	2c00      	cmp	r4, #0
 8001e8a:	f280 822c 	bge.w	80022e6 <__ieee754_powf+0x51a>
 8001e8e:	eeb1 0a68 	vneg.f32	s0, s17
 8001e92:	e7b3      	b.n	8001dfc <__ieee754_powf+0x30>
 8001e94:	2500      	movs	r5, #0
 8001e96:	e7dd      	b.n	8001e54 <__ieee754_powf+0x88>
 8001e98:	2500      	movs	r5, #0
 8001e9a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8001e9e:	d102      	bne.n	8001ea6 <__ieee754_powf+0xda>
 8001ea0:	ee28 0a08 	vmul.f32	s0, s16, s16
 8001ea4:	e7aa      	b.n	8001dfc <__ieee754_powf+0x30>
 8001ea6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8001eaa:	f040 8227 	bne.w	80022fc <__ieee754_powf+0x530>
 8001eae:	2e00      	cmp	r6, #0
 8001eb0:	f2c0 8224 	blt.w	80022fc <__ieee754_powf+0x530>
 8001eb4:	eeb0 0a48 	vmov.f32	s0, s16
 8001eb8:	ecbd 8b02 	vpop	{d8}
 8001ebc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ec0:	f000 bae6 	b.w	8002490 <__ieee754_sqrtf>
 8001ec4:	2d01      	cmp	r5, #1
 8001ec6:	d199      	bne.n	8001dfc <__ieee754_powf+0x30>
 8001ec8:	eeb1 0a40 	vneg.f32	s0, s0
 8001ecc:	e796      	b.n	8001dfc <__ieee754_powf+0x30>
 8001ece:	0ff0      	lsrs	r0, r6, #31
 8001ed0:	3801      	subs	r0, #1
 8001ed2:	ea55 0300 	orrs.w	r3, r5, r0
 8001ed6:	d104      	bne.n	8001ee2 <__ieee754_powf+0x116>
 8001ed8:	ee38 8a48 	vsub.f32	s16, s16, s16
 8001edc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8001ee0:	e78c      	b.n	8001dfc <__ieee754_powf+0x30>
 8001ee2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8001ee6:	d96d      	bls.n	8001fc4 <__ieee754_powf+0x1f8>
 8001ee8:	4baa      	ldr	r3, [pc, #680]	@ (8002194 <__ieee754_powf+0x3c8>)
 8001eea:	4598      	cmp	r8, r3
 8001eec:	d808      	bhi.n	8001f00 <__ieee754_powf+0x134>
 8001eee:	2c00      	cmp	r4, #0
 8001ef0:	da0b      	bge.n	8001f0a <__ieee754_powf+0x13e>
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	ecbd 8b02 	vpop	{d8}
 8001ef8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001efc:	f000 bac2 	b.w	8002484 <__math_oflowf>
 8001f00:	4ba5      	ldr	r3, [pc, #660]	@ (8002198 <__ieee754_powf+0x3cc>)
 8001f02:	4598      	cmp	r8, r3
 8001f04:	d908      	bls.n	8001f18 <__ieee754_powf+0x14c>
 8001f06:	2c00      	cmp	r4, #0
 8001f08:	dcf3      	bgt.n	8001ef2 <__ieee754_powf+0x126>
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	ecbd 8b02 	vpop	{d8}
 8001f10:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f14:	f000 bab0 	b.w	8002478 <__math_uflowf>
 8001f18:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001f1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001f20:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800219c <__ieee754_powf+0x3d0>
 8001f24:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8001f28:	eee0 6a67 	vfms.f32	s13, s0, s15
 8001f2c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8001f30:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8001f34:	ee20 7a00 	vmul.f32	s14, s0, s0
 8001f38:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80021a0 <__ieee754_powf+0x3d4>
 8001f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f40:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80021a4 <__ieee754_powf+0x3d8>
 8001f44:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8001f48:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80021a8 <__ieee754_powf+0x3dc>
 8001f4c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001f50:	eeb0 7a67 	vmov.f32	s14, s15
 8001f54:	eea0 7a26 	vfma.f32	s14, s0, s13
 8001f58:	ee17 3a10 	vmov	r3, s14
 8001f5c:	f36f 030b 	bfc	r3, #0, #12
 8001f60:	ee07 3a10 	vmov	s14, r3
 8001f64:	eeb0 6a47 	vmov.f32	s12, s14
 8001f68:	eea0 6a66 	vfms.f32	s12, s0, s13
 8001f6c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001f70:	3d01      	subs	r5, #1
 8001f72:	4305      	orrs	r5, r0
 8001f74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f78:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8001f7c:	f36f 040b 	bfc	r4, #0, #12
 8001f80:	bf18      	it	ne
 8001f82:	eeb0 8a66 	vmovne.f32	s16, s13
 8001f86:	ee06 4a90 	vmov	s13, r4
 8001f8a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8001f8e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8001f92:	ee67 7a26 	vmul.f32	s15, s14, s13
 8001f96:	eee6 0a07 	vfma.f32	s1, s12, s14
 8001f9a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8001f9e:	ee17 1a10 	vmov	r1, s14
 8001fa2:	2900      	cmp	r1, #0
 8001fa4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8001fa8:	f340 80dd 	ble.w	8002166 <__ieee754_powf+0x39a>
 8001fac:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8001fb0:	f240 80ca 	bls.w	8002148 <__ieee754_powf+0x37c>
 8001fb4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbc:	bf4c      	ite	mi
 8001fbe:	2001      	movmi	r0, #1
 8001fc0:	2000      	movpl	r0, #0
 8001fc2:	e797      	b.n	8001ef4 <__ieee754_powf+0x128>
 8001fc4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8001fc8:	bf01      	itttt	eq
 8001fca:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80021ac <__ieee754_powf+0x3e0>
 8001fce:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8001fd2:	f06f 0317 	mvneq.w	r3, #23
 8001fd6:	ee17 7a90 	vmoveq	r7, s15
 8001fda:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8001fde:	bf18      	it	ne
 8001fe0:	2300      	movne	r3, #0
 8001fe2:	3a7f      	subs	r2, #127	@ 0x7f
 8001fe4:	441a      	add	r2, r3
 8001fe6:	4b72      	ldr	r3, [pc, #456]	@ (80021b0 <__ieee754_powf+0x3e4>)
 8001fe8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8001fec:	429f      	cmp	r7, r3
 8001fee:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8001ff2:	dd06      	ble.n	8002002 <__ieee754_powf+0x236>
 8001ff4:	4b6f      	ldr	r3, [pc, #444]	@ (80021b4 <__ieee754_powf+0x3e8>)
 8001ff6:	429f      	cmp	r7, r3
 8001ff8:	f340 80a4 	ble.w	8002144 <__ieee754_powf+0x378>
 8001ffc:	3201      	adds	r2, #1
 8001ffe:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8002002:	2600      	movs	r6, #0
 8002004:	4b6c      	ldr	r3, [pc, #432]	@ (80021b8 <__ieee754_powf+0x3ec>)
 8002006:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800200a:	ee07 1a10 	vmov	s14, r1
 800200e:	edd3 5a00 	vldr	s11, [r3]
 8002012:	4b6a      	ldr	r3, [pc, #424]	@ (80021bc <__ieee754_powf+0x3f0>)
 8002014:	ee75 7a87 	vadd.f32	s15, s11, s14
 8002018:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800201c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8002020:	1049      	asrs	r1, r1, #1
 8002022:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8002026:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800202a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800202e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8002032:	ee07 1a90 	vmov	s15, r1
 8002036:	ee26 5a24 	vmul.f32	s10, s12, s9
 800203a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800203e:	ee15 7a10 	vmov	r7, s10
 8002042:	401f      	ands	r7, r3
 8002044:	ee06 7a90 	vmov	s13, r7
 8002048:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800204c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8002050:	ee65 7a05 	vmul.f32	s15, s10, s10
 8002054:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8002058:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80021c0 <__ieee754_powf+0x3f4>
 800205c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80021c4 <__ieee754_powf+0x3f8>
 8002060:	eee7 5a87 	vfma.f32	s11, s15, s14
 8002064:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80021c8 <__ieee754_powf+0x3fc>
 8002068:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800206c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800219c <__ieee754_powf+0x3d0>
 8002070:	eee7 5a27 	vfma.f32	s11, s14, s15
 8002074:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80021cc <__ieee754_powf+0x400>
 8002078:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800207c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80021d0 <__ieee754_powf+0x404>
 8002080:	ee26 6a24 	vmul.f32	s12, s12, s9
 8002084:	eee7 5a27 	vfma.f32	s11, s14, s15
 8002088:	ee35 7a26 	vadd.f32	s14, s10, s13
 800208c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8002090:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002094:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8002098:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800209c:	eef0 5a67 	vmov.f32	s11, s15
 80020a0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80020a4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80020a8:	ee15 1a90 	vmov	r1, s11
 80020ac:	4019      	ands	r1, r3
 80020ae:	ee05 1a90 	vmov	s11, r1
 80020b2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80020b6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80020ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020be:	ee67 7a85 	vmul.f32	s15, s15, s10
 80020c2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80020c6:	eeb0 6a67 	vmov.f32	s12, s15
 80020ca:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80020ce:	ee16 1a10 	vmov	r1, s12
 80020d2:	4019      	ands	r1, r3
 80020d4:	ee06 1a10 	vmov	s12, r1
 80020d8:	eeb0 7a46 	vmov.f32	s14, s12
 80020dc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80020e0:	493c      	ldr	r1, [pc, #240]	@ (80021d4 <__ieee754_powf+0x408>)
 80020e2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80020e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020ea:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80021d8 <__ieee754_powf+0x40c>
 80020ee:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80021dc <__ieee754_powf+0x410>
 80020f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80021e0 <__ieee754_powf+0x414>
 80020fa:	eee6 7a07 	vfma.f32	s15, s12, s14
 80020fe:	ed91 7a00 	vldr	s14, [r1]
 8002102:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002106:	ee07 2a10 	vmov	s14, r2
 800210a:	4a36      	ldr	r2, [pc, #216]	@ (80021e4 <__ieee754_powf+0x418>)
 800210c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002110:	eeb0 7a67 	vmov.f32	s14, s15
 8002114:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002118:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800211c:	ed92 5a00 	vldr	s10, [r2]
 8002120:	ee37 7a05 	vadd.f32	s14, s14, s10
 8002124:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002128:	ee17 2a10 	vmov	r2, s14
 800212c:	401a      	ands	r2, r3
 800212e:	ee07 2a10 	vmov	s14, r2
 8002132:	ee77 6a66 	vsub.f32	s13, s14, s13
 8002136:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800213a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800213e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002142:	e715      	b.n	8001f70 <__ieee754_powf+0x1a4>
 8002144:	2601      	movs	r6, #1
 8002146:	e75d      	b.n	8002004 <__ieee754_powf+0x238>
 8002148:	d152      	bne.n	80021f0 <__ieee754_powf+0x424>
 800214a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80021e8 <__ieee754_powf+0x41c>
 800214e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002152:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8002156:	eef4 6ac7 	vcmpe.f32	s13, s14
 800215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215e:	f73f af29 	bgt.w	8001fb4 <__ieee754_powf+0x1e8>
 8002162:	2386      	movs	r3, #134	@ 0x86
 8002164:	e048      	b.n	80021f8 <__ieee754_powf+0x42c>
 8002166:	4a21      	ldr	r2, [pc, #132]	@ (80021ec <__ieee754_powf+0x420>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d907      	bls.n	800217c <__ieee754_powf+0x3b0>
 800216c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002174:	bf4c      	ite	mi
 8002176:	2001      	movmi	r0, #1
 8002178:	2000      	movpl	r0, #0
 800217a:	e6c7      	b.n	8001f0c <__ieee754_powf+0x140>
 800217c:	d138      	bne.n	80021f0 <__ieee754_powf+0x424>
 800217e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002182:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8002186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218a:	dbea      	blt.n	8002162 <__ieee754_powf+0x396>
 800218c:	e7ee      	b.n	800216c <__ieee754_powf+0x3a0>
 800218e:	bf00      	nop
 8002190:	00000000 	.word	0x00000000
 8002194:	3f7ffff3 	.word	0x3f7ffff3
 8002198:	3f800007 	.word	0x3f800007
 800219c:	3eaaaaab 	.word	0x3eaaaaab
 80021a0:	3fb8aa00 	.word	0x3fb8aa00
 80021a4:	3fb8aa3b 	.word	0x3fb8aa3b
 80021a8:	36eca570 	.word	0x36eca570
 80021ac:	4b800000 	.word	0x4b800000
 80021b0:	001cc471 	.word	0x001cc471
 80021b4:	005db3d6 	.word	0x005db3d6
 80021b8:	080025bc 	.word	0x080025bc
 80021bc:	fffff000 	.word	0xfffff000
 80021c0:	3e6c3255 	.word	0x3e6c3255
 80021c4:	3e53f142 	.word	0x3e53f142
 80021c8:	3e8ba305 	.word	0x3e8ba305
 80021cc:	3edb6db7 	.word	0x3edb6db7
 80021d0:	3f19999a 	.word	0x3f19999a
 80021d4:	080025ac 	.word	0x080025ac
 80021d8:	3f76384f 	.word	0x3f76384f
 80021dc:	3f763800 	.word	0x3f763800
 80021e0:	369dc3a0 	.word	0x369dc3a0
 80021e4:	080025b4 	.word	0x080025b4
 80021e8:	3338aa3c 	.word	0x3338aa3c
 80021ec:	43160000 	.word	0x43160000
 80021f0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80021f4:	d96f      	bls.n	80022d6 <__ieee754_powf+0x50a>
 80021f6:	15db      	asrs	r3, r3, #23
 80021f8:	3b7e      	subs	r3, #126	@ 0x7e
 80021fa:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80021fe:	4118      	asrs	r0, r3
 8002200:	4408      	add	r0, r1
 8002202:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8002206:	4a4e      	ldr	r2, [pc, #312]	@ (8002340 <__ieee754_powf+0x574>)
 8002208:	3b7f      	subs	r3, #127	@ 0x7f
 800220a:	411a      	asrs	r2, r3
 800220c:	4002      	ands	r2, r0
 800220e:	ee07 2a10 	vmov	s14, r2
 8002212:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8002216:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800221a:	f1c3 0317 	rsb	r3, r3, #23
 800221e:	4118      	asrs	r0, r3
 8002220:	2900      	cmp	r1, #0
 8002222:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002226:	bfb8      	it	lt
 8002228:	4240      	neglt	r0, r0
 800222a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800222e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8002344 <__ieee754_powf+0x578>
 8002232:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8002348 <__ieee754_powf+0x57c>
 8002236:	ee16 3a90 	vmov	r3, s13
 800223a:	f36f 030b 	bfc	r3, #0, #12
 800223e:	ee06 3a90 	vmov	s13, r3
 8002242:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002246:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800224a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800224e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800234c <__ieee754_powf+0x580>
 8002252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002256:	eee0 7a87 	vfma.f32	s15, s1, s14
 800225a:	eeb0 7a67 	vmov.f32	s14, s15
 800225e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8002262:	eef0 5a47 	vmov.f32	s11, s14
 8002266:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800226a:	ee67 6a07 	vmul.f32	s13, s14, s14
 800226e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8002272:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8002350 <__ieee754_powf+0x584>
 8002276:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8002354 <__ieee754_powf+0x588>
 800227a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800227e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8002358 <__ieee754_powf+0x58c>
 8002282:	eee6 5a26 	vfma.f32	s11, s12, s13
 8002286:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800235c <__ieee754_powf+0x590>
 800228a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800228e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002360 <__ieee754_powf+0x594>
 8002292:	eee6 5a26 	vfma.f32	s11, s12, s13
 8002296:	eeb0 6a47 	vmov.f32	s12, s14
 800229a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800229e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80022a2:	ee67 5a06 	vmul.f32	s11, s14, s12
 80022a6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80022aa:	eee7 7a27 	vfma.f32	s15, s14, s15
 80022ae:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80022b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80022be:	ee10 3a10 	vmov	r3, s0
 80022c2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80022c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022ca:	da06      	bge.n	80022da <__ieee754_powf+0x50e>
 80022cc:	f000 f854 	bl	8002378 <scalbnf>
 80022d0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80022d4:	e592      	b.n	8001dfc <__ieee754_powf+0x30>
 80022d6:	2000      	movs	r0, #0
 80022d8:	e7a7      	b.n	800222a <__ieee754_powf+0x45e>
 80022da:	ee00 3a10 	vmov	s0, r3
 80022de:	e7f7      	b.n	80022d0 <__ieee754_powf+0x504>
 80022e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80022e4:	e58a      	b.n	8001dfc <__ieee754_powf+0x30>
 80022e6:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8002364 <__ieee754_powf+0x598>
 80022ea:	e587      	b.n	8001dfc <__ieee754_powf+0x30>
 80022ec:	eeb0 0a48 	vmov.f32	s0, s16
 80022f0:	e584      	b.n	8001dfc <__ieee754_powf+0x30>
 80022f2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80022f6:	f43f adbb 	beq.w	8001e70 <__ieee754_powf+0xa4>
 80022fa:	2502      	movs	r5, #2
 80022fc:	eeb0 0a48 	vmov.f32	s0, s16
 8002300:	f000 f832 	bl	8002368 <fabsf>
 8002304:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8002308:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800230c:	4647      	mov	r7, r8
 800230e:	d003      	beq.n	8002318 <__ieee754_powf+0x54c>
 8002310:	f1b8 0f00 	cmp.w	r8, #0
 8002314:	f47f addb 	bne.w	8001ece <__ieee754_powf+0x102>
 8002318:	2c00      	cmp	r4, #0
 800231a:	bfbc      	itt	lt
 800231c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8002320:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8002324:	2e00      	cmp	r6, #0
 8002326:	f6bf ad69 	bge.w	8001dfc <__ieee754_powf+0x30>
 800232a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800232e:	ea58 0805 	orrs.w	r8, r8, r5
 8002332:	f47f adc7 	bne.w	8001ec4 <__ieee754_powf+0xf8>
 8002336:	ee70 7a40 	vsub.f32	s15, s0, s0
 800233a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800233e:	e55d      	b.n	8001dfc <__ieee754_powf+0x30>
 8002340:	ff800000 	.word	0xff800000
 8002344:	3f317218 	.word	0x3f317218
 8002348:	3f317200 	.word	0x3f317200
 800234c:	35bfbe8c 	.word	0x35bfbe8c
 8002350:	b5ddea0e 	.word	0xb5ddea0e
 8002354:	3331bb4c 	.word	0x3331bb4c
 8002358:	388ab355 	.word	0x388ab355
 800235c:	bb360b61 	.word	0xbb360b61
 8002360:	3e2aaaab 	.word	0x3e2aaaab
 8002364:	00000000 	.word	0x00000000

08002368 <fabsf>:
 8002368:	ee10 3a10 	vmov	r3, s0
 800236c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002370:	ee00 3a10 	vmov	s0, r3
 8002374:	4770      	bx	lr
	...

08002378 <scalbnf>:
 8002378:	ee10 3a10 	vmov	r3, s0
 800237c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8002380:	d02b      	beq.n	80023da <scalbnf+0x62>
 8002382:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8002386:	d302      	bcc.n	800238e <scalbnf+0x16>
 8002388:	ee30 0a00 	vadd.f32	s0, s0, s0
 800238c:	4770      	bx	lr
 800238e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8002392:	d123      	bne.n	80023dc <scalbnf+0x64>
 8002394:	4b24      	ldr	r3, [pc, #144]	@ (8002428 <scalbnf+0xb0>)
 8002396:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800242c <scalbnf+0xb4>
 800239a:	4298      	cmp	r0, r3
 800239c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80023a0:	db17      	blt.n	80023d2 <scalbnf+0x5a>
 80023a2:	ee10 3a10 	vmov	r3, s0
 80023a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80023aa:	3a19      	subs	r2, #25
 80023ac:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80023b0:	4288      	cmp	r0, r1
 80023b2:	dd15      	ble.n	80023e0 <scalbnf+0x68>
 80023b4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8002430 <scalbnf+0xb8>
 80023b8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002434 <scalbnf+0xbc>
 80023bc:	ee10 3a10 	vmov	r3, s0
 80023c0:	eeb0 7a67 	vmov.f32	s14, s15
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bfb8      	it	lt
 80023c8:	eef0 7a66 	vmovlt.f32	s15, s13
 80023cc:	ee27 0a87 	vmul.f32	s0, s15, s14
 80023d0:	4770      	bx	lr
 80023d2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002438 <scalbnf+0xc0>
 80023d6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80023da:	4770      	bx	lr
 80023dc:	0dd2      	lsrs	r2, r2, #23
 80023de:	e7e5      	b.n	80023ac <scalbnf+0x34>
 80023e0:	4410      	add	r0, r2
 80023e2:	28fe      	cmp	r0, #254	@ 0xfe
 80023e4:	dce6      	bgt.n	80023b4 <scalbnf+0x3c>
 80023e6:	2800      	cmp	r0, #0
 80023e8:	dd06      	ble.n	80023f8 <scalbnf+0x80>
 80023ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80023ee:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80023f2:	ee00 3a10 	vmov	s0, r3
 80023f6:	4770      	bx	lr
 80023f8:	f110 0f16 	cmn.w	r0, #22
 80023fc:	da09      	bge.n	8002412 <scalbnf+0x9a>
 80023fe:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8002438 <scalbnf+0xc0>
 8002402:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800243c <scalbnf+0xc4>
 8002406:	ee10 3a10 	vmov	r3, s0
 800240a:	eeb0 7a67 	vmov.f32	s14, s15
 800240e:	2b00      	cmp	r3, #0
 8002410:	e7d9      	b.n	80023c6 <scalbnf+0x4e>
 8002412:	3019      	adds	r0, #25
 8002414:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002418:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800241c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002440 <scalbnf+0xc8>
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	e7d7      	b.n	80023d6 <scalbnf+0x5e>
 8002426:	bf00      	nop
 8002428:	ffff3cb0 	.word	0xffff3cb0
 800242c:	4c000000 	.word	0x4c000000
 8002430:	7149f2ca 	.word	0x7149f2ca
 8002434:	f149f2ca 	.word	0xf149f2ca
 8002438:	0da24260 	.word	0x0da24260
 800243c:	8da24260 	.word	0x8da24260
 8002440:	33000000 	.word	0x33000000

08002444 <with_errnof>:
 8002444:	b510      	push	{r4, lr}
 8002446:	ed2d 8b02 	vpush	{d8}
 800244a:	eeb0 8a40 	vmov.f32	s16, s0
 800244e:	4604      	mov	r4, r0
 8002450:	f7fe ffe4 	bl	800141c <__errno>
 8002454:	eeb0 0a48 	vmov.f32	s0, s16
 8002458:	ecbd 8b02 	vpop	{d8}
 800245c:	6004      	str	r4, [r0, #0]
 800245e:	bd10      	pop	{r4, pc}

08002460 <xflowf>:
 8002460:	b130      	cbz	r0, 8002470 <xflowf+0x10>
 8002462:	eef1 7a40 	vneg.f32	s15, s0
 8002466:	ee27 0a80 	vmul.f32	s0, s15, s0
 800246a:	2022      	movs	r0, #34	@ 0x22
 800246c:	f7ff bfea 	b.w	8002444 <with_errnof>
 8002470:	eef0 7a40 	vmov.f32	s15, s0
 8002474:	e7f7      	b.n	8002466 <xflowf+0x6>
	...

08002478 <__math_uflowf>:
 8002478:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002480 <__math_uflowf+0x8>
 800247c:	f7ff bff0 	b.w	8002460 <xflowf>
 8002480:	10000000 	.word	0x10000000

08002484 <__math_oflowf>:
 8002484:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800248c <__math_oflowf+0x8>
 8002488:	f7ff bfea 	b.w	8002460 <xflowf>
 800248c:	70000000 	.word	0x70000000

08002490 <__ieee754_sqrtf>:
 8002490:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8002494:	4770      	bx	lr
	...

08002498 <_init>:
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249a:	bf00      	nop
 800249c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800249e:	bc08      	pop	{r3}
 80024a0:	469e      	mov	lr, r3
 80024a2:	4770      	bx	lr

080024a4 <_fini>:
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	bf00      	nop
 80024a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024aa:	bc08      	pop	{r3}
 80024ac:	469e      	mov	lr, r3
 80024ae:	4770      	bx	lr
